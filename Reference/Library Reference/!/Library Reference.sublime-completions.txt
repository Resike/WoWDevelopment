{
	"scope": "source.lua - entity - punctuation - keyword - string - meta.punctuation.lua - meta.method-call.lua",
	"completions": [
		{
			"trigger": "abs\t(x)",
			"contents": "abs(${1:x})$0",
		},
		{
			"trigger": "acos\t(x)",
			"contents": "acos(${1:x})$0",
		},
		{
			"trigger": "asin\t(x)",
			"contents": "asin(${1:x})$0",
		},
		{
			"trigger": "assert\t(condition, \"message\")",
			"contents": "assert(${1:condition}, \"${2:message}\")$0",
		},
		{
			"trigger": "atan\t(x)",
			"contents": "atan(${1:x})$0",
		},
		{
			"trigger": "atan2\t(x, y)",
			"contents": "atan2(${1:x}, ${2:y})$0",
		},
		{
			"trigger": "ceil\t(x)",
			"contents": "ceil(${1:x})$0",
		},
		{
			"trigger": "collectgarbage\t(option, [arg])",
			"contents": "collectgarbage(${1:option}, ${2:[arg]})$0",
		},
		{
			"trigger": "cos\t(x)",
			"contents": "cos(${1:x})$0",
		},
		{
			"trigger": "date\t([\"format\"], [time])",
			"contents": "date(${1:[\"format\"]}, ${2:[time]})$0",
		},
		{
			"trigger": "debuglocals\t(stackLevel)",
			"contents": "debuglocals(${1:stackLevel})$0",
		},
		{
			"trigger": "debugprofilestart\t()",
			"contents": "debugprofilestart()$0",
		},
		{
			"trigger": "debugprofilestop\t()",
			"contents": "debugprofilestop()$0",
		},
		{
			"trigger": "debugstack\t(start, countTop, countBot)",
			"contents": "debugstack(${1:start}, ${2:countTop}, ${3:countBot})$0",
		},
		{
			"trigger": "deg\t(radians)",
			"contents": "deg(${1:radians})$0",
		},
		{
			"trigger": "difftime\t(time2, time1)",
			"contents": "difftime(${1:time2}, ${2:time1})$0",
		},
		{
			"trigger": "error\t(\"message\", [level])",
			"contents": "error(\"${1:message}\", ${2:[level]})$0",
		},
		{
			"trigger": "exp\t(x)",
			"contents": "exp(${1:x})$0",
		},
		{
			"trigger": "floor\t(x)",
			"contents": "floor(${1:x})$0",
		},
		{
			"trigger": "format\t(\"formatString\", ...)",
			"contents": "format(\"${1:formatString}\", ${2:...})$0",
		},
		{
			"trigger": "frexp\t(x)",
			"contents": "frexp(${1:x})$0",
		},
		{
			"trigger": "geterrorhandler\t()",
			"contents": "geterrorhandler()$0",
		},
		{
			"trigger": "getfenv\t([func])",
			"contents": "getfenv(${1:[func]})$0",
		},
		{
			"trigger": "getfenv\t([stackLevel])",
			"contents": "getfenv(${1:[stackLevel]})$0",
		},
		{
			"trigger": "getglobal\t(\"name\")",
			"contents": "getglobal(\"${1:name}\")$0",
		},
		{
			"trigger": "getmetatable\t(object)",
			"contents": "getmetatable(${1:object})$0",
		},
		{
			"trigger": "getprinthandler\t()",
			"contents": "getprinthandler()$0",
		},
		{
			"trigger": "gmatch\t(\"string\", \"pattern\")",
			"contents": "gmatch(\"${1:string}\", \"${2:pattern}\")$0",
		},
		{
			"trigger": "gsub\t(\"string\", \"pattern\", \"rep\", [maxReplaced])",
			"contents": "gsub(\"${1:string}\", \"${2:pattern}\", \"${3:rep}\", ${4:[maxReplaced]})$0",
		},
		{
			"trigger": "gsub\t(\"string\", \"pattern\", repFunc, [maxReplaced])",
			"contents": "gsub(\"${1:string}\", \"${2:pattern}\", ${3:repFunc}, ${4:[maxReplaced]})$0",
		},
		{
			"trigger": "gsub\t(\"string\", \"pattern\", repTable, [maxReplaced])",
			"contents": "gsub(\"${1:string}\", \"${2:pattern}\", ${3:repTable}, ${4:[maxReplaced]})$0",
		},
		{
			"trigger": "hooksecurefunc\t([table], \"function\", hookfunc)",
			"contents": "hooksecurefunc(${1:[table]}, \"${2:function}\", ${3:hookfunc})$0",
		},
		{
			"trigger": "hooksecurefunc\t(\"function\", hookfunc)",
			"contents": "hooksecurefunc(\"${1:function}\", ${2:hookfunc})$0",
		},
		{
			"trigger": "ipairs\t(t)",
			"contents": "ipairs(${1:table})$0",
		},
		{
			"trigger": "issecure\t()",
			"contents": "issecure()$0",
		},
		{
			"trigger": "issecurevariable\t([table], \"variable\")",
			"contents": "issecurevariable(${1:[table]}, \"${2:variable}\")$0",
		},
		{
			"trigger": "ldexp\t(m, e)",
			"contents": "ldexp(${1:m}, ${2:e})$0",
		},
		{
			"trigger": "loadstring\t(\"string\", [\"chunkname\"])",
			"contents": "loadstring(\"${1:string}\", ${2:[\"chunkname\"]})$0",
		},
		{
			"trigger": "log\t(x)",
			"contents": "log(${1:x})$0",
		},
		{
			"trigger": "log10\t(x)",
			"contents": "log10(${1:x})$0",
		},
		{
			"trigger": "max\t(...)",
			"contents": "max(${1:...})$0",
		},
		{
			"trigger": "message\t(\"text\")",
			"contents": "message(\"${1:text}\")$0",
		},
		{
			"trigger": "min\t(...)",
			"contents": "min(${1:...})$0",
		},
		{
			"trigger": "mod\t(x, y)",
			"contents": "mod(${1:x}, ${2:y})$0",
		},
		{
			"trigger": "newproxy\t(boolean)",
			"contents": "newproxy(${1:boolean})$0",
		},
		{
			"trigger": "newproxy\t(userdata)",
			"contents": "newproxy(${1:userdata})$0",
		},
		{
			"trigger": "next\t(table, [key])",
			"contents": "next(${1:table}, ${2:[key]})$0",
		},
		{
			"trigger": "pairs\t(table)",
			"contents": "pairs(${1:table})$0",
		},
		{
			"trigger": "pcall\t(func, ...)",
			"contents": "pcall(${1:func}, ${2:...})$0",
		},
		{
			"trigger": "print\t(...)",
			"contents": "print(${1:...})$0",
		},
		{
			"trigger": "rad\t(degrees)",
			"contents": "rad(${1:degrees})$0",
		},
		{
			"trigger": "random\t([m], [n])",
			"contents": "random(${1:[m]}, ${2:[n]})$0",
		},
		{
			"trigger": "rawequal\t(v1, v2)",
			"contents": "rawequal(${1:v1}, ${2:v2})$0",
		},
		{
			"trigger": "rawget\t(table, key)",
			"contents": "rawget(${1:table}, ${2:key})$0",
		},
		{
			"trigger": "rawset\t(table, key, value)",
			"contents": "rawset(${1:table}, ${2:key}, ${3:value})$0",
		},
		{
			"trigger": "scrub\t(...)",
			"contents": "scrub(${1:...})$0",
		},
		{
			"trigger": "securecall\t(func, ...)",
			"contents": "securecall(${1:func}, ${2:...})$0",
		},
		{
			"trigger": "select\t(\"#\", ...)",
			"contents": "select(\"${1:#}\", ${2:...})$0",
		},
		{
			"trigger": "select\t(index, ...)",
			"contents": "select(${1:index}, ${2:...})$0",
		},
		{
			"trigger": "seterrorhandler\t(errHandler)",
			"contents": "seterrorhandler(${1:errHandler})$0",
		},
		{
			"trigger": "setfenv\t([func], table)",
			"contents": "setfenv(${1:[func]}, ${2:table})$0",
		},
		{
			"trigger": "setglobal\t(\"name\", value)",
			"contents": "setglobal(\"${1:name}\", ${2:value})$0",
		},
		{
			"trigger": "setmetatable\t(table, metatable)",
			"contents": "setmetatable(${1:table}, ${2:metatable})$0",
		},
		{
			"trigger": "setprinthandler\t(printHandler)",
			"contents": "setprinthandler(${1:printHandler})$0",
		},
		{
			"trigger": "sin\t(x)",
			"contents": "sin(${1:x})$0",
		},
		{
			"trigger": "sort\t(table, [comparator])",
			"contents": "sort(${1:table}, ${2:[comparator]})$0",
		},
		{
			"trigger": "sqrt\t(x)",
			"contents": "sqrt(${1:x})$0",
		},
		{
			"trigger": "strbyte\t(\"string\", [firstChar], [lastChar])",
			"contents": "strbyte(\"${1:string}\", ${2:[firstChar]}, ${3:[lastChar]})$0",
		},
		{
			"trigger": "strchar\t(n, [...])",
			"contents": "strchar(${1:n}, ${2:[...]})$0",
		},
		{
			"trigger": "strconcat\t(\"...\")",
			"contents": "strconcat(\"${1:...}\")$0",
		},
		{
			"trigger": "strfind\t(\"string\", \"pattern\", [init], [plain])",
			"contents": "strfind(\"${1:string}\", \"${2:pattern}\", ${3:[init]}, ${4:[plain]})$0",
		},
		{
			"trigger": "strjoin\t(\"seperator\", ...)",
			"contents": "strjoin(\"${1:seperator}\", ${2:...})$0",
		},
		{
			"trigger": "strlen\t(\"string\")",
			"contents": "strlen(\"${1:string}\")$0",
		},
		{
			"trigger": "strlenutf8\t(\"string\")",
			"contents": "strlenutf8(\"${1:string}\")$0",
		},
		{
			"trigger": "strlower\t(\"string\")",
			"contents": "strlower(\"${1:string}\")$0",
		},
		{
			"trigger": "strmatch\t(\"string\", \"pattern\")",
			"contents": "strmatch(\"${1:string}\", \"${2:pattern}\")$0",
		},
		{
			"trigger": "strrep\t(\"string\", n)",
			"contents": "strrep(\"${1:string}\", n)$0",
		},
		{
			"trigger": "strrev\t(\"string\")",
			"contents": "strrev(\"${1:string}\")$0",
		},
		{
			"trigger": "strsplit\t(\"seperator\", \"text\", limit)",
			"contents": "strsplit(\"${1:seperator}\", \"${2:text}\", ${3:limit})$0",
		},
		{
			"trigger": "strsub\t(\"string\", firstChar, [lastChar])",
			"contents": "strsub(\"${1:string}\", ${2:firstChar}, ${3:[lastChar]})$0",
		},
		{
			"trigger": "strtrim\t(\"string\", [\"trimChars\"])",
			"contents": "strtrim(\"${1:string}\", ${2:[\"trimChars\"]})$0",
		},
		{
			"trigger": "strupper\t(\"string\")",
			"contents": "strupper(\"${1:string}\")$0",
		},
		{
			"trigger": "tan\t(x)",
			"contents": "tan(${1:x})$0",
		},
		{
			"trigger": "time\t([timeDesc])",
			"contents": "time(${1:[timeDesc]})$0",
		},
		{
			"trigger": "tinsert\t(table, [position], value)",
			"contents": "tinsert(${1:table}, ${2:[position]}, ${3:value})$0",
		},
		{
			"trigger": "tonumber\t(x, [base])",
			"contents": "tonumber(${1:x}, ${2:[base]})$0",
		},
		{
			"trigger": "tostring\t(value)",
			"contents": "tostring(${1:value})$0",
		},
		{
			"trigger": "tostringall\t(...)",
			"contents": "tostringall(${1:...})$0",
		},
		{
			"trigger": "tremove\t(table, [position])",
			"contents": "tremove(${1:table}, ${2:[position]})$0",
		},
		{
			"trigger": "type\t(v)",
			"contents": "type(${1:v})$0",
		},
		{
			"trigger": "unpack\t(t, [i], [j])",
			"contents": "unpack(${1:t}, ${2:[i]}, ${3:[j]})$0",
		},
		{
			"trigger": "wipe\t(table)",
			"contents": "wipe(${1:table})$0",
		},
		{
			"trigger": "xpcall\t(func, errHandler)",
			"contents": "xpcall(${1:func}, ${2:errHandler})$0",
		},




		{
			"trigger": "_abs\t(x)",
			"contents": "${1:absoluteValue} = abs(${2:x})$0",
		},
		{
			"trigger": "_assert\t(condition, \"message\")",
			"contents": "${1:value} = assert(${2:condition}, \"${3:message}\")$0",
		},
		{
			"trigger": "_ceil\t(x)",
			"contents": "${1:ceiling} = ceil(${2:x})$0",
		},
		{
			"trigger": "_date\t([\"format\"], [time])",
			"contents": "${1:dateValue} = date(${2:[\"format\"]}, ${3:[time]})$0",
		},
		{
			"trigger": "_debuglocals\t(stackLevel)",
			"contents": "${1:localsInfo} = debuglocals(${2:stackLevel})$0",
		},
		{
			"trigger": "_debugprofilestop\t()",
			"contents": "${1:time} = debugprofilestop()$0",
		},
		{
			"trigger": "_debugstack\t(start, countTop, countBot)",
			"contents": "${1:debugstring} = debugstack(${2:start}, ${3:countTop}, ${4:countBot})$0",
		},
		{
			"trigger": "_deg\t(radians)",
			"contents": "${1:degrees} = deg(${2:radians})$0",
		},
		{
			"trigger": "_difftime\t(time2, time1)",
			"contents": "${1:seconds} = difftime(${2:time2}, ${3:time1})$0",
		},
		{
			"trigger": "_exp\t(x)",
			"contents": "${1:exp} = exp(${2:x})$0",
		},
		{
			"trigger": "_floor\t(x)",
			"contents": "${1:floor} = floor(${2:x})$0",
		},
		{
			"trigger": "_format\t(\"formatString\", ...)",
			"contents": "${1:formatted} = format(\"${2:formatString}\", ${3:...})$0",
		},
		{
			"trigger": "_frexp\t(x)",
			"contents": "${1:m}, ${2:e} = frexp(${3:x})$0",
		},
		{
			"trigger": "_geterrorhandler\t()",
			"contents": "${1:handler} = geterrorhandler()$0",
		},
		{
			"trigger": "_getfenv\t([func])",
			"contents": "${1:env} = getfenv(${2:[func]})$0",
		},
		{
			"trigger": "_getfenv\t([stackLevel])",
			"contents": "${1:env} = getfenv(${2:[stackLevel]})$0",
		},
		{
			"trigger": "_getglobal\t(\"name\")",
			"contents": "${1:value} = getglobal(\"${2:name}\")$0",
		},
		{
			"trigger": "_getmetatable\t(object)",
			"contents": "${1:metatable} = getmetatable(${2:object})$0",
		},
		{
			"trigger": "_getprinthandler\t()",
			"contents": "${1:printHandler} = getprinthandler()$0",
		},
		{
			"trigger": "_gmatch\t(\"string\", \"pattern\")",
			"contents": "${1:iterator} = gmatch(\"${2:string}\", \"${3:pattern}\")$0",
		},
		{
			"trigger": "_gsub\t(\"string\", \"pattern\", \"rep\", [maxReplaced])",
			"contents": "${1:newString}, ${2:numMatched} = gsub(\"${3:string}\", \"${4:pattern}\", \"${5:rep}\", ${6:[maxReplaced]})$0",
		},
		{
			"trigger": "_gsub\t(\"string\", \"pattern\", repFunc, [maxReplaced])",
			"contents": "${1:newString}, ${2:numMatched} = gsub(\"${3:string}\", \"${4:pattern}\", ${5:repFunc}, ${6:[maxReplaced]})$0",
		},
		{
			"trigger": "_gsub\t(\"string\", \"pattern\", repTable, [maxReplaced])",
			"contents": "${1:newString}, ${2:numMatched} = gsub(\"${3:string}\", \"${4:pattern}\", ${5:repTable}, ${6:[maxReplaced]})$0",
		},
		{
			"trigger": "_ipairs\t(t)",
			"contents": "${1:iterator}, ${2:table}, ${3:index} = ipairs(${4:table})$0",
		},
		{
			"trigger": "_issecure\t()",
			"contents": "${1:secure} = issecure()$0",
		},
		{
			"trigger": "_issecurevariable\t([table], \"variable\")",
			"contents": "${1:issecure}, ${2:taint} = issecurevariable(${3:[table]}, \"${4:variable}\")$0",
		},
		{
			"trigger": "_ldexp\t(m, e)",
			"contents": "${1:x} = ldexp(${2:m}, ${3:e})$0",
		},
		{
			"trigger": "_loadstring\t(\"string\", [\"chunkname\"])",
			"contents": "${1:chunk}, ${2:error} = loadstring(\"${3:string}\", ${4:[\"chunkname\"]})$0",
		},
		{
			"trigger": "_log\t(x)",
			"contents": "${1:naturalLog} = log(${2:x})$0",
		},
		{
			"trigger": "_log10\t(x)",
			"contents": "${1:base10log} = log10(${2:x})$0",
		},
		{
			"trigger": "_max\t(...)",
			"contents": "${1:maximum} = max(${2:...})$0",
		},
		{
			"trigger": "_min\t(...)",
			"contents": "${1:minimum} = min(${2:...})$0",
		},
		{
			"trigger": "_mod\t(x, y)",
			"contents": "${1:remainder} = mod(${2:x}, ${3:y})$0",
		},
		{
			"trigger": "_newproxy\t(boolean)",
			"contents": "${1:userdata} = newproxy(${2:boolean})$0",
		},
		{
			"trigger": "_newproxy\t(userdata)",
			"contents": "${1:userdata} = newproxy(${2:userdata})$0",
		},
		{
			"trigger": "_next\t(table, [key])",
			"contents": "${1:nextKey}, ${2:nextValue} = next(${3:table}, ${4:[key]})$0",
		},
		{
			"trigger": "_pairs\t(table)",
			"contents": "${1:iterator}, ${2:table}, ${3:index} = pairs(${4:table})$0",
		},
		{
			"trigger": "_pcall\t(func, ...)",
			"contents": "${1:status}, ${2:...} = pcall(${3:func}, ${4:...})$0",
		},
		{
			"trigger": "_rad\t(degrees)",
			"contents": "${1:radians} = rad(${2:degrees})$0",
		},
		{
			"trigger": "_random\t([m], [n])",
			"contents": "${1:randomNum} = random(${2:[m]}, ${3:[n]})$0",
		},
		{
			"trigger": "_rawequal\t(v1, v2)",
			"contents": "${1:isEqual} = rawequal(${2:v1}, ${3:v2})$0",
		},
		{
			"trigger": "_rawget\t(table, key)",
			"contents": "${1:value} = rawget(${2:table}, ${3:key})$0",
		},
		{
			"trigger": "_scrub\t(...)",
			"contents": "${1:...} = scrub(${2:...})$0",
		},
		{
			"trigger": "_securecall\t(func, ...)",
			"contents": "${1:...} = securecall(${2:func}, ${3:...})$0",
		},
		{
			"trigger": "_select\t(\"#\", ...)",
			"contents": "${1:...} = select(\"${2:#}\", ${3:...})$0",
		},
		{
			"trigger": "_select\t(index, ...)",
			"contents": "${1:...} = select(${2:index}, ${3:...})$0",
		},
		{
			"trigger": "_setfenv\t([func], table)",
			"contents": "${1:func} = setfenv(${2:[func]}, ${3:table})$0",
		},
		{
			"trigger": "_setmetatable\t(table, metatable)",
			"contents": "${1:table} = setmetatable(${2:table}, ${3:metatable})$0",
		},
		{
			"trigger": "_sqrt\t(x)",
			"contents": "${1:root} = sqrt(${2:x})$0",
		},
		{
			"trigger": "_strbyte\t(\"string\", [firstChar], [lastChar])",
			"contents": "${1:value}, ${2:...} = strbyte(\"${3:string}\", ${4:[firstChar]}, ${5:[lastChar]})$0",
		},
		{
			"trigger": "_strchar\t(n, [...])",
			"contents": "${1:string} = strchar(${2:n}, ${3:[...]})$0",
		},
		{
			"trigger": "_strconcat\t(\"...\")",
			"contents": "${1:result} = strconcat(\"${2:...}\")$0",
		},
		{
			"trigger": "_strfind\t(\"string\", \"pattern\", [init], [plain])",
			"contents": "${1:start}, ${2:end}, ${3:...} = strfind(\"${4:string}\", \"${4:pattern}\", ${5:[init]}, ${7:[plain]})$0",
		},
		{
			"trigger": "_strjoin\t(\"seperator\", ...)",
			"contents": "${1:text} = strjoin(\"${2:seperator}\", ${3:...})$0",
		},
		{
			"trigger": "_strlen\t(\"string\")",
			"contents": "${1:length} = strlen(\"${2:string}\")$0",
		},
		{
			"trigger": "_strlenutf8\t(\"string\")",
			"contents": "${1:length} = strlenutf8(\"${2:string}\")$0",
		},
		{
			"trigger": "_strlower\t(\"string\")",
			"contents": "${1:lowerCase} = strlower(\"${2:string}\")$0",
		},
		{
			"trigger": "_strmatch\t(\"string\", \"pattern\")",
			"contents": "${1:match}, ${2:...} = strmatch(\"${2:string}\", \"${3:pattern}\")$0",
		},
		{
			"trigger": "_strmatch\t(string, \"pattern\")",
			"contents": "${1:match}, ${2:...} = strmatch(${2:string}, \"${3:pattern}\")$0",
		},
		{
			"trigger": "_strrep\t(\"string\", n)",
			"contents": "${1:repeated} = strrep(\"${2:string}\", ${3:n})$0",
		},
		{
			"trigger": "_strrev\t(\"string\")",
			"contents": "${1:string} = strrev(\"${2:string}\")$0",
		},
		{
			"trigger": "_strsplit\t(\"seperator\", \"text\", limit)",
			"contents": "${1:...} = strsplit(\"${2:seperator}\", \"${3:text}\", ${4:limit})$0",
		},
		{
			"trigger": "_strsub\t(\"string\", firstChar, [lastChar])",
			"contents": "${1:string} = strsub(\"${2:string}\", ${3:firstChar}, ${4:[lastChar]})$0",
		},
		{
			"trigger": "_strtrim\t(\"string\", [\"trimChars\"])",
			"contents": "${1:text} = strtrim(\"${2:string}\", ${3:[\"trimChars\"]})$0",
		},
		{
			"trigger": "_strupper\t(\"string\")",
			"contents": "${1:lowerCase} = strupper(\"${2:string}\")$0",
		},
		{
			"trigger": "_time\t([timeDesc])",
			"contents": "${1:t} = time(${2:[timeDesc]})$0",
		},
		{
			"trigger": "_tonumber\t(x, [base])",
			"contents": "${1:numValue} = tonumber(${2:x}, ${3:[base]})$0",
		},
		{
			"trigger": "_tostring\t(value)",
			"contents": "${1:stringValue} = tostring(${2:value})$0",
		},
		{
			"trigger": "_tostringall\t(...)",
			"contents": "${1:...} = tostringall(${2:...})$0",
		},
		{
			"trigger": "_type\t(v)",
			"contents": "${1:typeString} = type(${2:v})$0",
		},
		{
			"trigger": "_unpack\t(t, [i], [j])",
			"contents": "${1:...} = unpack(${2:t}, ${3:[i]}, ${4:[j]})$0",
		},
		{
			"trigger": "_wipe\t(table)",
			"contents": "${1:emptyTable} = wipe(${2:table})$0",
		},
		{
			"trigger": "_xpcall\t(func, errHandler)",
			"contents": "${1:status}, ${2:...} = xpcall(${3:func}, ${4:errHandler})$0",
		},
	]
}
