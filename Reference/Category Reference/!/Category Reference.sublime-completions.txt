{
	"scope": "source.lua - entity - punctuation - keyword - string - meta.function.arguments.lua - meta.punctuation.lua - meta.method-call.lua",
	"completions": [
		{
			"trigger": "C_AccountInfo.GetIDFromBattleNetAccountGUID\t(\"guid\")",
			"contents": "C_AccountInfo.GetIDFromBattleNetAccountGUID(\"${1:guid}\")$0",
		},
		{
			"trigger": "C_AccountInfo.IsGUIDBattleNetAccountType\t(\"guid\")",
			"contents": "C_AccountInfo.IsGUIDBattleNetAccountType(\"${1:guid}\")$0",
		},
		{
			"trigger": "C_AccountInfo.IsGUIDRelatedToLocalAccount\t(\"guid\")",
			"contents": "C_AccountInfo.IsGUIDRelatedToLocalAccount(\"${1:guid}\")$0",
		},
		{
			"trigger": "C_AchievementInfo.GetRewardItemID\t(achievementID)",
			"contents": "C_AchievementInfo.GetRewardItemID(${1:achievementID})$0",
		},
		{
			"trigger": "C_AchievementInfo.GetSupercedingAchievements\t(achievementID)",
			"contents": "C_AchievementInfo.GetSupercedingAchievements(${1:achievementID})$0",
		},
		{
			"trigger": "C_AchievementInfo.SetPortraitTexture\t(textureObject)",
			"contents": "C_AchievementInfo.SetPortraitTexture(${1:textureObject})$0",
		},
		{
			"trigger": "C_ActionBar.FindFlyoutActionButtons\t(flyoutID)",
			"contents": "C_ActionBar.FindFlyoutActionButtons(${1:flyoutID})$0",
		},
		{
			"trigger": "C_ActionBar.FindPetActionButtons\t(petActionID)",
			"contents": "C_ActionBar.FindPetActionButtons(${1:petActionID})$0",
		},
		{
			"trigger": "C_ActionBar.FindSpellActionButtons\t(spellID)",
			"contents": "C_ActionBar.FindSpellActionButtons(${1:spellID})$0",
		},
		{
			"trigger": "C_ActionBar.GetPetActionPetBarIndices\t(petActionID)",
			"contents": "C_ActionBar.GetPetActionPetBarIndices(${1:petActionID})$0",
		},
		{
			"trigger": "C_ActionBar.HasFlyoutActionButtons\t(flyoutID)",
			"contents": "C_ActionBar.HasFlyoutActionButtons(${1:flyoutID})$0",
		},
		{
			"trigger": "C_ActionBar.HasPetActionButtons\t(petActionID)",
			"contents": "C_ActionBar.HasPetActionButtons(${1:petActionID})$0",
		},
		{
			"trigger": "C_ActionBar.HasPetActionPetBarIndices\t(petActionID)",
			"contents": "C_ActionBar.HasPetActionPetBarIndices(${1:petActionID})$0",
		},
		{
			"trigger": "C_ActionBar.HasSpellActionButtons\t(spellID)",
			"contents": "C_ActionBar.HasSpellActionButtons(${1:spellID})$0",
		},
		{
			"trigger": "C_ActionBar.IsAutoCastPetAction\t(slotID)",
			"contents": "C_ActionBar.IsAutoCastPetAction(${1:slotID})$0",
		},
		{
			"trigger": "C_ActionBar.IsEnabledAutoCastPetAction\t(slotID)",
			"contents": "C_ActionBar.IsEnabledAutoCastPetAction(${1:slotID})$0",
		},
		{
			"trigger": "C_ActionBar.IsOnBarOrSpecialBar\t(spellID)",
			"contents": "C_ActionBar.IsOnBarOrSpecialBar(${1:spellID})$0",
		},
		{
			"trigger": "C_ActionBar.ShouldOverrideBarShowHealthBar\t()",
			"contents": "C_ActionBar.ShouldOverrideBarShowHealthBar()$0",
		},
		{
			"trigger": "C_ActionBar.ShouldOverrideBarShowManaBar\t()",
			"contents": "C_ActionBar.ShouldOverrideBarShowManaBar()$0",
		},
		{
			"trigger": "C_ActionBar.ToggleAutoCastPetAction\t(slotID)",
			"contents": "C_ActionBar.ToggleAutoCastPetAction(${1:slotID})$0",
		},
		{
			"trigger": "C_AlliedRaces.ClearAlliedRaceDetailsGiver\t()",
			"contents": "C_AlliedRaces.ClearAlliedRaceDetailsGiver()$0",
		},
		{
			"trigger": "C_AlliedRaces.GetAllRacialAbilitiesFromID\t(raceID)",
			"contents": "C_AlliedRaces.GetAllRacialAbilitiesFromID(${1:raceID})$0",
		},
		{
			"trigger": "C_AlliedRaces.GetRaceInfoByID\t(raceID)",
			"contents": "C_AlliedRaces.GetRaceInfoByID(${1:raceID})$0",
		},
		{
			"trigger": "C_AreaPoiInfo.GetAreaPOIForMap\t(uiMapID)",
			"contents": "C_AreaPoiInfo.GetAreaPOIForMap(${1:uiMapID})$0",
		},
		{
			"trigger": "C_AreaPoiInfo.GetAreaPOIInfo\t(uiMapID, areaPoiID)",
			"contents": "C_AreaPoiInfo.GetAreaPOIInfo(${1:uiMapID}, ${2:areaPoiID})$0",
		},
		{
			"trigger": "C_AreaPoiInfo.GetAreaPOISecondsLeft\t(areaPoiID)",
			"contents": "C_AreaPoiInfo.GetAreaPOISecondsLeft(${1:areaPoiID})$0",
		},
		{
			"trigger": "C_AreaPoiInfo.IsAreaPOITimed\t(areaPoiID)",
			"contents": "C_AreaPoiInfo.IsAreaPOITimed(${1:areaPoiID})$0",
		},
		{
			"trigger": "C_ArtifactUI.AddPower\t(powerID)",
			"contents": "C_ArtifactUI.AddPower(${1:powerID})$0",
		},
		{
			"trigger": "C_ArtifactUI.ApplyCursorRelicToSlot\t(relicSlotIndex)",
			"contents": "C_ArtifactUI.ApplyCursorRelicToSlot(${1:relicSlotIndex})$0",
		},
		{
			"trigger": "C_ArtifactUI.CanApplyArtifactRelic\t(relicItemID, onlyUnlocked)",
			"contents": "C_ArtifactUI.CanApplyArtifactRelic(${1:relicItemID}, ${2:onlyUnlocked})$0",
		},
		{
			"trigger": "C_ArtifactUI.CanApplyCursorRelicToSlot\t(relicSlotIndex)",
			"contents": "C_ArtifactUI.CanApplyCursorRelicToSlot(${1:relicSlotIndex})$0",
		},
		{
			"trigger": "C_ArtifactUI.CanApplyRelicItemIDToEquippedArtifactSlot\t(relicItemID, relicSlotIndex)",
			"contents": "C_ArtifactUI.CanApplyRelicItemIDToEquippedArtifactSlot(${1:relicItemID}, ${2:relicSlotIndex})$0",
		},
		{
			"trigger": "C_ArtifactUI.CanApplyRelicItemIDToSlot\t(relicItemID, relicSlotIndex)",
			"contents": "C_ArtifactUI.CanApplyRelicItemIDToSlot(${1:relicItemID}, ${2:relicSlotIndex})$0",
		},
		{
			"trigger": "C_ArtifactUI.CheckRespecNPC\t()",
			"contents": "C_ArtifactUI.CheckRespecNPC()$0",
		},
		{
			"trigger": "C_ArtifactUI.Clear\t()",
			"contents": "C_ArtifactUI.Clear()$0",
		},
		{
			"trigger": "C_ArtifactUI.ClearForgeCamera\t()",
			"contents": "C_ArtifactUI.ClearForgeCamera()$0",
		},
		{
			"trigger": "C_ArtifactUI.ConfirmRespec\t()",
			"contents": "C_ArtifactUI.ConfirmRespec()$0",
		},
		{
			"trigger": "C_ArtifactUI.DoesEquippedArtifactHaveAnyRelicsSlotted\t()",
			"contents": "C_ArtifactUI.DoesEquippedArtifactHaveAnyRelicsSlotted()$0",
		},
		{
			"trigger": "C_ArtifactUI.GetAppearanceInfo\t(appearanceSetIndex, appearanceIndex)",
			"contents": "C_ArtifactUI.GetAppearanceInfo(${1:appearanceSetIndex}, ${2:appearanceIndex})$0",
		},
		{
			"trigger": "C_ArtifactUI.GetAppearanceInfoByID\t(artifactAppearanceID)",
			"contents": "C_ArtifactUI.GetAppearanceInfoByID(${1:artifactAppearanceID})$0",
		},
		{
			"trigger": "C_ArtifactUI.GetAppearanceSetInfo\t(appearanceSetIndex)",
			"contents": "C_ArtifactUI.GetAppearanceSetInfo(${1:appearanceSetIndex})$0",
		},
		{
			"trigger": "C_ArtifactUI.GetArtifactArtInfo\t()",
			"contents": "C_ArtifactUI.GetArtifactArtInfo()$0",
		},
		{
			"trigger": "C_ArtifactUI.GetArtifactInfo\t()",
			"contents": "C_ArtifactUI.GetArtifactInfo()$0",
		},
		{
			"trigger": "C_ArtifactUI.GetArtifactItemID\t()",
			"contents": "C_ArtifactUI.GetArtifactItemID()$0",
		},
		{
			"trigger": "C_ArtifactUI.GetArtifactTier\t()",
			"contents": "C_ArtifactUI.GetArtifactTier()$0",
		},
		{
			"trigger": "C_ArtifactUI.GetArtifactXPRewardTargetInfo\t(artifactCategoryID)",
			"contents": "C_ArtifactUI.GetArtifactXPRewardTargetInfo(${1:artifactCategoryID})$0",
		},
		{
			"trigger": "C_ArtifactUI.GetCostForPointAtRank\t(rank, tier)",
			"contents": "C_ArtifactUI.GetCostForPointAtRank(${1:rank}, ${2:tier})$0",
		},
		{
			"trigger": "C_ArtifactUI.GetEquippedArtifactArtInfo\t()",
			"contents": "C_ArtifactUI.GetEquippedArtifactArtInfo()$0",
		},
		{
			"trigger": "C_ArtifactUI.GetEquippedArtifactInfo\t()",
			"contents": "C_ArtifactUI.GetEquippedArtifactInfo()$0",
		},
		{
			"trigger": "C_ArtifactUI.GetEquippedArtifactItemID\t()",
			"contents": "C_ArtifactUI.GetEquippedArtifactItemID()$0",
		},
		{
			"trigger": "C_ArtifactUI.GetEquippedArtifactNumRelicSlots\t(onlyUnlocked)",
			"contents": "C_ArtifactUI.GetEquippedArtifactNumRelicSlots(${1:onlyUnlocked})$0",
		},
		{
			"trigger": "C_ArtifactUI.GetEquippedArtifactRelicInfo\t(relicSlotIndex)",
			"contents": "C_ArtifactUI.GetEquippedArtifactRelicInfo(${1:relicSlotIndex})$0",
		},
		{
			"trigger": "C_ArtifactUI.GetEquippedRelicLockedReason\t(relicSlotIndex)",
			"contents": "C_ArtifactUI.GetEquippedRelicLockedReason(${1:relicSlotIndex})$0",
		},
		{
			"trigger": "C_ArtifactUI.GetForgeRotation\t()",
			"contents": "C_ArtifactUI.GetForgeRotation()$0",
		},
		{
			"trigger": "C_ArtifactUI.GetItemLevelIncreaseProvidedByRelic\t(\"itemLinkOrID\")",
			"contents": "C_ArtifactUI.GetItemLevelIncreaseProvidedByRelic(\"${1:itemLinkOrID}\")$0",
		},
		{
			"trigger": "C_ArtifactUI.GetMetaPowerInfo\t()",
			"contents": "C_ArtifactUI.GetMetaPowerInfo()$0",
		},
		{
			"trigger": "C_ArtifactUI.GetNumAppearanceSets\t()",
			"contents": "C_ArtifactUI.GetNumAppearanceSets()$0",
		},
		{
			"trigger": "C_ArtifactUI.GetNumObtainedArtifacts\t()",
			"contents": "C_ArtifactUI.GetNumObtainedArtifacts()$0",
		},
		{
			"trigger": "C_ArtifactUI.GetNumRelicSlots\t(onlyUnlocked)",
			"contents": "C_ArtifactUI.GetNumRelicSlots(${1:onlyUnlocked})$0",
		},
		{
			"trigger": "C_ArtifactUI.GetPointsRemaining\t()",
			"contents": "C_ArtifactUI.GetPointsRemaining()$0",
		},
		{
			"trigger": "C_ArtifactUI.GetPowerHyperlink\t(powerID)",
			"contents": "C_ArtifactUI.GetPowerHyperlink(${1:powerID})$0",
		},
		{
			"trigger": "C_ArtifactUI.GetPowerInfo\t(powerID)",
			"contents": "C_ArtifactUI.GetPowerInfo(${1:powerID})$0",
		},
		{
			"trigger": "C_ArtifactUI.GetPowerLinks\t(powerID)",
			"contents": "C_ArtifactUI.GetPowerLinks(${1:powerID})$0",
		},
		{
			"trigger": "C_ArtifactUI.GetPowers\t()",
			"contents": "C_ArtifactUI.GetPowers()$0",
		},
		{
			"trigger": "C_ArtifactUI.GetPowersAffectedByRelic\t(relicSlotIndex)",
			"contents": "C_ArtifactUI.GetPowersAffectedByRelic(${1:relicSlotIndex})$0",
		},
		{
			"trigger": "C_ArtifactUI.GetPowersAffectedByRelicItemLink\t(\"relicItemInfo\")",
			"contents": "C_ArtifactUI.GetPowersAffectedByRelicItemLink(\"${1:relicItemInfo}\")$0",
		},
		{
			"trigger": "C_ArtifactUI.GetPreviewAppearance\t()",
			"contents": "C_ArtifactUI.GetPreviewAppearance()$0",
		},
		{
			"trigger": "C_ArtifactUI.GetRelicInfo\t(relicSlotIndex)",
			"contents": "C_ArtifactUI.GetRelicInfo(${1:relicSlotIndex})$0",
		},
		{
			"trigger": "C_ArtifactUI.GetRelicInfoByItemID\t(itemID)",
			"contents": "C_ArtifactUI.GetRelicInfoByItemID(${1:itemID})$0",
		},
		{
			"trigger": "C_ArtifactUI.GetRelicLockedReason\t(relicSlotIndex)",
			"contents": "C_ArtifactUI.GetRelicLockedReason(${1:relicSlotIndex})$0",
		},
		{
			"trigger": "C_ArtifactUI.GetRelicSlotType\t(relicSlotIndex)",
			"contents": "C_ArtifactUI.GetRelicSlotType(${1:relicSlotIndex})$0",
		},
		{
			"trigger": "C_ArtifactUI.GetRespecArtifactArtInfo\t()",
			"contents": "C_ArtifactUI.GetRespecArtifactArtInfo()$0",
		},
		{
			"trigger": "C_ArtifactUI.GetRespecArtifactInfo\t()",
			"contents": "C_ArtifactUI.GetRespecArtifactInfo()$0",
		},
		{
			"trigger": "C_ArtifactUI.GetRespecCost\t()",
			"contents": "C_ArtifactUI.GetRespecCost()$0",
		},
		{
			"trigger": "C_ArtifactUI.GetTotalPowerCost\t(startingTrait, numTraits, artifactTier)",
			"contents": "C_ArtifactUI.GetTotalPowerCost(${1:startingTrait}, ${2:numTraits}, ${3:artifactTier})$0",
		},
		{
			"trigger": "C_ArtifactUI.GetTotalPurchasedRanks\t()",
			"contents": "C_ArtifactUI.GetTotalPurchasedRanks()$0",
		},
		{
			"trigger": "C_ArtifactUI.IsArtifactDisabled\t()",
			"contents": "C_ArtifactUI.IsArtifactDisabled()$0",
		},
		{
			"trigger": "C_ArtifactUI.IsAtForge\t()",
			"contents": "C_ArtifactUI.IsAtForge()$0",
		},
		{
			"trigger": "C_ArtifactUI.IsEquippedArtifactDisabled\t()",
			"contents": "C_ArtifactUI.IsEquippedArtifactDisabled()$0",
		},
		{
			"trigger": "C_ArtifactUI.IsEquippedArtifactMaxed\t()",
			"contents": "C_ArtifactUI.IsEquippedArtifactMaxed()$0",
		},
		{
			"trigger": "C_ArtifactUI.IsMaxedByRulesOrEffect\t()",
			"contents": "C_ArtifactUI.IsMaxedByRulesOrEffect()$0",
		},
		{
			"trigger": "C_ArtifactUI.IsPowerKnown\t(powerID)",
			"contents": "C_ArtifactUI.IsPowerKnown(${1:powerID})$0",
		},
		{
			"trigger": "C_ArtifactUI.IsViewedArtifactEquipped\t()",
			"contents": "C_ArtifactUI.IsViewedArtifactEquipped()$0",
		},
		{
			"trigger": "C_ArtifactUI.SetAppearance\t(artifactAppearanceID)",
			"contents": "C_ArtifactUI.SetAppearance(${1:artifactAppearanceID})$0",
		},
		{
			"trigger": "C_ArtifactUI.SetForgeCamera\t()",
			"contents": "C_ArtifactUI.SetForgeCamera()$0",
		},
		{
			"trigger": "C_ArtifactUI.SetForgeRotation\t(forgeRotationX, forgeRotationY, forgeRotationZ)",
			"contents": "C_ArtifactUI.SetForgeRotation(${1:forgeRotationX}, ${2:forgeRotationY}, ${3:forgeRotationZ})$0",
		},
		{
			"trigger": "C_ArtifactUI.SetPreviewAppearance\t(artifactAppearanceID)",
			"contents": "C_ArtifactUI.SetPreviewAppearance(${1:artifactAppearanceID})$0",
		},
		{
			"trigger": "C_ArtifactUI.ShouldSuppressForgeRotation\t()",
			"contents": "C_ArtifactUI.ShouldSuppressForgeRotation()$0",
		},
		{
			"trigger": "C_AzeriteEmpoweredItem.CanSelectPower\t(azeriteEmpoweredItemLocation, powerID)",
			"contents": "C_AzeriteEmpoweredItem.CanSelectPower(${1:azeriteEmpoweredItemLocation}, ${2:powerID})$0",
		},
		{
			"trigger": "C_AzeriteEmpoweredItem.CloseAzeriteEmpoweredItemRespec\t()",
			"contents": "C_AzeriteEmpoweredItem.CloseAzeriteEmpoweredItemRespec()$0",
		},
		{
			"trigger": "C_AzeriteEmpoweredItem.ConfirmAzeriteEmpoweredItemRespec\t(azeriteEmpoweredItemLocation)",
			"contents": "C_AzeriteEmpoweredItem.ConfirmAzeriteEmpoweredItemRespec(${1:azeriteEmpoweredItemLocation})$0",
		},
		{
			"trigger": "C_AzeriteEmpoweredItem.GetAllTierInfo\t(azeriteEmpoweredItemLocation)",
			"contents": "C_AzeriteEmpoweredItem.GetAllTierInfo(${1:azeriteEmpoweredItemLocation})$0",
		},
		{
			"trigger": "C_AzeriteEmpoweredItem.GetAllTierInfoByItemID\t(\"itemInfo\", [classID])",
			"contents": "C_AzeriteEmpoweredItem.GetAllTierInfoByItemID(\"${1:itemInfo}\", [${2:classID}])$0",
		},
		{
			"trigger": "C_AzeriteEmpoweredItem.GetAzeriteEmpoweredItemRespecCost\t()",
			"contents": "C_AzeriteEmpoweredItem.GetAzeriteEmpoweredItemRespecCost()$0",
		},
		{
			"trigger": "C_AzeriteEmpoweredItem.GetPowerInfo\t(powerID)",
			"contents": "C_AzeriteEmpoweredItem.GetPowerInfo(${1:powerID})$0",
		},
		{
			"trigger": "C_AzeriteEmpoweredItem.GetPowerText\t(azeriteEmpoweredItemLocation, powerID, level)",
			"contents": "C_AzeriteEmpoweredItem.GetPowerText(${1:azeriteEmpoweredItemLocation}, ${2:powerID}, ${3:level})$0",
		},
		{
			"trigger": "C_AzeriteEmpoweredItem.GetSpecsForPower\t(powerID)",
			"contents": "C_AzeriteEmpoweredItem.GetSpecsForPower(${1:powerID})$0",
		},
		{
			"trigger": "C_AzeriteEmpoweredItem.HasAnyUnselectedPowers\t(azeriteEmpoweredItemLocation)",
			"contents": "C_AzeriteEmpoweredItem.HasAnyUnselectedPowers(${1:azeriteEmpoweredItemLocation})$0",
		},
		{
			"trigger": "C_AzeriteEmpoweredItem.HasBeenViewed\t(azeriteEmpoweredItemLocation)",
			"contents": "C_AzeriteEmpoweredItem.HasBeenViewed(${1:azeriteEmpoweredItemLocation})$0",
		},
		{
			"trigger": "C_AzeriteEmpoweredItem.IsAzeriteEmpoweredItem\t(itemLocation)",
			"contents": "C_AzeriteEmpoweredItem.IsAzeriteEmpoweredItem(${1:itemLocation})$0",
		},
		{
			"trigger": "C_AzeriteEmpoweredItem.IsAzeriteEmpoweredItemByID\t(\"itemInfo\")",
			"contents": "C_AzeriteEmpoweredItem.IsAzeriteEmpoweredItemByID(\"${1:itemInfo}\")$0",
		},
		{
			"trigger": "C_AzeriteEmpoweredItem.IsAzeritePreviewSourceDisplayable\t(\"itemInfo\", [classID])",
			"contents": "C_AzeriteEmpoweredItem.IsAzeritePreviewSourceDisplayable(\"${1:itemInfo}\", [${2:classID}])$0",
		},
		{
			"trigger": "C_AzeriteEmpoweredItem.IsHeartOfAzerothEquipped\t()",
			"contents": "C_AzeriteEmpoweredItem.IsHeartOfAzerothEquipped()$0",
		},
		{
			"trigger": "C_AzeriteEmpoweredItem.IsPowerAvailableForSpec\t(powerID, specID)",
			"contents": "C_AzeriteEmpoweredItem.IsPowerAvailableForSpec(${1:powerID}, ${2:specID})$0",
		},
		{
			"trigger": "C_AzeriteEmpoweredItem.IsPowerSelected\t(azeriteEmpoweredItemLocation, powerID)",
			"contents": "C_AzeriteEmpoweredItem.IsPowerSelected(${1:azeriteEmpoweredItemLocation}, ${2:powerID})$0",
		},
		{
			"trigger": "C_AzeriteEmpoweredItem.SelectPower\t(azeriteEmpoweredItemLocation, powerID)",
			"contents": "C_AzeriteEmpoweredItem.SelectPower(${1:azeriteEmpoweredItemLocation}, ${2:powerID})$0",
		},
		{
			"trigger": "C_AzeriteEmpoweredItem.SetHasBeenViewed\t(azeriteEmpoweredItemLocation)",
			"contents": "C_AzeriteEmpoweredItem.SetHasBeenViewed(${1:azeriteEmpoweredItemLocation})$0",
		},
		{
			"trigger": "C_AzeriteItem.FindActiveAzeriteItem\t()",
			"contents": "C_AzeriteItem.FindActiveAzeriteItem()$0",
		},
		{
			"trigger": "C_AzeriteItem.GetAzeriteItemXPInfo\t(azeriteItemLocation)",
			"contents": "C_AzeriteItem.GetAzeriteItemXPInfo(${1:azeriteItemLocation})$0",
		},
		{
			"trigger": "C_AzeriteItem.GetPowerLevel\t(azeriteItemLocation)",
			"contents": "C_AzeriteItem.GetPowerLevel(${1:azeriteItemLocation})$0",
		},
		{
			"trigger": "C_AzeriteItem.HasActiveAzeriteItem\t()",
			"contents": "C_AzeriteItem.HasActiveAzeriteItem()$0",
		},
		{
			"trigger": "C_AzeriteItem.IsAzeriteItem\t(itemLocation)",
			"contents": "C_AzeriteItem.IsAzeriteItem(${1:itemLocation})$0",
		},
		{
			"trigger": "C_AzeriteItem.IsAzeriteItemByID\t(\"itemInfo\")",
			"contents": "C_AzeriteItem.IsAzeriteItemByID(\"${1:itemInfo}\")$0",
		},
		{
			"trigger": "C_Calendar.AddEvent\t()",
			"contents": "C_Calendar.AddEvent()$0",
		},
		{
			"trigger": "C_Calendar.AreNamesReady\t()",
			"contents": "C_Calendar.AreNamesReady()$0",
		},
		{
			"trigger": "C_Calendar.CanAddEvent\t()",
			"contents": "C_Calendar.CanAddEvent()$0",
		},
		{
			"trigger": "C_Calendar.CanSendInvite\t()",
			"contents": "C_Calendar.CanSendInvite()$0",
		},
		{
			"trigger": "C_Calendar.CloseEvent\t()",
			"contents": "C_Calendar.CloseEvent()$0",
		},
		{
			"trigger": "C_Calendar.ContextMenuEventCanComplain\t(offsetMonths, monthDay, eventIndex)",
			"contents": "C_Calendar.ContextMenuEventCanComplain(${1:offsetMonths}, ${2:monthDay}, ${3:eventIndex})$0",
		},
		{
			"trigger": "C_Calendar.ContextMenuEventCanEdit\t(offsetMonths, monthDay, eventIndex)",
			"contents": "C_Calendar.ContextMenuEventCanEdit(${1:offsetMonths}, ${2:monthDay}, ${3:eventIndex})$0",
		},
		{
			"trigger": "C_Calendar.ContextMenuEventCanRemove\t(offsetMonths, monthDay, eventIndex)",
			"contents": "C_Calendar.ContextMenuEventCanRemove(${1:offsetMonths}, ${2:monthDay}, ${3:eventIndex})$0",
		},
		{
			"trigger": "C_Calendar.ContextMenuEventClipboard\t()",
			"contents": "C_Calendar.ContextMenuEventClipboard()$0",
		},
		{
			"trigger": "C_Calendar.ContextMenuEventComplain\t()",
			"contents": "C_Calendar.ContextMenuEventComplain()$0",
		},
		{
			"trigger": "C_Calendar.ContextMenuEventCopy\t()",
			"contents": "C_Calendar.ContextMenuEventCopy()$0",
		},
		{
			"trigger": "C_Calendar.ContextMenuEventGetCalendarType\t()",
			"contents": "C_Calendar.ContextMenuEventGetCalendarType()$0",
		},
		{
			"trigger": "C_Calendar.ContextMenuEventPaste\t(offsetMonths, monthDay)",
			"contents": "C_Calendar.ContextMenuEventPaste(${1:offsetMonths}, ${2:monthDay})$0",
		},
		{
			"trigger": "C_Calendar.ContextMenuEventRemove\t()",
			"contents": "C_Calendar.ContextMenuEventRemove()$0",
		},
		{
			"trigger": "C_Calendar.ContextMenuEventSignUp\t()",
			"contents": "C_Calendar.ContextMenuEventSignUp()$0",
		},
		{
			"trigger": "C_Calendar.ContextMenuGetEventIndex\t()",
			"contents": "C_Calendar.ContextMenuGetEventIndex()$0",
		},
		{
			"trigger": "C_Calendar.ContextMenuInviteAvailable\t()",
			"contents": "C_Calendar.ContextMenuInviteAvailable()$0",
		},
		{
			"trigger": "C_Calendar.ContextMenuInviteDecline\t()",
			"contents": "C_Calendar.ContextMenuInviteDecline()$0",
		},
		{
			"trigger": "C_Calendar.ContextMenuInviteRemove\t()",
			"contents": "C_Calendar.ContextMenuInviteRemove()$0",
		},
		{
			"trigger": "C_Calendar.ContextMenuInviteTentative\t()",
			"contents": "C_Calendar.ContextMenuInviteTentative()$0",
		},
		{
			"trigger": "C_Calendar.ContextMenuSelectEvent\t(offsetMonths, monthDay, eventIndex)",
			"contents": "C_Calendar.ContextMenuSelectEvent(${1:offsetMonths}, ${2:monthDay}, ${3:eventIndex})$0",
		},
		{
			"trigger": "C_Calendar.CreateCommunitySignUpEvent\t()",
			"contents": "C_Calendar.CreateCommunitySignUpEvent()$0",
		},
		{
			"trigger": "C_Calendar.CreateGuildAnnouncementEvent\t()",
			"contents": "C_Calendar.CreateGuildAnnouncementEvent()$0",
		},
		{
			"trigger": "C_Calendar.CreateGuildSignUpEvent\t()",
			"contents": "C_Calendar.CreateGuildSignUpEvent()$0",
		},
		{
			"trigger": "C_Calendar.CreatePlayerEvent\t()",
			"contents": "C_Calendar.CreatePlayerEvent()$0",
		},
		{
			"trigger": "C_Calendar.EventAvailable\t()",
			"contents": "C_Calendar.EventAvailable()$0",
		},
		{
			"trigger": "C_Calendar.EventCanEdit\t()",
			"contents": "C_Calendar.EventCanEdit()$0",
		},
		{
			"trigger": "C_Calendar.EventClearAutoApprove\t()",
			"contents": "C_Calendar.EventClearAutoApprove()$0",
		},
		{
			"trigger": "C_Calendar.EventClearLocked\t()",
			"contents": "C_Calendar.EventClearLocked()$0",
		},
		{
			"trigger": "C_Calendar.EventClearModerator\t(inviteIndex)",
			"contents": "C_Calendar.EventClearModerator(${1:inviteIndex})$0",
		},
		{
			"trigger": "C_Calendar.EventDecline\t()",
			"contents": "C_Calendar.EventDecline()$0",
		},
		{
			"trigger": "C_Calendar.EventGetCalendarType\t()",
			"contents": "C_Calendar.EventGetCalendarType()$0",
		},
		{
			"trigger": "C_Calendar.EventGetClubId\t()",
			"contents": "C_Calendar.EventGetClubId()$0",
		},
		{
			"trigger": "C_Calendar.EventGetInvite\t(eventIndex)",
			"contents": "C_Calendar.EventGetInvite(${1:eventIndex})$0",
		},
		{
			"trigger": "C_Calendar.EventGetInviteResponseTime\t(eventIndex)",
			"contents": "C_Calendar.EventGetInviteResponseTime(${1:eventIndex})$0",
		},
		{
			"trigger": "C_Calendar.EventGetInviteSortCriterion\t()",
			"contents": "C_Calendar.EventGetInviteSortCriterion()$0",
		},
		{
			"trigger": "C_Calendar.EventGetSelectedInvite\t()",
			"contents": "C_Calendar.EventGetSelectedInvite()$0",
		},
		{
			"trigger": "C_Calendar.EventGetStatusOptions\t(eventIndex)",
			"contents": "C_Calendar.EventGetStatusOptions(${1:eventIndex})$0",
		},
		{
			"trigger": "C_Calendar.EventGetTextures\t(eventType)",
			"contents": "C_Calendar.EventGetTextures(${1:eventType})$0",
		},
		{
			"trigger": "C_Calendar.EventGetTypes\t()",
			"contents": "C_Calendar.EventGetTypes()$0",
		},
		{
			"trigger": "C_Calendar.EventGetTypesDisplayOrdered\t()",
			"contents": "C_Calendar.EventGetTypesDisplayOrdered()$0",
		},
		{
			"trigger": "C_Calendar.EventHasPendingInvite\t()",
			"contents": "C_Calendar.EventHasPendingInvite()$0",
		},
		{
			"trigger": "C_Calendar.EventHaveSettingsChanged\t()",
			"contents": "C_Calendar.EventHaveSettingsChanged()$0",
		},
		{
			"trigger": "C_Calendar.EventInvite\t(\"name\")",
			"contents": "C_Calendar.EventInvite(\"${1:name}\")$0",
		},
		{
			"trigger": "C_Calendar.EventRemoveInvite\t(inviteIndex)",
			"contents": "C_Calendar.EventRemoveInvite(${1:inviteIndex})$0",
		},
		{
			"trigger": "C_Calendar.EventSelectInvite\t(inviteIndex)",
			"contents": "C_Calendar.EventSelectInvite(${1:inviteIndex})$0",
		},
		{
			"trigger": "C_Calendar.EventSetAutoApprove\t()",
			"contents": "C_Calendar.EventSetAutoApprove()$0",
		},
		{
			"trigger": "C_Calendar.EventSetClubId\t([\"clubId\"])",
			"contents": "C_Calendar.EventSetClubId([\"${1:clubId}\"])$0",
		},
		{
			"trigger": "C_Calendar.EventSetDate\t(month, monthDay, year)",
			"contents": "C_Calendar.EventSetDate(${1:month}, ${2:monthDay}, ${3:year})$0",
		},
		{
			"trigger": "C_Calendar.EventSetDescription\t(\"description\")",
			"contents": "C_Calendar.EventSetDescription(\"${1:description}\")$0",
		},
		{
			"trigger": "C_Calendar.EventSetInviteStatus\t(eventIndex, status)",
			"contents": "C_Calendar.EventSetInviteStatus(${1:eventIndex}, ${2:status})$0",
		},
		{
			"trigger": "C_Calendar.EventSetLocked\t()",
			"contents": "C_Calendar.EventSetLocked()$0",
		},
		{
			"trigger": "C_Calendar.EventSetModerator\t(inviteIndex)",
			"contents": "C_Calendar.EventSetModerator(${1:inviteIndex})$0",
		},
		{
			"trigger": "C_Calendar.EventSetTextureID\t(textureIndex)",
			"contents": "C_Calendar.EventSetTextureID(${1:textureIndex})$0",
		},
		{
			"trigger": "C_Calendar.EventSetTime\t(hour, minute)",
			"contents": "C_Calendar.EventSetTime(${1:hour}, ${2:minute})$0",
		},
		{
			"trigger": "C_Calendar.EventSetTitle\t(\"title\")",
			"contents": "C_Calendar.EventSetTitle(\"${1:title}\")$0",
		},
		{
			"trigger": "C_Calendar.EventSetType\t(typeIndex)",
			"contents": "C_Calendar.EventSetType(${1:typeIndex})$0",
		},
		{
			"trigger": "C_Calendar.EventSignUp\t()",
			"contents": "C_Calendar.EventSignUp()$0",
		},
		{
			"trigger": "C_Calendar.EventSortInvites\t(\"criterion\", reverse)",
			"contents": "C_Calendar.EventSortInvites(\"${1:criterion}\", ${2:reverse})$0",
		},
		{
			"trigger": "C_Calendar.EventTentative\t()",
			"contents": "C_Calendar.EventTentative()$0",
		},
		{
			"trigger": "C_Calendar.GetClubCalendarEvents\t(\"clubId\", startTime, endTime)",
			"contents": "C_Calendar.GetClubCalendarEvents(\"${1:clubId}\", ${2:startTime}, ${3:endTime})$0",
		},
		{
			"trigger": "C_Calendar.GetDayEvent\t(monthOffset, monthDay, index)",
			"contents": "C_Calendar.GetDayEvent(${1:monthOffset}, ${2:monthDay}, ${3:index})$0",
		},
		{
			"trigger": "C_Calendar.GetDefaultGuildFilter\t()",
			"contents": "C_Calendar.GetDefaultGuildFilter()$0",
		},
		{
			"trigger": "C_Calendar.GetEventIndex\t()",
			"contents": "C_Calendar.GetEventIndex()$0",
		},
		{
			"trigger": "C_Calendar.GetEventIndexInfo\t(\"eventID\", [monthOffset, [monthDay]])",
			"contents": "C_Calendar.GetEventIndexInfo(\"${1:eventID}\", [${2:monthOffset}, [${3:monthDay}]])$0",
		},
		{
			"trigger": "C_Calendar.GetEventInfo\t()",
			"contents": "C_Calendar.GetEventInfo()$0",
		},
		{
			"trigger": "C_Calendar.GetFirstPendingInvite\t(offsetMonths, monthDay)",
			"contents": "C_Calendar.GetFirstPendingInvite(${1:offsetMonths}, ${2:monthDay})$0",
		},
		{
			"trigger": "C_Calendar.GetGuildEventInfo\t(index)",
			"contents": "C_Calendar.GetGuildEventInfo(${1:index})$0",
		},
		{
			"trigger": "C_Calendar.GetGuildEventSelectionInfo\t(index)",
			"contents": "C_Calendar.GetGuildEventSelectionInfo(${1:index})$0",
		},
		{
			"trigger": "C_Calendar.GetHolidayInfo\t(monthOffset, monthDay, index)",
			"contents": "C_Calendar.GetHolidayInfo(${1:monthOffset}, ${2:monthDay}, ${3:index})$0",
		},
		{
			"trigger": "C_Calendar.GetMaxCreateDate\t()",
			"contents": "C_Calendar.GetMaxCreateDate()$0",
		},
		{
			"trigger": "C_Calendar.GetMinDate\t()",
			"contents": "C_Calendar.GetMinDate()$0",
		},
		{
			"trigger": "C_Calendar.GetMonthInfo\t(offsetMonths)",
			"contents": "C_Calendar.GetMonthInfo(${1:offsetMonths})$0",
		},
		{
			"trigger": "C_Calendar.GetNextClubId\t()",
			"contents": "C_Calendar.GetNextClubId()$0",
		},
		{
			"trigger": "C_Calendar.GetNumDayEvents\t(offsetMonths, monthDay)",
			"contents": "C_Calendar.GetNumDayEvents(${1:offsetMonths}, ${2:monthDay})$0",
		},
		{
			"trigger": "C_Calendar.GetNumGuildEvents\t()",
			"contents": "C_Calendar.GetNumGuildEvents()$0",
		},
		{
			"trigger": "C_Calendar.GetNumInvites\t()",
			"contents": "C_Calendar.GetNumInvites()$0",
		},
		{
			"trigger": "C_Calendar.GetNumPendingInvites\t()",
			"contents": "C_Calendar.GetNumPendingInvites()$0",
		},
		{
			"trigger": "C_Calendar.GetRaidInfo\t(offsetMonths, monthDay, eventIndex)",
			"contents": "C_Calendar.GetRaidInfo(${1:offsetMonths}, ${2:monthDay}, ${3:eventIndex})$0",
		},
		{
			"trigger": "C_Calendar.IsActionPending\t()",
			"contents": "C_Calendar.IsActionPending()$0",
		},
		{
			"trigger": "C_Calendar.MassInviteCommunity\t(\"clubId\", minLevel, maxLevel, [maxRankOrder])",
			"contents": "C_Calendar.MassInviteCommunity(\"${1:clubId}\", ${2:minLevel}, ${3:maxLevel}, [${4:maxRankOrder}])$0",
		},
		{
			"trigger": "C_Calendar.MassInviteGuild\t(minLevel, maxLevel, maxRankOrder)",
			"contents": "C_Calendar.MassInviteGuild(${1:minLevel}, ${2:maxLevel}, ${3:maxRankOrder})$0",
		},
		{
			"trigger": "C_Calendar.OpenCalendar\t()",
			"contents": "C_Calendar.OpenCalendar()$0",
		},
		{
			"trigger": "C_Calendar.OpenEvent\t(offsetMonths, monthDay, index)",
			"contents": "C_Calendar.OpenEvent(${1:offsetMonths}, ${2:monthDay}, ${3:index})$0",
		},
		{
			"trigger": "C_Calendar.RemoveEvent\t()",
			"contents": "C_Calendar.RemoveEvent()$0",
		},
		{
			"trigger": "C_Calendar.SetAbsMonth\t(month, year)",
			"contents": "C_Calendar.SetAbsMonth(${1:month}, ${2:year})$0",
		},
		{
			"trigger": "C_Calendar.SetMonth\t(offsetMonths)",
			"contents": "C_Calendar.SetMonth(${1:offsetMonths})$0",
		},
		{
			"trigger": "C_Calendar.SetNextClubId\t([\"clubId\"])",
			"contents": "C_Calendar.SetNextClubId([\"${1:clubId}\"])$0",
		},
		{
			"trigger": "C_Calendar.UpdateEvent\t()",
			"contents": "C_Calendar.UpdateEvent()$0",
		},
		{
			"trigger": "C_CampaignInfo.GetCampaignChapterInfo\t(campaignChapterID)",
			"contents": "C_CampaignInfo.GetCampaignChapterInfo(${1:campaignChapterID})$0",
		},
		{
			"trigger": "C_CampaignInfo.GetCampaignInfo\t(campaignID)",
			"contents": "C_CampaignInfo.GetCampaignInfo(${1:campaignID})$0",
		},
		{
			"trigger": "C_CampaignInfo.GetCurrentCampaignChapterID\t()",
			"contents": "C_CampaignInfo.GetCurrentCampaignChapterID()$0",
		},
		{
			"trigger": "C_CampaignInfo.GetCurrentCampaignID\t()",
			"contents": "C_CampaignInfo.GetCurrentCampaignID()$0",
		},
		{
			"trigger": "C_CampaignInfo.IsCampaignQuest\t(questID)",
			"contents": "C_CampaignInfo.IsCampaignQuest(${1:questID})$0",
		},
		{
			"trigger": "C_ChallengeMode.ClearKeystone\t()",
			"contents": "C_ChallengeMode.ClearKeystone()$0",
		},
		{
			"trigger": "C_ChallengeMode.CloseKeystoneFrame\t()",
			"contents": "C_ChallengeMode.CloseKeystoneFrame()$0",
		},
		{
			"trigger": "C_ChallengeMode.GetActiveChallengeMapID\t()",
			"contents": "C_ChallengeMode.GetActiveChallengeMapID()$0",
		},
		{
			"trigger": "C_ChallengeMode.GetActiveKeystoneInfo\t()",
			"contents": "C_ChallengeMode.GetActiveKeystoneInfo()$0",
		},
		{
			"trigger": "C_ChallengeMode.GetAffixInfo\t(affixID)",
			"contents": "C_ChallengeMode.GetAffixInfo(${1:affixID})$0",
		},
		{
			"trigger": "C_ChallengeMode.GetCompletionInfo\t()",
			"contents": "C_ChallengeMode.GetCompletionInfo()$0",
		},
		{
			"trigger": "C_ChallengeMode.GetDeathCount\t()",
			"contents": "C_ChallengeMode.GetDeathCount()$0",
		},
		{
			"trigger": "C_ChallengeMode.GetGuildLeaders\t()",
			"contents": "C_ChallengeMode.GetGuildLeaders()$0",
		},
		{
			"trigger": "C_ChallengeMode.GetMapTable\t()",
			"contents": "C_ChallengeMode.GetMapTable()$0",
		},
		{
			"trigger": "C_ChallengeMode.GetMapUIInfo\t(mapChallengeModeID)",
			"contents": "C_ChallengeMode.GetMapUIInfo(${1:mapChallengeModeID})$0",
		},
		{
			"trigger": "C_ChallengeMode.GetPowerLevelDamageHealthMod\t(powerLevel)",
			"contents": "C_ChallengeMode.GetPowerLevelDamageHealthMod(${1:powerLevel})$0",
		},
		{
			"trigger": "C_ChallengeMode.GetSlottedKeystoneInfo\t()",
			"contents": "C_ChallengeMode.GetSlottedKeystoneInfo()$0",
		},
		{
			"trigger": "C_ChallengeMode.HasSlottedKeystone\t()",
			"contents": "C_ChallengeMode.HasSlottedKeystone()$0",
		},
		{
			"trigger": "C_ChallengeMode.IsChallengeModeActive\t()",
			"contents": "C_ChallengeMode.IsChallengeModeActive()$0",
		},
		{
			"trigger": "C_ChallengeMode.RemoveKeystone\t()",
			"contents": "C_ChallengeMode.RemoveKeystone()$0",
		},
		{
			"trigger": "C_ChallengeMode.RequestLeaders\t(mapChallengeModeID)",
			"contents": "C_ChallengeMode.RequestLeaders(${1:mapChallengeModeID})$0",
		},
		{
			"trigger": "C_ChallengeMode.Reset\t()",
			"contents": "C_ChallengeMode.Reset()$0",
		},
		{
			"trigger": "C_ChallengeMode.SetKeystoneTooltip\t()",
			"contents": "C_ChallengeMode.SetKeystoneTooltip()$0",
		},
		{
			"trigger": "C_ChallengeMode.SlotKeystone\t()",
			"contents": "C_ChallengeMode.SlotKeystone()$0",
		},
		{
			"trigger": "C_ChallengeMode.StartChallengeMode\t()",
			"contents": "C_ChallengeMode.StartChallengeMode()$0",
		},
		{
			"trigger": "C_ChatBubbles.GetAllChatBubbles\t(includeForbidden)",
			"contents": "C_ChatBubbles.GetAllChatBubbles(${1:includeForbidden})$0",
		},
		{
			"trigger": "C_ChatInfo.GetChannelRosterInfo\t(channelIndex, rosterIndex)",
			"contents": "C_ChatInfo.GetChannelRosterInfo(${1:channelIndex}, ${2:rosterIndex})$0",
		},
		{
			"trigger": "C_ChatInfo.GetNumActiveChannels\t()",
			"contents": "C_ChatInfo.GetNumActiveChannels()$0",
		},
		{
			"trigger": "C_ChatInfo.GetRegisteredAddonMessagePrefixes\t()",
			"contents": "C_ChatInfo.GetRegisteredAddonMessagePrefixes()$0",
		},
		{
			"trigger": "C_ChatInfo.IsAddonMessagePrefixRegistered\t(\"prefix\")",
			"contents": "C_ChatInfo.IsAddonMessagePrefixRegistered(\"${1:prefix}\")$0",
		},
		{
			"trigger": "C_ChatInfo.IsPartyChannelType\t(channelType)",
			"contents": "C_ChatInfo.IsPartyChannelType(${1:channelType})$0",
		},
		{
			"trigger": "C_ChatInfo.IsValidChatLine\t([chatLine])",
			"contents": "C_ChatInfo.IsValidChatLine([${1:chatLine}])$0",
		},
		{
			"trigger": "C_ChatInfo.RegisterAddonMessagePrefix\t(\"prefix\")",
			"contents": "C_ChatInfo.RegisterAddonMessagePrefix(\"${1:prefix}\")$0",
		},
		{
			"trigger": "C_ChatInfo.ReplaceIconAndGroupExpressions\t(\"input\", [noIconReplacement, [noGroupReplacement]])",
			"contents": "C_ChatInfo.ReplaceIconAndGroupExpressions(\"${1:input}\", [${2:noIconReplacement}, [${3:noGroupReplacement}]])$0",
		},
		{
			"trigger": "C_ChatInfo.ResetDefaultZoneChannels\t()",
			"contents": "C_ChatInfo.ResetDefaultZoneChannels()$0",
		},
		{
			"trigger": "C_ChatInfo.SendAddonMessage\t(\"prefix\", \"message\", [\"chatType\", [\"target\"]])",
			"contents": "C_ChatInfo.SendAddonMessage(\"${1:prefix}\", \"${2:message}\", [\"${3:chatType}\", [\"${4:target}\"]])$0",
		},
		{
			"trigger": "C_ChatInfo.SendAddonMessageLogged\t(\"prefix\", \"message\", [\"chatType\", [\"target\"]])",
			"contents": "C_ChatInfo.SendAddonMessageLogged(\"${1:prefix}\", \"${2:message}\", [\"${3:chatType}\", [\"${4:target}\"]])$0",
		},
		{
			"trigger": "C_ChatInfo.SwapChatChannelsByChannelIndex\t(firstChannelIndex, secondChannelIndex)",
			"contents": "C_ChatInfo.SwapChatChannelsByChannelIndex(${1:firstChannelIndex}, ${2:secondChannelIndex})$0",
		},
		{
			"trigger": "C_Club.AcceptInvitation\t(\"clubId\")",
			"contents": "C_Club.AcceptInvitation(\"${1:clubId}\")$0",
		},
		{
			"trigger": "C_Club.AddClubStreamChatChannel\t(\"clubId\", \"streamId\")",
			"contents": "C_Club.AddClubStreamChatChannel(\"${1:clubId}\", \"${2:streamId}\")$0",
		},
		{
			"trigger": "C_Club.AdvanceStreamViewMarker\t(\"clubId\", \"streamId\")",
			"contents": "C_Club.AdvanceStreamViewMarker(\"${1:clubId}\", \"${2:streamId}\")$0",
		},
		{
			"trigger": "C_Club.AssignMemberRole\t(\"clubId\", memberId, roleId)",
			"contents": "C_Club.AssignMemberRole(\"${1:clubId}\", ${2:memberId}, ${3:roleId})$0",
		},
		{
			"trigger": "C_Club.CanResolvePlayerLocationFromClubMessageData\t(\"clubId\", \"streamId\", epoch, position)",
			"contents": "C_Club.CanResolvePlayerLocationFromClubMessageData(\"${1:clubId}\", \"${2:streamId}\", ${3:epoch}, ${4:position})$0",
		},
		{
			"trigger": "C_Club.ClearAutoAdvanceStreamViewMarker\t()",
			"contents": "C_Club.ClearAutoAdvanceStreamViewMarker()$0",
		},
		{
			"trigger": "C_Club.ClearClubPresenceSubscription\t()",
			"contents": "C_Club.ClearClubPresenceSubscription()$0",
		},
		{
			"trigger": "C_Club.CompareBattleNetDisplayName\t(\"clubId\", lhsMemberId, rhsMemberId)",
			"contents": "C_Club.CompareBattleNetDisplayName(\"${1:clubId}\", ${2:lhsMemberId}, ${3:rhsMemberId})$0",
		},
		{
			"trigger": "C_Club.CreateClub\t(\"name\", [\"shortName\", \"description\", clubType, avatarId])",
			"contents": "C_Club.CreateClub(\"${1:name}\", [\"${2:shortName}\", \"${3:description}\", ${4:clubType}, ${5:avatarId}])$0",
		},
		{
			"trigger": "C_Club.CreateStream\t(\"clubId\", \"name\", \"subject\", leadersAndModeratorsOnly)",
			"contents": "C_Club.CreateStream(\"${1:clubId}\", \"${2:name}\", \"${3:subject}\", ${4:leadersAndModeratorsOnly})$0",
		},
		{
			"trigger": "C_Club.CreateTicket\t(\"clubId\", [allowedRedeemCount, [duration, [\"defaultStreamId\"]]])",
			"contents": "C_Club.CreateTicket(\"${1:clubId}\", [${2:allowedRedeemCount}, [${3:duration}, [\"${4:defaultStreamId}\"]]])$0",
		},
		{
			"trigger": "C_Club.DeclineInvitation\t(\"clubId\")",
			"contents": "C_Club.DeclineInvitation(\"${1:clubId}\")$0",
		},
		{
			"trigger": "C_Club.DestroyClub\t(\"clubId\")",
			"contents": "C_Club.DestroyClub(\"${1:clubId}\")$0",
		},
		{
			"trigger": "C_Club.DestroyMessage\t(\"clubId\", \"streamId\", messageId)",
			"contents": "C_Club.DestroyMessage(\"${1:clubId}\", \"${2:streamId}\", ${3:messageId})$0",
		},
		{
			"trigger": "C_Club.DestroyStream\t(\"clubId\", \"streamId\")",
			"contents": "C_Club.DestroyStream(\"${1:clubId}\", \"${2:streamId}\")$0",
		},
		{
			"trigger": "C_Club.DestroyTicket\t(\"clubId\", \"ticketId\")",
			"contents": "C_Club.DestroyTicket(\"${1:clubId}\", \"${2:ticketId}\")$0",
		},
		{
			"trigger": "C_Club.EditClub\t(\"clubId\", [\"name\", [\"shortName\", [\"description\", [avatarId, [\"broadcast\"]]]]])",
			"contents": "C_Club.EditClub(\"${1:clubId}\", [\"${2:name}\", [\"${3:shortName}\", [\"${4:description}\", [${5:avatarId}, [\"${6:broadcast}\"]]]]])$0",
		},
		{
			"trigger": "C_Club.EditMessage\t(\"clubId\", \"streamId\", messageId, \"message\")",
			"contents": "C_Club.EditMessage(\"${1:clubId}\", \"${2:streamId}\", ${3:messageId}, \"${4:message}\")$0",
		},
		{
			"trigger": "C_Club.EditStream\t(\"clubId\", \"streamId\", [\"name\", [\"subject\", [leadersAndModeratorsOnly]]])",
			"contents": "C_Club.EditStream(\"${1:clubId}\", \"${2:streamId}\", [\"${3:name}\", [\"${4:subject}\", [${5:leadersAndModeratorsOnly}]]])$0",
		},
		{
			"trigger": "C_Club.Flush\t()",
			"contents": "C_Club.Flush()$0",
		},
		{
			"trigger": "C_Club.FocusStream\t(\"clubId\", \"streamId\")",
			"contents": "C_Club.FocusStream(\"${1:clubId}\", \"${2:streamId}\")$0",
		},
		{
			"trigger": "C_Club.GetAssignableRoles\t(\"clubId\", memberId)",
			"contents": "C_Club.GetAssignableRoles(\"${1:clubId}\", ${2:memberId})$0",
		},
		{
			"trigger": "C_Club.GetAvatarIdList\t(clubType)",
			"contents": "C_Club.GetAvatarIdList(${1:clubType})$0",
		},
		{
			"trigger": "C_Club.GetClubInfo\t(\"clubId\")",
			"contents": "C_Club.GetClubInfo(\"${1:clubId}\")$0",
		},
		{
			"trigger": "C_Club.GetClubLimits\t(clubType)",
			"contents": "C_Club.GetClubLimits(${1:clubType})$0",
		},
		{
			"trigger": "C_Club.GetClubMembers\t(\"clubId\", [\"streamId\"])",
			"contents": "C_Club.GetClubMembers(\"${1:clubId}\", [\"${2:streamId}\"])$0",
		},
		{
			"trigger": "C_Club.GetClubPrivileges\t(\"clubId\")",
			"contents": "C_Club.GetClubPrivileges(\"${1:clubId}\")$0",
		},
		{
			"trigger": "C_Club.GetClubStreamNotificationSettings\t(\"clubId\")",
			"contents": "C_Club.GetClubStreamNotificationSettings(\"${1:clubId}\")$0",
		},
		{
			"trigger": "C_Club.GetCommunityNameResultText\t(result)",
			"contents": "C_Club.GetCommunityNameResultText(${1:result})$0",
		},
		{
			"trigger": "C_Club.GetGuildClubId\t()",
			"contents": "C_Club.GetGuildClubId()$0",
		},
		{
			"trigger": "C_Club.GetInfoFromLastCommunityChatLine\t()",
			"contents": "C_Club.GetInfoFromLastCommunityChatLine()$0",
		},
		{
			"trigger": "C_Club.GetInvitationCandidates\t([\"filter\", [maxResults, [cursorPosition, [allowFullMatch, \"clubId\"]]]])",
			"contents": "C_Club.GetInvitationCandidates([\"${1:filter}\", [${2:maxResults}, [${3:cursorPosition}, [${4:allowFullMatch}, \"${5:clubId}\"]]]])$0",
		},
		{
			"trigger": "C_Club.GetInvitationInfo\t(\"clubId\")",
			"contents": "C_Club.GetInvitationInfo(\"${1:clubId}\")$0",
		},
		{
			"trigger": "C_Club.GetInvitationsForClub\t(\"clubId\")",
			"contents": "C_Club.GetInvitationsForClub(\"${1:clubId}\")$0",
		},
		{
			"trigger": "C_Club.GetInvitationsForSelf\t()",
			"contents": "C_Club.GetInvitationsForSelf()$0",
		},
		{
			"trigger": "C_Club.GetLastTicketResponse\t(\"ticket\")",
			"contents": "C_Club.GetLastTicketResponse(\"${1:ticket}\")$0",
		},
		{
			"trigger": "C_Club.GetMemberInfo\t(\"clubId\", memberId)",
			"contents": "C_Club.GetMemberInfo(\"${1:clubId}\", ${2:memberId})$0",
		},
		{
			"trigger": "C_Club.GetMemberInfoForSelf\t(\"clubId\")",
			"contents": "C_Club.GetMemberInfoForSelf(\"${1:clubId}\")$0",
		},
		{
			"trigger": "C_Club.GetMessageInfo\t(\"clubId\", \"streamId\", messageId)",
			"contents": "C_Club.GetMessageInfo(\"${1:clubId}\", \"${2:streamId}\", ${3:messageId})$0",
		},
		{
			"trigger": "C_Club.GetMessageRanges\t(\"clubId\", \"streamId\")",
			"contents": "C_Club.GetMessageRanges(\"${1:clubId}\", \"${2:streamId}\")$0",
		},
		{
			"trigger": "C_Club.GetMessagesBefore\t(\"clubId\", \"streamId\", newest, count)",
			"contents": "C_Club.GetMessagesBefore(\"${1:clubId}\", \"${2:streamId}\", ${3:newest}, ${4:count})$0",
		},
		{
			"trigger": "C_Club.GetMessagesInRange\t(\"clubId\", \"streamId\", oldest, newest)",
			"contents": "C_Club.GetMessagesInRange(\"${1:clubId}\", \"${2:streamId}\", ${3:oldest}, ${4:newest})$0",
		},
		{
			"trigger": "C_Club.GetStreamInfo\t(\"clubId\", \"streamId\")",
			"contents": "C_Club.GetStreamInfo(\"${1:clubId}\", \"${2:streamId}\")$0",
		},
		{
			"trigger": "C_Club.GetStreams\t(\"clubId\")",
			"contents": "C_Club.GetStreams(\"${1:clubId}\")$0",
		},
		{
			"trigger": "C_Club.GetStreamViewMarker\t(\"clubId\", \"streamId\")",
			"contents": "C_Club.GetStreamViewMarker(\"${1:clubId}\", \"${2:streamId}\")$0",
		},
		{
			"trigger": "C_Club.GetSubscribedClubs\t()",
			"contents": "C_Club.GetSubscribedClubs()$0",
		},
		{
			"trigger": "C_Club.GetTickets\t(\"clubId\")",
			"contents": "C_Club.GetTickets(\"${1:clubId}\")$0",
		},
		{
			"trigger": "C_Club.IsAccountMuted\t(\"clubId\")",
			"contents": "C_Club.IsAccountMuted(\"${1:clubId}\")$0",
		},
		{
			"trigger": "C_Club.IsBeginningOfStream\t(\"clubId\", \"streamId\", messageId)",
			"contents": "C_Club.IsBeginningOfStream(\"${1:clubId}\", \"${2:streamId}\", ${3:messageId})$0",
		},
		{
			"trigger": "C_Club.IsEnabled\t()",
			"contents": "C_Club.IsEnabled()$0",
		},
		{
			"trigger": "C_Club.IsRestricted\t()",
			"contents": "C_Club.IsRestricted()$0",
		},
		{
			"trigger": "C_Club.IsSubscribedToStream\t(\"clubId\", \"streamId\")",
			"contents": "C_Club.IsSubscribedToStream(\"${1:clubId}\", \"${2:streamId}\")$0",
		},
		{
			"trigger": "C_Club.KickMember\t(\"clubId\", memberId)",
			"contents": "C_Club.KickMember(\"${1:clubId}\", ${2:memberId})$0",
		},
		{
			"trigger": "C_Club.LeaveClub\t(\"clubId\")",
			"contents": "C_Club.LeaveClub(\"${1:clubId}\")$0",
		},
		{
			"trigger": "C_Club.RedeemTicket\t(\"ticketId\")",
			"contents": "C_Club.RedeemTicket(\"${1:ticketId}\")$0",
		},
		{
			"trigger": "C_Club.RequestInvitationsForClub\t(\"clubId\")",
			"contents": "C_Club.RequestInvitationsForClub(\"${1:clubId}\")$0",
		},
		{
			"trigger": "C_Club.RequestMoreMessagesBefore\t(\"clubId\", \"streamId\", [messageId, [count]])",
			"contents": "C_Club.RequestMoreMessagesBefore(\"${1:clubId}\", \"${2:streamId}\", [${3:messageId}, [${4:count}]])$0",
		},
		{
			"trigger": "C_Club.RequestTicket\t(\"ticketId\")",
			"contents": "C_Club.RequestTicket(\"${1:ticketId}\")$0",
		},
		{
			"trigger": "C_Club.RequestTickets\t(\"clubId\")",
			"contents": "C_Club.RequestTickets(\"${1:clubId}\")$0",
		},
		{
			"trigger": "C_Club.RevokeInvitation\t(\"clubId\", memberId)",
			"contents": "C_Club.RevokeInvitation(\"${1:clubId}\", ${2:memberId})$0",
		},
		{
			"trigger": "C_Club.SendBattleTagFriendRequest\t(\"guildClubId\", memberId)",
			"contents": "C_Club.SendBattleTagFriendRequest(\"${1:guildClubId}\", ${2:memberId})$0",
		},
		{
			"trigger": "C_Club.SendCharacterInvitation\t(\"clubId\", \"character\")",
			"contents": "C_Club.SendCharacterInvitation(\"${1:clubId}\", \"${2:character}\")$0",
		},
		{
			"trigger": "C_Club.SendInvitation\t(\"clubId\", memberId)",
			"contents": "C_Club.SendInvitation(\"${1:clubId}\", ${2:memberId})$0",
		},
		{
			"trigger": "C_Club.SendMessage\t(\"clubId\", \"streamId\", \"message\")",
			"contents": "C_Club.SendMessage(\"${1:clubId}\", \"${2:streamId}\", \"${3:message}\")$0",
		},
		{
			"trigger": "C_Club.SetAutoAdvanceStreamViewMarker\t(\"clubId\", \"streamId\")",
			"contents": "C_Club.SetAutoAdvanceStreamViewMarker(\"${1:clubId}\", \"${2:streamId}\")$0",
		},
		{
			"trigger": "C_Club.SetAvatarTexture\t(texture, avatarId, clubType)",
			"contents": "C_Club.SetAvatarTexture(${1:texture}, ${2:avatarId}, ${3:clubType})$0",
		},
		{
			"trigger": "C_Club.SetClubMemberNote\t(\"clubId\", memberId, \"note\")",
			"contents": "C_Club.SetClubMemberNote(\"${1:clubId}\", ${2:memberId}, \"${3:note}\")$0",
		},
		{
			"trigger": "C_Club.SetClubPresenceSubscription\t(\"clubId\")",
			"contents": "C_Club.SetClubPresenceSubscription(\"${1:clubId}\")$0",
		},
		{
			"trigger": "C_Club.SetClubStreamNotificationSettings\t(\"clubId\", settings)",
			"contents": "C_Club.SetClubStreamNotificationSettings(\"${1:clubId}\", ${2:settings})$0",
		},
		{
			"trigger": "C_Club.SetFavorite\t(\"clubId\", isFavorite)",
			"contents": "C_Club.SetFavorite(\"${1:clubId}\", ${2:isFavorite})$0",
		},
		{
			"trigger": "C_Club.SetSocialQueueingEnabled\t(\"clubId\", enabled)",
			"contents": "C_Club.SetSocialQueueingEnabled(\"${1:clubId}\", ${2:enabled})$0",
		},
		{
			"trigger": "C_Club.ShouldAllowClubType\t(clubType)",
			"contents": "C_Club.ShouldAllowClubType(${1:clubType})$0",
		},
		{
			"trigger": "C_Club.UnfocusStream\t(\"clubId\", \"streamId\")",
			"contents": "C_Club.UnfocusStream(\"${1:clubId}\", \"${2:streamId}\")$0",
		},
		{
			"trigger": "C_Club.ValidateText\t(clubType, \"text\", clubFieldType)",
			"contents": "C_Club.ValidateText(${1:clubType}, \"${2:text}\", ${3:clubFieldType})$0",
		},
		{
			"trigger": "C_Commentator.AddPlayerOverrideName\t(\"playerName\", \"overrideName\")",
			"contents": "C_Commentator.AddPlayerOverrideName(\"${1:playerName}\", \"${2:overrideName}\")$0",
		},
		{
			"trigger": "C_Commentator.AddTrackedDefensiveAuras\t(spellIDs)",
			"contents": "C_Commentator.AddTrackedDefensiveAuras(${1:spellIDs})$0",
		},
		{
			"trigger": "C_Commentator.AddTrackedOffensiveAuras\t(spellIDs)",
			"contents": "C_Commentator.AddTrackedOffensiveAuras(${1:spellIDs})$0",
		},
		{
			"trigger": "C_Commentator.AreTeamsSwapped\t()",
			"contents": "C_Commentator.AreTeamsSwapped()$0",
		},
		{
			"trigger": "C_Commentator.CanUseCommentatorCheats\t()",
			"contents": "C_Commentator.CanUseCommentatorCheats()$0",
		},
		{
			"trigger": "C_Commentator.ClearCameraTarget\t()",
			"contents": "C_Commentator.ClearCameraTarget()$0",
		},
		{
			"trigger": "C_Commentator.ClearFollowTarget\t()",
			"contents": "C_Commentator.ClearFollowTarget()$0",
		},
		{
			"trigger": "C_Commentator.ClearLookAtTarget\t([lookAtIndex])",
			"contents": "C_Commentator.ClearLookAtTarget([${1:lookAtIndex}])$0",
		},
		{
			"trigger": "C_Commentator.EnterInstance\t()",
			"contents": "C_Commentator.EnterInstance()$0",
		},
		{
			"trigger": "C_Commentator.ExitInstance\t()",
			"contents": "C_Commentator.ExitInstance()$0",
		},
		{
			"trigger": "C_Commentator.FollowPlayer\t(factionIndex, playerIndex, [forceInstantTransition])",
			"contents": "C_Commentator.FollowPlayer(${1:factionIndex}, ${2:playerIndex}, [${3:forceInstantTransition}])$0",
		},
		{
			"trigger": "C_Commentator.FollowUnit\t(\"token\")",
			"contents": "C_Commentator.FollowUnit(\"${1:token}\")$0",
		},
		{
			"trigger": "C_Commentator.ForceFollowTransition\t()",
			"contents": "C_Commentator.ForceFollowTransition()$0",
		},
		{
			"trigger": "C_Commentator.GetAdditionalCameraWeight\t()",
			"contents": "C_Commentator.GetAdditionalCameraWeight()$0",
		},
		{
			"trigger": "C_Commentator.GetAdditionalCameraWeightByToken\t(\"token\")",
			"contents": "C_Commentator.GetAdditionalCameraWeightByToken(\"${1:token}\")$0",
		},
		{
			"trigger": "C_Commentator.GetAllPlayerOverrideNames\t()",
			"contents": "C_Commentator.GetAllPlayerOverrideNames()$0",
		},
		{
			"trigger": "C_Commentator.GetCamera\t()",
			"contents": "C_Commentator.GetCamera()$0",
		},
		{
			"trigger": "C_Commentator.GetCameraCollision\t()",
			"contents": "C_Commentator.GetCameraCollision()$0",
		},
		{
			"trigger": "C_Commentator.GetCameraPosition\t()",
			"contents": "C_Commentator.GetCameraPosition()$0",
		},
		{
			"trigger": "C_Commentator.GetCurrentMapID\t()",
			"contents": "C_Commentator.GetCurrentMapID()$0",
		},
		{
			"trigger": "C_Commentator.GetDampeningPercent\t()",
			"contents": "C_Commentator.GetDampeningPercent()$0",
		},
		{
			"trigger": "C_Commentator.GetDistanceBeforeForcedHorizontalConvergence\t()",
			"contents": "C_Commentator.GetDistanceBeforeForcedHorizontalConvergence()$0",
		},
		{
			"trigger": "C_Commentator.GetDurationToForceHorizontalConvergence\t()",
			"contents": "C_Commentator.GetDurationToForceHorizontalConvergence()$0",
		},
		{
			"trigger": "C_Commentator.GetExcludeDistance\t()",
			"contents": "C_Commentator.GetExcludeDistance()$0",
		},
		{
			"trigger": "C_Commentator.GetHardlockWeight\t()",
			"contents": "C_Commentator.GetHardlockWeight()$0",
		},
		{
			"trigger": "C_Commentator.GetHorizontalAngleThresholdToSmooth\t()",
			"contents": "C_Commentator.GetHorizontalAngleThresholdToSmooth()$0",
		},
		{
			"trigger": "C_Commentator.GetInstanceInfo\t(mapIndex, instanceIndex)",
			"contents": "C_Commentator.GetInstanceInfo(${1:mapIndex}, ${2:instanceIndex})$0",
		},
		{
			"trigger": "C_Commentator.GetLookAtLerpAmount\t()",
			"contents": "C_Commentator.GetLookAtLerpAmount()$0",
		},
		{
			"trigger": "C_Commentator.GetMapInfo\t(mapIndex)",
			"contents": "C_Commentator.GetMapInfo(${1:mapIndex})$0",
		},
		{
			"trigger": "C_Commentator.GetMaxNumPlayersPerTeam\t()",
			"contents": "C_Commentator.GetMaxNumPlayersPerTeam()$0",
		},
		{
			"trigger": "C_Commentator.GetMaxNumTeams\t()",
			"contents": "C_Commentator.GetMaxNumTeams()$0",
		},
		{
			"trigger": "C_Commentator.GetMode\t()",
			"contents": "C_Commentator.GetMode()$0",
		},
		{
			"trigger": "C_Commentator.GetMsToHoldForHorizontalMovement\t()",
			"contents": "C_Commentator.GetMsToHoldForHorizontalMovement()$0",
		},
		{
			"trigger": "C_Commentator.GetMsToHoldForVerticalMovement\t()",
			"contents": "C_Commentator.GetMsToHoldForVerticalMovement()$0",
		},
		{
			"trigger": "C_Commentator.GetMsToSmoothHorizontalChange\t()",
			"contents": "C_Commentator.GetMsToSmoothHorizontalChange()$0",
		},
		{
			"trigger": "C_Commentator.GetMsToSmoothVerticalChange\t()",
			"contents": "C_Commentator.GetMsToSmoothVerticalChange()$0",
		},
		{
			"trigger": "C_Commentator.GetNumMaps\t()",
			"contents": "C_Commentator.GetNumMaps()$0",
		},
		{
			"trigger": "C_Commentator.GetNumPlayers\t(factionIndex)",
			"contents": "C_Commentator.GetNumPlayers(${1:factionIndex})$0",
		},
		{
			"trigger": "C_Commentator.GetPlayerCooldownInfo\t(teamIndex, playerIndex, spellID)",
			"contents": "C_Commentator.GetPlayerCooldownInfo(${1:teamIndex}, ${2:playerIndex}, ${3:spellID})$0",
		},
		{
			"trigger": "C_Commentator.GetPlayerCrowdControlInfo\t(teamIndex, playerIndex)",
			"contents": "C_Commentator.GetPlayerCrowdControlInfo(${1:teamIndex}, ${2:playerIndex})$0",
		},
		{
			"trigger": "C_Commentator.GetPlayerCrowdControlInfoByUnit\t(\"token\")",
			"contents": "C_Commentator.GetPlayerCrowdControlInfoByUnit(\"${1:token}\")$0",
		},
		{
			"trigger": "C_Commentator.GetPlayerFlagInfo\t(teamIndex, playerIndex)",
			"contents": "C_Commentator.GetPlayerFlagInfo(${1:teamIndex}, ${2:playerIndex})$0",
		},
		{
			"trigger": "C_Commentator.GetPlayerInfo\t(teamIndex, playerIndex)",
			"contents": "C_Commentator.GetPlayerInfo(${1:teamIndex}, ${2:playerIndex})$0",
		},
		{
			"trigger": "C_Commentator.GetPlayerOverrideName\t(\"originalName\")",
			"contents": "C_Commentator.GetPlayerOverrideName(\"${1:originalName}\")$0",
		},
		{
			"trigger": "C_Commentator.GetPlayerSpellCharges\t(teamIndex, playerIndex, spellID)",
			"contents": "C_Commentator.GetPlayerSpellCharges(${1:teamIndex}, ${2:playerIndex}, ${3:spellID})$0",
		},
		{
			"trigger": "C_Commentator.GetPositionLerpAmount\t()",
			"contents": "C_Commentator.GetPositionLerpAmount()$0",
		},
		{
			"trigger": "C_Commentator.GetSmoothFollowTransitioning\t()",
			"contents": "C_Commentator.GetSmoothFollowTransitioning()$0",
		},
		{
			"trigger": "C_Commentator.GetSoftlockWeight\t()",
			"contents": "C_Commentator.GetSoftlockWeight()$0",
		},
		{
			"trigger": "C_Commentator.GetSpeedFactor\t()",
			"contents": "C_Commentator.GetSpeedFactor()$0",
		},
		{
			"trigger": "C_Commentator.GetStartLocation\t(mapID)",
			"contents": "C_Commentator.GetStartLocation(${1:mapID})$0",
		},
		{
			"trigger": "C_Commentator.GetTeamHighlightColor\t(teamIndex)",
			"contents": "C_Commentator.GetTeamHighlightColor(${1:teamIndex})$0",
		},
		{
			"trigger": "C_Commentator.GetTimeLeftInMatch\t()",
			"contents": "C_Commentator.GetTimeLeftInMatch()$0",
		},
		{
			"trigger": "C_Commentator.GetTrackedDefensiveCooldowns\t(teamIndex, playerIndex)",
			"contents": "C_Commentator.GetTrackedDefensiveCooldowns(${1:teamIndex}, ${2:playerIndex})$0",
		},
		{
			"trigger": "C_Commentator.GetTrackedOffensiveCooldowns\t(teamIndex, playerIndex)",
			"contents": "C_Commentator.GetTrackedOffensiveCooldowns(${1:teamIndex}, ${2:playerIndex})$0",
		},
		{
			"trigger": "C_Commentator.GetWargameInfo\t(listID)",
			"contents": "C_Commentator.GetWargameInfo(${1:listID})$0",
		},
		{
			"trigger": "C_Commentator.HasTrackedAuras\t(\"token\")",
			"contents": "C_Commentator.HasTrackedAuras(\"${1:token}\")$0",
		},
		{
			"trigger": "C_Commentator.IsSmartCameraLocked\t()",
			"contents": "C_Commentator.IsSmartCameraLocked()$0",
		},
		{
			"trigger": "C_Commentator.IsSpectating\t()",
			"contents": "C_Commentator.IsSpectating()$0",
		},
		{
			"trigger": "C_Commentator.IsTrackedDefensiveAura\t(spellID)",
			"contents": "C_Commentator.IsTrackedDefensiveAura(${1:spellID})$0",
		},
		{
			"trigger": "C_Commentator.IsTrackedDefensiveCooldown\t(teamIndex, playerIndex, spellID)",
			"contents": "C_Commentator.IsTrackedDefensiveCooldown(${1:teamIndex}, ${2:playerIndex}, ${3:spellID})$0",
		},
		{
			"trigger": "C_Commentator.IsTrackedOffensiveAura\t(spellID)",
			"contents": "C_Commentator.IsTrackedOffensiveAura(${1:spellID})$0",
		},
		{
			"trigger": "C_Commentator.IsTrackedOffensiveCooldown\t(teamIndex, playerIndex, spellID)",
			"contents": "C_Commentator.IsTrackedOffensiveCooldown(${1:teamIndex}, ${2:playerIndex}, ${3:spellID})$0",
		},
		{
			"trigger": "C_Commentator.IsUsingSmartCamera\t()",
			"contents": "C_Commentator.IsUsingSmartCamera()$0",
		},
		{
			"trigger": "C_Commentator.LookAtPlayer\t(factionIndex, playerIndex, [lookAtIndex])",
			"contents": "C_Commentator.LookAtPlayer(${1:factionIndex}, ${2:playerIndex}, [${3:lookAtIndex}])$0",
		},
		{
			"trigger": "C_Commentator.RemoveAllOverrideNames\t()",
			"contents": "C_Commentator.RemoveAllOverrideNames()$0",
		},
		{
			"trigger": "C_Commentator.RemovePlayerOverrideName\t(\"originalPlayerName\")",
			"contents": "C_Commentator.RemovePlayerOverrideName(\"${1:originalPlayerName}\")$0",
		},
		{
			"trigger": "C_Commentator.RequestPlayerCooldownInfo\t(teamIndex, playerIndex)",
			"contents": "C_Commentator.RequestPlayerCooldownInfo(${1:teamIndex}, ${2:playerIndex})$0",
		},
		{
			"trigger": "C_Commentator.ResetFoVTarget\t()",
			"contents": "C_Commentator.ResetFoVTarget()$0",
		},
		{
			"trigger": "C_Commentator.ResetTrackedAuras\t()",
			"contents": "C_Commentator.ResetTrackedAuras()$0",
		},
		{
			"trigger": "C_Commentator.SetAdditionalCameraWeight\t(teamIndex, playerIndex, weight)",
			"contents": "C_Commentator.SetAdditionalCameraWeight(${1:teamIndex}, ${2:playerIndex}, ${3:weight})$0",
		},
		{
			"trigger": "C_Commentator.SetAdditionalCameraWeightByToken\t(\"token\", weight)",
			"contents": "C_Commentator.SetAdditionalCameraWeightByToken(\"${1:token}\", ${2:weight})$0",
		},
		{
			"trigger": "C_Commentator.SetBlacklistedAuras\t(spellIDs)",
			"contents": "C_Commentator.SetBlacklistedAuras(${1:spellIDs})$0",
		},
		{
			"trigger": "C_Commentator.SetBlacklistedCooldowns\t(specID, spellIDs)",
			"contents": "C_Commentator.SetBlacklistedCooldowns(${1:specID}, ${2:spellIDs})$0",
		},
		{
			"trigger": "C_Commentator.SetCamera\t(xPos, yPos, zPos, yaw, pitch, fov)",
			"contents": "C_Commentator.SetCamera(${1:xPos}, ${2:yPos}, ${3:zPos}, ${4:yaw}, ${5:pitch}, ${6:fov})$0",
		},
		{
			"trigger": "C_Commentator.SetCameraCollision\t(collide)",
			"contents": "C_Commentator.SetCameraCollision(${1:collide})$0",
		},
		{
			"trigger": "C_Commentator.SetCameraPosition\t(xPos, yPos, zPos, snapToLocation)",
			"contents": "C_Commentator.SetCameraPosition(${1:xPos}, ${2:yPos}, ${3:zPos}, ${4:snapToLocation})$0",
		},
		{
			"trigger": "C_Commentator.SetCheatsEnabled\t(enableCheats)",
			"contents": "C_Commentator.SetCheatsEnabled(${1:enableCheats})$0",
		},
		{
			"trigger": "C_Commentator.SetDistanceBeforeForcedHorizontalConvergence\t(distance)",
			"contents": "C_Commentator.SetDistanceBeforeForcedHorizontalConvergence(${1:distance})$0",
		},
		{
			"trigger": "C_Commentator.SetDurationToForceHorizontalConvergence\t(ms)",
			"contents": "C_Commentator.SetDurationToForceHorizontalConvergence(${1:ms})$0",
		},
		{
			"trigger": "C_Commentator.SetExcludeDistance\t(excludeDistance)",
			"contents": "C_Commentator.SetExcludeDistance(${1:excludeDistance})$0",
		},
		{
			"trigger": "C_Commentator.SetFollowCameraSpeeds\t(elasticSpeed, minSpeed)",
			"contents": "C_Commentator.SetFollowCameraSpeeds(${1:elasticSpeed}, ${2:minSpeed})$0",
		},
		{
			"trigger": "C_Commentator.SetHardlockWeight\t(weight)",
			"contents": "C_Commentator.SetHardlockWeight(${1:weight})$0",
		},
		{
			"trigger": "C_Commentator.SetHorizontalAngleThresholdToSmooth\t(angle)",
			"contents": "C_Commentator.SetHorizontalAngleThresholdToSmooth(${1:angle})$0",
		},
		{
			"trigger": "C_Commentator.SetLookAtLerpAmount\t(amount)",
			"contents": "C_Commentator.SetLookAtLerpAmount(${1:amount})$0",
		},
		{
			"trigger": "C_Commentator.SetMapAndInstanceIndex\t(mapIndex, instanceIndex)",
			"contents": "C_Commentator.SetMapAndInstanceIndex(${1:mapIndex}, ${2:instanceIndex})$0",
		},
		{
			"trigger": "C_Commentator.SetMouseDisabled\t(disabled)",
			"contents": "C_Commentator.SetMouseDisabled(${1:disabled})$0",
		},
		{
			"trigger": "C_Commentator.SetMoveSpeed\t(newSpeed)",
			"contents": "C_Commentator.SetMoveSpeed(${1:newSpeed})$0",
		},
		{
			"trigger": "C_Commentator.SetMsToHoldForHorizontalMovement\t(ms)",
			"contents": "C_Commentator.SetMsToHoldForHorizontalMovement(${1:ms})$0",
		},
		{
			"trigger": "C_Commentator.SetMsToHoldForVerticalMovement\t(ms)",
			"contents": "C_Commentator.SetMsToHoldForVerticalMovement(${1:ms})$0",
		},
		{
			"trigger": "C_Commentator.SetMsToSmoothHorizontalChange\t(ms)",
			"contents": "C_Commentator.SetMsToSmoothHorizontalChange(${1:ms})$0",
		},
		{
			"trigger": "C_Commentator.SetMsToSmoothVerticalChange\t(ms)",
			"contents": "C_Commentator.SetMsToSmoothVerticalChange(${1:ms})$0",
		},
		{
			"trigger": "C_Commentator.SetPositionLerpAmount\t(amount)",
			"contents": "C_Commentator.SetPositionLerpAmount(${1:amount})$0",
		},
		{
			"trigger": "C_Commentator.SetRequestedDefensiveCooldowns\t(specID, spellIDs)",
			"contents": "C_Commentator.SetRequestedDefensiveCooldowns(${1:specID}, ${2:spellIDs})$0",
		},
		{
			"trigger": "C_Commentator.SetRequestedOffensiveCooldowns\t(specID, spellIDs)",
			"contents": "C_Commentator.SetRequestedOffensiveCooldowns(${1:specID}, ${2:spellIDs})$0",
		},
		{
			"trigger": "C_Commentator.SetSmartCameraLocked\t(locked)",
			"contents": "C_Commentator.SetSmartCameraLocked(${1:locked})$0",
		},
		{
			"trigger": "C_Commentator.SetSmoothFollowTransitioning\t(enabled)",
			"contents": "C_Commentator.SetSmoothFollowTransitioning(${1:enabled})$0",
		},
		{
			"trigger": "C_Commentator.SetSoftlockWeight\t(weight)",
			"contents": "C_Commentator.SetSoftlockWeight(${1:weight})$0",
		},
		{
			"trigger": "C_Commentator.SetSpeedFactor\t(factor)",
			"contents": "C_Commentator.SetSpeedFactor(${1:factor})$0",
		},
		{
			"trigger": "C_Commentator.SetTargetHeightOffset\t(offset)",
			"contents": "C_Commentator.SetTargetHeightOffset(${1:offset})$0",
		},
		{
			"trigger": "C_Commentator.SetUseSmartCamera\t(useSmartCamera)",
			"contents": "C_Commentator.SetUseSmartCamera(${1:useSmartCamera})$0",
		},
		{
			"trigger": "C_Commentator.SnapCameraLookAtPoint\t()",
			"contents": "C_Commentator.SnapCameraLookAtPoint()$0",
		},
		{
			"trigger": "C_Commentator.StartWargame\t(listID, teamSize, tournamentRules, \"teamOneCaptain\", \"teamTwoCaptain\")",
			"contents": "C_Commentator.StartWargame(${1:listID}, ${2:teamSize}, ${3:tournamentRules}, \"${4:teamOneCaptain}\", \"${5:teamTwoCaptain}\")$0",
		},
		{
			"trigger": "C_Commentator.SwapTeamSides\t()",
			"contents": "C_Commentator.SwapTeamSides()$0",
		},
		{
			"trigger": "C_Commentator.ToggleCheats\t()",
			"contents": "C_Commentator.ToggleCheats()$0",
		},
		{
			"trigger": "C_Commentator.UpdateMapInfo\t([\"targetPlayer\"])",
			"contents": "C_Commentator.UpdateMapInfo([\"${1:targetPlayer}\"])$0",
		},
		{
			"trigger": "C_Commentator.UpdatePlayerInfo\t()",
			"contents": "C_Commentator.UpdatePlayerInfo()$0",
		},
		{
			"trigger": "C_Commentator.ZoomIn\t()",
			"contents": "C_Commentator.ZoomIn()$0",
		},
		{
			"trigger": "C_Commentator.ZoomOut\t()",
			"contents": "C_Commentator.ZoomOut()$0",
		},
		{
			"trigger": "C_ConfigurationWarnings.GetConfigurationWarnings\t(includeSeenWarnings)",
			"contents": "C_ConfigurationWarnings.GetConfigurationWarnings(${1:includeSeenWarnings})$0",
		},
		{
			"trigger": "C_ConfigurationWarnings.GetConfigurationWarningSeen\t(configurationWarning)",
			"contents": "C_ConfigurationWarnings.GetConfigurationWarningSeen(${1:configurationWarning})$0",
		},
		{
			"trigger": "C_ConfigurationWarnings.GetConfigurationWarningString\t(configurationWarning)",
			"contents": "C_ConfigurationWarnings.GetConfigurationWarningString(${1:configurationWarning})$0",
		},
		{
			"trigger": "C_ConfigurationWarnings.SetConfigurationWarningSeen\t(configurationWarning)",
			"contents": "C_ConfigurationWarnings.SetConfigurationWarningSeen(${1:configurationWarning})$0",
		},
		{
			"trigger": "C_Console.GetAllCommands\t()",
			"contents": "C_Console.GetAllCommands()$0",
		},
		{
			"trigger": "C_Console.GetColorFromType\t(colorType)",
			"contents": "C_Console.GetColorFromType(${1:colorType})$0",
		},
		{
			"trigger": "C_Console.GetFontHeight\t()",
			"contents": "C_Console.GetFontHeight()$0",
		},
		{
			"trigger": "C_Console.PrintAllMatchingCommands\t(\"partialCommandText\")",
			"contents": "C_Console.PrintAllMatchingCommands(\"${1:partialCommandText}\")$0",
		},
		{
			"trigger": "C_Console.SetFontHeight\t(fontHeightInPixels)",
			"contents": "C_Console.SetFontHeight(${1:fontHeightInPixels})$0",
		},
		{
			"trigger": "C_ContributionCollector.Close\t()",
			"contents": "C_ContributionCollector.Close()$0",
		},
		{
			"trigger": "C_ContributionCollector.Contribute\t(contributionID)",
			"contents": "C_ContributionCollector.Contribute(${1:contributionID})$0",
		},
		{
			"trigger": "C_ContributionCollector.GetActive\t()",
			"contents": "C_ContributionCollector.GetActive()$0",
		},
		{
			"trigger": "C_ContributionCollector.GetAtlases\t(contributionID)",
			"contents": "C_ContributionCollector.GetAtlases(${1:contributionID})$0",
		},
		{
			"trigger": "C_ContributionCollector.GetBuffs\t(contributionID)",
			"contents": "C_ContributionCollector.GetBuffs(${1:contributionID})$0",
		},
		{
			"trigger": "C_ContributionCollector.GetContributionAppearance\t(contributionID, contributionState)",
			"contents": "C_ContributionCollector.GetContributionAppearance(${1:contributionID}, ${2:contributionState})$0",
		},
		{
			"trigger": "C_ContributionCollector.GetContributionCollectorsForMap\t(uiMapID)",
			"contents": "C_ContributionCollector.GetContributionCollectorsForMap(${1:uiMapID})$0",
		},
		{
			"trigger": "C_ContributionCollector.GetContributionResult\t(contributionID)",
			"contents": "C_ContributionCollector.GetContributionResult(${1:contributionID})$0",
		},
		{
			"trigger": "C_ContributionCollector.GetDescription\t(contributionID)",
			"contents": "C_ContributionCollector.GetDescription(${1:contributionID})$0",
		},
		{
			"trigger": "C_ContributionCollector.GetManagedContributionsForCreatureID\t(creatureID)",
			"contents": "C_ContributionCollector.GetManagedContributionsForCreatureID(${1:creatureID})$0",
		},
		{
			"trigger": "C_ContributionCollector.GetName\t(contributionID)",
			"contents": "C_ContributionCollector.GetName(${1:contributionID})$0",
		},
		{
			"trigger": "C_ContributionCollector.GetOrderIndex\t(contributionID)",
			"contents": "C_ContributionCollector.GetOrderIndex(${1:contributionID})$0",
		},
		{
			"trigger": "C_ContributionCollector.GetRequiredContributionCurrency\t(contributionID)",
			"contents": "C_ContributionCollector.GetRequiredContributionCurrency(${1:contributionID})$0",
		},
		{
			"trigger": "C_ContributionCollector.GetRequiredContributionItem\t(contributionID)",
			"contents": "C_ContributionCollector.GetRequiredContributionItem(${1:contributionID})$0",
		},
		{
			"trigger": "C_ContributionCollector.GetRewardQuestID\t(contributionID)",
			"contents": "C_ContributionCollector.GetRewardQuestID(${1:contributionID})$0",
		},
		{
			"trigger": "C_ContributionCollector.GetState\t(contributionID)",
			"contents": "C_ContributionCollector.GetState(${1:contributionID})$0",
		},
		{
			"trigger": "C_ContributionCollector.HasPendingContribution\t(contributionID)",
			"contents": "C_ContributionCollector.HasPendingContribution(${1:contributionID})$0",
		},
		{
			"trigger": "C_ContributionCollector.IsAwaitingRewardQuestData\t(contributionID)",
			"contents": "C_ContributionCollector.IsAwaitingRewardQuestData(${1:contributionID})$0",
		},
		{
			"trigger": "C_CreatureInfo.GetClassInfo\t(classID)",
			"contents": "C_CreatureInfo.GetClassInfo(${1:classID})$0",
		},
		{
			"trigger": "C_CreatureInfo.GetFactionInfo\t(raceID)",
			"contents": "C_CreatureInfo.GetFactionInfo(${1:raceID})$0",
		},
		{
			"trigger": "C_CreatureInfo.GetRaceInfo\t(raceID)",
			"contents": "C_CreatureInfo.GetRaceInfo(${1:raceID})$0",
		},
		{
			"trigger": "C_CurrencyInfo.DoesWarModeBonusApply\t(currencyID)",
			"contents": "C_CurrencyInfo.DoesWarModeBonusApply(${1:currencyID})$0",
		},
		{
			"trigger": "C_CurrencyInfo.GetAzeriteCurrencyID\t()",
			"contents": "C_CurrencyInfo.GetAzeriteCurrencyID()$0",
		},
		{
			"trigger": "C_CurrencyInfo.GetBasicCurrencyInfo\t(currencyType, [quantity])",
			"contents": "C_CurrencyInfo.GetBasicCurrencyInfo(${1:currencyType}, [${2:quantity}])$0",
		},
		{
			"trigger": "C_CurrencyInfo.GetCurrencyContainerInfo\t(currencyType, quantity)",
			"contents": "C_CurrencyInfo.GetCurrencyContainerInfo(${1:currencyType}, ${2:quantity})$0",
		},
		{
			"trigger": "C_CurrencyInfo.GetCurrencyIDFromLink\t(\"currencyLink\")",
			"contents": "C_CurrencyInfo.GetCurrencyIDFromLink(\"${1:currencyLink}\")$0",
		},
		{
			"trigger": "C_CurrencyInfo.GetFactionGrantedByCurrency\t(currencyID)",
			"contents": "C_CurrencyInfo.GetFactionGrantedByCurrency(${1:currencyID})$0",
		},
		{
			"trigger": "C_CurrencyInfo.GetWarResourcesCurrencyID\t()",
			"contents": "C_CurrencyInfo.GetWarResourcesCurrencyID()$0",
		},
		{
			"trigger": "C_CurrencyInfo.IsCurrencyContainer\t(currencyID, quantity)",
			"contents": "C_CurrencyInfo.IsCurrencyContainer(${1:currencyID}, ${2:quantity})$0",
		},
		{
			"trigger": "C_Cursor.DropCursorCommunitiesStream\t()",
			"contents": "C_Cursor.DropCursorCommunitiesStream()$0",
		},
		{
			"trigger": "C_Cursor.GetCursorCommunitiesStream\t()",
			"contents": "C_Cursor.GetCursorCommunitiesStream()$0",
		},
		{
			"trigger": "C_Cursor.GetCursorItem\t()",
			"contents": "C_Cursor.GetCursorItem()$0",
		},
		{
			"trigger": "C_Cursor.SetCursorCommunitiesStream\t(\"clubId\", \"streamId\")",
			"contents": "C_Cursor.SetCursorCommunitiesStream(\"${1:clubId}\", \"${2:streamId}\")$0",
		},
		{
			"trigger": "C_CVar.GetCVar\t(\"name\")",
			"contents": "C_CVar.GetCVar(\"${1:name}\")$0",
		},
		{
			"trigger": "C_CVar.GetCVarBitfield\t(\"name\", index)",
			"contents": "C_CVar.GetCVarBitfield(\"${1:name}\", ${2:index})$0",
		},
		{
			"trigger": "C_CVar.GetCVarBool\t(\"name\")",
			"contents": "C_CVar.GetCVarBool(\"${1:name}\")$0",
		},
		{
			"trigger": "C_CVar.GetCVarDefault\t(\"name\")",
			"contents": "C_CVar.GetCVarDefault(\"${1:name}\")$0",
		},
		{
			"trigger": "C_CVar.RegisterCVar\t(\"name\", [\"value\"])",
			"contents": "C_CVar.RegisterCVar(\"${1:name}\", [\"${2:value}\"])$0",
		},
		{
			"trigger": "C_CVar.ResetTestCVars\t()",
			"contents": "C_CVar.ResetTestCVars()$0",
		},
		{
			"trigger": "C_CVar.SetCVar\t(\"name\", [\"value\", [\"scriptCVar\"]])",
			"contents": "C_CVar.SetCVar(\"${1:name}\", [\"${2:value}\", [\"${3:scriptCVar}\"]])$0",
		},
		{
			"trigger": "C_CVar.SetCVarBitfield\t(\"name\", index, value, [\"scriptCVar\"])",
			"contents": "C_CVar.SetCVarBitfield(\"${1:name}\", ${2:index}, ${3:value}, [\"${4:scriptCVar}\"])$0",
		},
		{
			"trigger": "C_DateAndTime.AdjustTimeByDays\t(date, days)",
			"contents": "C_DateAndTime.AdjustTimeByDays(${1:date}, ${2:days})$0",
		},
		{
			"trigger": "C_DateAndTime.AdjustTimeByMinutes\t(date, minutes)",
			"contents": "C_DateAndTime.AdjustTimeByMinutes(${1:date}, ${2:minutes})$0",
		},
		{
			"trigger": "C_DateAndTime.CompareCalendarTime\t(lhsCalendarTime, rhsCalendarTime)",
			"contents": "C_DateAndTime.CompareCalendarTime(${1:lhsCalendarTime}, ${2:rhsCalendarTime})$0",
		},
		{
			"trigger": "C_DateAndTime.GetCalendarTimeFromEpoch\t(epoch)",
			"contents": "C_DateAndTime.GetCalendarTimeFromEpoch(${1:epoch})$0",
		},
		{
			"trigger": "C_DateAndTime.GetCurrentCalendarTime\t()",
			"contents": "C_DateAndTime.GetCurrentCalendarTime()$0",
		},
		{
			"trigger": "C_DateAndTime.GetServerTimeLocal\t()",
			"contents": "C_DateAndTime.GetServerTimeLocal()$0",
		},
		{
			"trigger": "C_DeathInfo.GetCorpseMapPosition\t(uiMapID)",
			"contents": "C_DeathInfo.GetCorpseMapPosition(${1:uiMapID})$0",
		},
		{
			"trigger": "C_DeathInfo.GetDeathReleasePosition\t(uiMapID)",
			"contents": "C_DeathInfo.GetDeathReleasePosition(${1:uiMapID})$0",
		},
		{
			"trigger": "C_DeathInfo.GetGraveyardsForMap\t(uiMapID)",
			"contents": "C_DeathInfo.GetGraveyardsForMap(${1:uiMapID})$0",
		},
		{
			"trigger": "C_DeathInfo.GetSelfResurrectOptions\t()",
			"contents": "C_DeathInfo.GetSelfResurrectOptions()$0",
		},
		{
			"trigger": "C_DeathInfo.UseSelfResurrectOption\t(optionType, id)",
			"contents": "C_DeathInfo.UseSelfResurrectOption(${1:optionType}, ${2:id})$0",
		},
		{
			"trigger": "C_EncounterJournal.GetDungeonEntrancesForMap\t(uiMapID)",
			"contents": "C_EncounterJournal.GetDungeonEntrancesForMap(${1:uiMapID})$0",
		},
		{
			"trigger": "C_EncounterJournal.GetEncountersOnMap\t(uiMapID)",
			"contents": "C_EncounterJournal.GetEncountersOnMap(${1:uiMapID})$0",
		},
		{
			"trigger": "C_EncounterJournal.GetSectionIconFlags\t(sectionID)",
			"contents": "C_EncounterJournal.GetSectionIconFlags(${1:sectionID})$0",
		},
		{
			"trigger": "C_EncounterJournal.GetSectionInfo\t(sectionID)",
			"contents": "C_EncounterJournal.GetSectionInfo(${1:sectionID})$0",
		},
		{
			"trigger": "C_EncounterJournal.InstanceHasLoot\t([instanceID])",
			"contents": "C_EncounterJournal.InstanceHasLoot([${1:instanceID}])$0",
		},
		{
			"trigger": "C_EncounterJournal.IsEncounterComplete\t(journalEncounterID)",
			"contents": "C_EncounterJournal.IsEncounterComplete(${1:journalEncounterID})$0",
		},
		{
			"trigger": "C_EquipmentSet.AssignSpecToEquipmentSet\t(equipmentSetID, specIndex)",
			"contents": "C_EquipmentSet.AssignSpecToEquipmentSet(${1:equipmentSetID}, ${2:specIndex})$0",
		},
		{
			"trigger": "C_EquipmentSet.CanUseEquipmentSets\t()",
			"contents": "C_EquipmentSet.CanUseEquipmentSets()$0",
		},
		{
			"trigger": "C_EquipmentSet.ClearIgnoredSlotsForSave\t()",
			"contents": "C_EquipmentSet.ClearIgnoredSlotsForSave()$0",
		},
		{
			"trigger": "C_EquipmentSet.CreateEquipmentSet\t(\"equipmentSetName\", [\"icon\"])",
			"contents": "C_EquipmentSet.CreateEquipmentSet(\"${1:equipmentSetName}\", [\"${2:icon}\"])$0",
		},
		{
			"trigger": "C_EquipmentSet.DeleteEquipmentSet\t(equipmentSetID)",
			"contents": "C_EquipmentSet.DeleteEquipmentSet(${1:equipmentSetID})$0",
		},
		{
			"trigger": "C_EquipmentSet.EquipmentSetContainsLockedItems\t(equipmentSetID)",
			"contents": "C_EquipmentSet.EquipmentSetContainsLockedItems(${1:equipmentSetID})$0",
		},
		{
			"trigger": "C_EquipmentSet.GetEquipmentSetAssignedSpec\t(equipmentSetID)",
			"contents": "C_EquipmentSet.GetEquipmentSetAssignedSpec(${1:equipmentSetID})$0",
		},
		{
			"trigger": "C_EquipmentSet.GetEquipmentSetForSpec\t(specIndex)",
			"contents": "C_EquipmentSet.GetEquipmentSetForSpec(${1:specIndex})$0",
		},
		{
			"trigger": "C_EquipmentSet.GetEquipmentSetID\t(\"equipmentSetName\")",
			"contents": "C_EquipmentSet.GetEquipmentSetID(\"${1:equipmentSetName}\")$0",
		},
		{
			"trigger": "C_EquipmentSet.GetEquipmentSetIDs\t()",
			"contents": "C_EquipmentSet.GetEquipmentSetIDs()$0",
		},
		{
			"trigger": "C_EquipmentSet.GetEquipmentSetInfo\t(equipmentSetID)",
			"contents": "C_EquipmentSet.GetEquipmentSetInfo(${1:equipmentSetID})$0",
		},
		{
			"trigger": "C_EquipmentSet.GetIgnoredSlots\t(equipmentSetID)",
			"contents": "C_EquipmentSet.GetIgnoredSlots(${1:equipmentSetID})$0",
		},
		{
			"trigger": "C_EquipmentSet.GetItemIDs\t(equipmentSetID)",
			"contents": "C_EquipmentSet.GetItemIDs(${1:equipmentSetID})$0",
		},
		{
			"trigger": "C_EquipmentSet.GetItemLocations\t(equipmentSetID)",
			"contents": "C_EquipmentSet.GetItemLocations(${1:equipmentSetID})$0",
		},
		{
			"trigger": "C_EquipmentSet.GetNumEquipmentSets\t()",
			"contents": "C_EquipmentSet.GetNumEquipmentSets()$0",
		},
		{
			"trigger": "C_EquipmentSet.IgnoreSlotForSave\t(slot)",
			"contents": "C_EquipmentSet.IgnoreSlotForSave(${1:slot})$0",
		},
		{
			"trigger": "C_EquipmentSet.IsSlotIgnoredForSave\t(slot)",
			"contents": "C_EquipmentSet.IsSlotIgnoredForSave(${1:slot})$0",
		},
		{
			"trigger": "C_EquipmentSet.ModifyEquipmentSet\t(equipmentSetID, \"newName\", [\"newIcon\"])",
			"contents": "C_EquipmentSet.ModifyEquipmentSet(${1:equipmentSetID}, \"${2:newName}\", [\"${3:newIcon}\"])$0",
		},
		{
			"trigger": "C_EquipmentSet.PickupEquipmentSet\t(equipmentSetID)",
			"contents": "C_EquipmentSet.PickupEquipmentSet(${1:equipmentSetID})$0",
		},
		{
			"trigger": "C_EquipmentSet.SaveEquipmentSet\t(equipmentSetID, [\"icon\"])",
			"contents": "C_EquipmentSet.SaveEquipmentSet(${1:equipmentSetID}, [\"${2:icon}\"])$0",
		},
		{
			"trigger": "C_EquipmentSet.UnassignEquipmentSetSpec\t(equipmentSetID)",
			"contents": "C_EquipmentSet.UnassignEquipmentSetSpec(${1:equipmentSetID})$0",
		},
		{
			"trigger": "C_EquipmentSet.UnignoreSlotForSave\t(slot)",
			"contents": "C_EquipmentSet.UnignoreSlotForSave(${1:slot})$0",
		},
		{
			"trigger": "C_EquipmentSet.UseEquipmentSet\t(equipmentSetID)",
			"contents": "C_EquipmentSet.UseEquipmentSet(${1:equipmentSetID})$0",
		},
		{
			"trigger": "C_FogOfWar.GetFogOfWarForMap\t(uiMapID)",
			"contents": "C_FogOfWar.GetFogOfWarForMap(${1:uiMapID})$0",
		},
		{
			"trigger": "C_FogOfWar.GetFogOfWarInfo\t(fogOfWarID)",
			"contents": "C_FogOfWar.GetFogOfWarInfo(${1:fogOfWarID})$0",
		},
		{
			"trigger": "C_FriendList.AddFriend\t(\"name\", [\"notes\"])",
			"contents": "C_FriendList.AddFriend(\"${1:name}\", [\"${2:notes}\"])$0",
		},
		{
			"trigger": "C_FriendList.AddIgnore\t(\"name\")",
			"contents": "C_FriendList.AddIgnore(\"${1:name}\")$0",
		},
		{
			"trigger": "C_FriendList.AddOrDelIgnore\t(\"name\")",
			"contents": "C_FriendList.AddOrDelIgnore(\"${1:name}\")$0",
		},
		{
			"trigger": "C_FriendList.AddOrRemoveFriend\t(\"name\", \"notes\")",
			"contents": "C_FriendList.AddOrRemoveFriend(\"${1:name}\", \"${2:notes}\")$0",
		},
		{
			"trigger": "C_FriendList.DelIgnore\t(\"name\")",
			"contents": "C_FriendList.DelIgnore(\"${1:name}\")$0",
		},
		{
			"trigger": "C_FriendList.DelIgnoreByIndex\t(index)",
			"contents": "C_FriendList.DelIgnoreByIndex(${1:index})$0",
		},
		{
			"trigger": "C_FriendList.GetFriendInfo\t(\"name\")",
			"contents": "C_FriendList.GetFriendInfo(\"${1:name}\")$0",
		},
		{
			"trigger": "C_FriendList.GetFriendInfoByIndex\t(index)",
			"contents": "C_FriendList.GetFriendInfoByIndex(${1:index})$0",
		},
		{
			"trigger": "C_FriendList.GetIgnoreName\t(index)",
			"contents": "C_FriendList.GetIgnoreName(${1:index})$0",
		},
		{
			"trigger": "C_FriendList.GetNumFriends\t()",
			"contents": "C_FriendList.GetNumFriends()$0",
		},
		{
			"trigger": "C_FriendList.GetNumIgnores\t()",
			"contents": "C_FriendList.GetNumIgnores()$0",
		},
		{
			"trigger": "C_FriendList.GetNumOnlineFriends\t()",
			"contents": "C_FriendList.GetNumOnlineFriends()$0",
		},
		{
			"trigger": "C_FriendList.GetNumWhoResults\t()",
			"contents": "C_FriendList.GetNumWhoResults()$0",
		},
		{
			"trigger": "C_FriendList.GetSelectedFriend\t()",
			"contents": "C_FriendList.GetSelectedFriend()$0",
		},
		{
			"trigger": "C_FriendList.GetSelectedIgnore\t()",
			"contents": "C_FriendList.GetSelectedIgnore()$0",
		},
		{
			"trigger": "C_FriendList.GetWhoInfo\t(index)",
			"contents": "C_FriendList.GetWhoInfo(${1:index})$0",
		},
		{
			"trigger": "C_FriendList.IsFriend\t(\"guid\")",
			"contents": "C_FriendList.IsFriend(\"${1:guid}\")$0",
		},
		{
			"trigger": "C_FriendList.IsIgnored\t(\"token\")",
			"contents": "C_FriendList.IsIgnored(\"${1:token}\")$0",
		},
		{
			"trigger": "C_FriendList.IsIgnoredByGuid\t(\"guid\")",
			"contents": "C_FriendList.IsIgnoredByGuid(\"${1:guid}\")$0",
		},
		{
			"trigger": "C_FriendList.RemoveFriend\t(\"name\")",
			"contents": "C_FriendList.RemoveFriend(\"${1:name}\")$0",
		},
		{
			"trigger": "C_FriendList.RemoveFriendByIndex\t(index)",
			"contents": "C_FriendList.RemoveFriendByIndex(${1:index})$0",
		},
		{
			"trigger": "C_FriendList.SendWho\t(\"filter\")",
			"contents": "C_FriendList.SendWho(\"${1:filter}\")$0",
		},
		{
			"trigger": "C_FriendList.SetFriendNotes\t(\"name\", \"notes\")",
			"contents": "C_FriendList.SetFriendNotes(\"${1:name}\", \"${2:notes}\")$0",
		},
		{
			"trigger": "C_FriendList.SetFriendNotesByIndex\t(index, \"notes\")",
			"contents": "C_FriendList.SetFriendNotesByIndex(${1:index}, \"${2:notes}\")$0",
		},
		{
			"trigger": "C_FriendList.SetSelectedFriend\t(index)",
			"contents": "C_FriendList.SetSelectedFriend(${1:index})$0",
		},
		{
			"trigger": "C_FriendList.SetSelectedIgnore\t(index)",
			"contents": "C_FriendList.SetSelectedIgnore(${1:index})$0",
		},
		{
			"trigger": "C_FriendList.SetWhoToUi\t(whoToUi)",
			"contents": "C_FriendList.SetWhoToUi(${1:whoToUi})$0",
		},
		{
			"trigger": "C_FriendList.ShowFriends\t()",
			"contents": "C_FriendList.ShowFriends()$0",
		},
		{
			"trigger": "C_FriendList.SortWho\t(\"sorting\")",
			"contents": "C_FriendList.SortWho(\"${1:sorting}\")$0",
		},
		{
			"trigger": "C_Garrison.GetCurrentGarrTalentTreeFriendshipFactionID\t()",
			"contents": "C_Garrison.GetCurrentGarrTalentTreeFriendshipFactionID()$0",
		},
		{
			"trigger": "C_Garrison.GetCurrentGarrTalentTreeID\t()",
			"contents": "C_Garrison.GetCurrentGarrTalentTreeID()$0",
		},
		{
			"trigger": "C_Garrison.GetGarrisonPlotsInstancesForMap\t(uiMapID)",
			"contents": "C_Garrison.GetGarrisonPlotsInstancesForMap(${1:uiMapID})$0",
		},
		{
			"trigger": "C_Garrison.GetTalentTreeIDsByClassID\t(garrType, classID)",
			"contents": "C_Garrison.GetTalentTreeIDsByClassID(${1:garrType}, ${2:classID})$0",
		},
		{
			"trigger": "C_Garrison.IsAtGarrisonMissionNPC\t()",
			"contents": "C_Garrison.IsAtGarrisonMissionNPC()$0",
		},
		{
			"trigger": "C_Garrison.IsEnvironmentCountered\t(missionID)",
			"contents": "C_Garrison.IsEnvironmentCountered(${1:missionID})$0",
		},
		{
			"trigger": "C_GossipInfo.GetGossipPoiForUiMapID\t(uiMapID)",
			"contents": "C_GossipInfo.GetGossipPoiForUiMapID(${1:uiMapID})$0",
		},
		{
			"trigger": "C_GossipInfo.GetGossipPoiInfo\t(uiMapID, gossipPoiID)",
			"contents": "C_GossipInfo.GetGossipPoiInfo(${1:uiMapID}, ${2:gossipPoiID})$0",
		},
		{
			"trigger": "C_GuildInfo.CanSpeakInGuildChat\t()",
			"contents": "C_GuildInfo.CanSpeakInGuildChat()$0",
		},
		{
			"trigger": "C_GuildInfo.GetGuildRankOrder\t(\"guid\")",
			"contents": "C_GuildInfo.GetGuildRankOrder(\"${1:guid}\")$0",
		},
		{
			"trigger": "C_GuildInfo.GuildControlGetRankFlags\t(rankOrder)",
			"contents": "C_GuildInfo.GuildControlGetRankFlags(${1:rankOrder})$0",
		},
		{
			"trigger": "C_GuildInfo.IsGuildRankAssignmentAllowed\t(\"guid\", rankOrder)",
			"contents": "C_GuildInfo.IsGuildRankAssignmentAllowed(\"${1:guid}\", ${2:rankOrder})$0",
		},
		{
			"trigger": "C_GuildInfo.QueryGuildMemberRecipes\t(\"guildMemberGUID\", skillLineID)",
			"contents": "C_GuildInfo.QueryGuildMemberRecipes(\"${1:guildMemberGUID}\", ${2:skillLineID})$0",
		},
		{
			"trigger": "C_GuildInfo.RemoveFromGuild\t(\"guid\")",
			"contents": "C_GuildInfo.RemoveFromGuild(\"${1:guid}\")$0",
		},
		{
			"trigger": "C_GuildInfo.SetGuildRankOrder\t(\"guid\", rankOrder)",
			"contents": "C_GuildInfo.SetGuildRankOrder(\"${1:guid}\", ${2:rankOrder})$0",
		},
		{
			"trigger": "C_GuildInfo.SetNote\t(\"guid\", \"note\", isPublic)",
			"contents": "C_GuildInfo.SetNote(\"${1:guid}\", \"${2:note}\", ${3:isPublic})$0",
		},
		{
			"trigger": "C_IncomingSummon.HasIncomingSummon\t(\"unit\")",
			"contents": "C_IncomingSummon.HasIncomingSummon(\"${1:unit}\")$0",
		},
		{
			"trigger": "C_IncomingSummon.IncomingSummonStatus\t(\"unit\")",
			"contents": "C_IncomingSummon.IncomingSummonStatus(\"${1:unit}\")$0",
		},
		{
			"trigger": "C_InvasionInfo.AreInvasionsAvailable\t()",
			"contents": "C_InvasionInfo.AreInvasionsAvailable()$0",
		},
		{
			"trigger": "C_InvasionInfo.GetInvasionForUiMapID\t(uiMapID)",
			"contents": "C_InvasionInfo.GetInvasionForUiMapID(${1:uiMapID})$0",
		},
		{
			"trigger": "C_InvasionInfo.GetInvasionInfo\t(invasionID)",
			"contents": "C_InvasionInfo.GetInvasionInfo(${1:invasionID})$0",
		},
		{
			"trigger": "C_InvasionInfo.GetInvasionTimeLeft\t(invasionID)",
			"contents": "C_InvasionInfo.GetInvasionTimeLeft(${1:invasionID})$0",
		},
		{
			"trigger": "C_IslandsQueue.CloseIslandsQueueScreen\t()",
			"contents": "C_IslandsQueue.CloseIslandsQueueScreen()$0",
		},
		{
			"trigger": "C_IslandsQueue.GetIslandDifficultyInfo\t()",
			"contents": "C_IslandsQueue.GetIslandDifficultyInfo()$0",
		},
		{
			"trigger": "C_IslandsQueue.GetIslandsMaxGroupSize\t()",
			"contents": "C_IslandsQueue.GetIslandsMaxGroupSize()$0",
		},
		{
			"trigger": "C_IslandsQueue.GetIslandsWeeklyQuestID\t()",
			"contents": "C_IslandsQueue.GetIslandsWeeklyQuestID()$0",
		},
		{
			"trigger": "C_IslandsQueue.QueueForIsland\t(difficultyID)",
			"contents": "C_IslandsQueue.QueueForIsland(${1:difficultyID})$0",
		},
		{
			"trigger": "C_IslandsQueue.RequestPreloadRewardData\t(questId)",
			"contents": "C_IslandsQueue.RequestPreloadRewardData(${1:questId})$0",
		},
		{
			"trigger": "C_Item.CanScrapItem\t(itemLoc)",
			"contents": "C_Item.CanScrapItem(${1:itemLoc})$0",
		},
		{
			"trigger": "C_Item.CanViewItemPowers\t(itemLoc)",
			"contents": "C_Item.CanViewItemPowers(${1:itemLoc})$0",
		},
		{
			"trigger": "C_Item.DoesItemExist\t(emptiableItemLocation)",
			"contents": "C_Item.DoesItemExist(${1:emptiableItemLocation})$0",
		},
		{
			"trigger": "C_Item.DoesItemExistByID\t(\"itemInfo\")",
			"contents": "C_Item.DoesItemExistByID(\"${1:itemInfo}\")$0",
		},
		{
			"trigger": "C_Item.GetCurrentItemLevel\t(itemLocation)",
			"contents": "C_Item.GetCurrentItemLevel(${1:itemLocation})$0",
		},
		{
			"trigger": "C_Item.GetItemGUID\t(itemLocation)",
			"contents": "C_Item.GetItemGUID(${1:itemLocation})$0",
		},
		{
			"trigger": "C_Item.GetItemIcon\t(itemLocation)",
			"contents": "C_Item.GetItemIcon(${1:itemLocation})$0",
		},
		{
			"trigger": "C_Item.GetItemIconByID\t(\"itemInfo\")",
			"contents": "C_Item.GetItemIconByID(\"${1:itemInfo}\")$0",
		},
		{
			"trigger": "C_Item.GetItemID\t(itemLocation)",
			"contents": "C_Item.GetItemID(${1:itemLocation})$0",
		},
		{
			"trigger": "C_Item.GetItemInventoryType\t(itemLocation)",
			"contents": "C_Item.GetItemInventoryType(${1:itemLocation})$0",
		},
		{
			"trigger": "C_Item.GetItemInventoryTypeByID\t(\"itemInfo\")",
			"contents": "C_Item.GetItemInventoryTypeByID(\"${1:itemInfo}\")$0",
		},
		{
			"trigger": "C_Item.GetItemLink\t(itemLocation)",
			"contents": "C_Item.GetItemLink(${1:itemLocation})$0",
		},
		{
			"trigger": "C_Item.GetItemName\t(itemLocation)",
			"contents": "C_Item.GetItemName(${1:itemLocation})$0",
		},
		{
			"trigger": "C_Item.GetItemNameByID\t(\"itemInfo\")",
			"contents": "C_Item.GetItemNameByID(\"${1:itemInfo}\")$0",
		},
		{
			"trigger": "C_Item.GetItemQuality\t(itemLocation)",
			"contents": "C_Item.GetItemQuality(${1:itemLocation})$0",
		},
		{
			"trigger": "C_Item.GetItemQualityByID\t(\"itemInfo\")",
			"contents": "C_Item.GetItemQualityByID(\"${1:itemInfo}\")$0",
		},
		{
			"trigger": "C_Item.IsBound\t(itemLocation)",
			"contents": "C_Item.IsBound(${1:itemLocation})$0",
		},
		{
			"trigger": "C_Item.IsItemDataCached\t(itemLocation)",
			"contents": "C_Item.IsItemDataCached(${1:itemLocation})$0",
		},
		{
			"trigger": "C_Item.IsItemDataCachedByID\t(\"itemInfo\")",
			"contents": "C_Item.IsItemDataCachedByID(\"${1:itemInfo}\")$0",
		},
		{
			"trigger": "C_Item.IsLocked\t(itemLocation)",
			"contents": "C_Item.IsLocked(${1:itemLocation})$0",
		},
		{
			"trigger": "C_Item.LockItem\t(itemLocation)",
			"contents": "C_Item.LockItem(${1:itemLocation})$0",
		},
		{
			"trigger": "C_Item.RequestLoadItemData\t(itemLocation)",
			"contents": "C_Item.RequestLoadItemData(${1:itemLocation})$0",
		},
		{
			"trigger": "C_Item.RequestLoadItemDataByID\t(\"itemInfo\")",
			"contents": "C_Item.RequestLoadItemDataByID(\"${1:itemInfo}\")$0",
		},
		{
			"trigger": "C_Item.UnlockItem\t(itemLocation)",
			"contents": "C_Item.UnlockItem(${1:itemLocation})$0",
		},
		{
			"trigger": "C_ItemSocketInfo.CompleteSocketing\t()",
			"contents": "C_ItemSocketInfo.CompleteSocketing()$0",
		},
		{
			"trigger": "C_KeyBindings.GetCustomBindingType\t(bindingIndex)",
			"contents": "C_KeyBindings.GetCustomBindingType(${1:bindingIndex})$0",
		},
		{
			"trigger": "C_LFGInfo.GetAllEntriesForCategory\t(category)",
			"contents": "C_LFGInfo.GetAllEntriesForCategory(${1:category})$0",
		},
		{
			"trigger": "C_LFGInfo.HideNameFromUI\t(dungeonID)",
			"contents": "C_LFGInfo.HideNameFromUI(${1:dungeonID})$0",
		},
		{
			"trigger": "C_LFGList.CanActiveEntryUseAutoAccept\t()",
			"contents": "C_LFGList.CanActiveEntryUseAutoAccept()$0",
		},
		{
			"trigger": "C_LFGList.CanCreateQuestGroup\t(questID)",
			"contents": "C_LFGList.CanCreateQuestGroup(${1:questID})$0",
		},
		{
			"trigger": "C_LFGList.ClearApplicationTextFields\t()",
			"contents": "C_LFGList.ClearApplicationTextFields()$0",
		},
		{
			"trigger": "C_LFGList.ClearCreationTextFields\t()",
			"contents": "C_LFGList.ClearCreationTextFields()$0",
		},
		{
			"trigger": "C_LFGList.ClearSearchTextFields\t()",
			"contents": "C_LFGList.ClearSearchTextFields()$0",
		},
		{
			"trigger": "C_LFGList.CopyActiveEntryInfoToCreationFields\t()",
			"contents": "C_LFGList.CopyActiveEntryInfoToCreationFields()$0",
		},
		{
			"trigger": "C_LFGList.GetActiveEntryInfo\t()",
			"contents": "C_LFGList.GetActiveEntryInfo()$0",
		},
		{
			"trigger": "C_LFGList.GetApplicantInfo\t(applicantID)",
			"contents": "C_LFGList.GetApplicantInfo(${1:applicantID})$0",
		},
		{
			"trigger": "C_LFGList.GetSearchResultInfo\t(searchResultID)",
			"contents": "C_LFGList.GetSearchResultInfo(${1:searchResultID})$0",
		},
		{
			"trigger": "C_LFGList.HasActiveEntryInfo\t()",
			"contents": "C_LFGList.HasActiveEntryInfo()$0",
		},
		{
			"trigger": "C_LFGList.HasSearchResultInfo\t(searchResultID)",
			"contents": "C_LFGList.HasSearchResultInfo(${1:searchResultID})$0",
		},
		{
			"trigger": "C_LFGList.Search\t(categoryID, filter, preferredFilters, [languageFilter])",
			"contents": "C_LFGList.Search(${1:categoryID}, ${2:filter}, ${3:preferredFilters}, [${4:languageFilter}])$0",
		},
		{
			"trigger": "C_LFGList.SetSearchToActivity\t(activityID)",
			"contents": "C_LFGList.SetSearchToActivity(${1:activityID})$0",
		},
		{
			"trigger": "C_LFGList.SetSearchToQuestID\t(questID)",
			"contents": "C_LFGList.SetSearchToQuestID(${1:questID})$0",
		},
		{
			"trigger": "C_Loot.IsLegacyLootModeEnabled\t()",
			"contents": "C_Loot.IsLegacyLootModeEnabled()$0",
		},
		{
			"trigger": "C_Mail.HasInboxMoney\t(inboxIndex)",
			"contents": "C_Mail.HasInboxMoney(${1:inboxIndex})$0",
		},
		{
			"trigger": "C_Mail.IsCommandPending\t()",
			"contents": "C_Mail.IsCommandPending()$0",
		},
		{
			"trigger": "C_Map.GetAreaInfo\t(areaID)",
			"contents": "C_Map.GetAreaInfo(${1:areaID})$0",
		},
		{
			"trigger": "C_Map.GetBestMapForUnit\t(\"unitToken\")",
			"contents": "C_Map.GetBestMapForUnit(\"${1:unitToken}\")$0",
		},
		{
			"trigger": "C_Map.GetBountySetMaps\t(bountySetID)",
			"contents": "C_Map.GetBountySetMaps(${1:bountySetID})$0",
		},
		{
			"trigger": "C_Map.GetFallbackWorldMapID\t()",
			"contents": "C_Map.GetFallbackWorldMapID()$0",
		},
		{
			"trigger": "C_Map.GetMapArtBackgroundAtlas\t(uiMapID)",
			"contents": "C_Map.GetMapArtBackgroundAtlas(${1:uiMapID})$0",
		},
		{
			"trigger": "C_Map.GetMapArtHelpTextPosition\t(uiMapID)",
			"contents": "C_Map.GetMapArtHelpTextPosition(${1:uiMapID})$0",
		},
		{
			"trigger": "C_Map.GetMapArtID\t(uiMapID)",
			"contents": "C_Map.GetMapArtID(${1:uiMapID})$0",
		},
		{
			"trigger": "C_Map.GetMapArtLayers\t(uiMapID)",
			"contents": "C_Map.GetMapArtLayers(${1:uiMapID})$0",
		},
		{
			"trigger": "C_Map.GetMapArtLayerTextures\t(uiMapID, layerIndex)",
			"contents": "C_Map.GetMapArtLayerTextures(${1:uiMapID}, ${2:layerIndex})$0",
		},
		{
			"trigger": "C_Map.GetMapBannersForMap\t(uiMapID)",
			"contents": "C_Map.GetMapBannersForMap(${1:uiMapID})$0",
		},
		{
			"trigger": "C_Map.GetMapChildrenInfo\t(uiMapID, [mapType, [allDescendants]])",
			"contents": "C_Map.GetMapChildrenInfo(${1:uiMapID}, [${2:mapType}, [${3:allDescendants}]])$0",
		},
		{
			"trigger": "C_Map.GetMapDisplayInfo\t(uiMapID)",
			"contents": "C_Map.GetMapDisplayInfo(${1:uiMapID})$0",
		},
		{
			"trigger": "C_Map.GetMapGroupID\t(uiMapID)",
			"contents": "C_Map.GetMapGroupID(${1:uiMapID})$0",
		},
		{
			"trigger": "C_Map.GetMapGroupMembersInfo\t(uiMapGroupID)",
			"contents": "C_Map.GetMapGroupMembersInfo(${1:uiMapGroupID})$0",
		},
		{
			"trigger": "C_Map.GetMapHighlightInfoAtPosition\t(uiMapID, x, y)",
			"contents": "C_Map.GetMapHighlightInfoAtPosition(${1:uiMapID}, ${2:x}, ${3:y})$0",
		},
		{
			"trigger": "C_Map.GetMapInfo\t(uiMapID)",
			"contents": "C_Map.GetMapInfo(${1:uiMapID})$0",
		},
		{
			"trigger": "C_Map.GetMapInfoAtPosition\t(uiMapID, x, y)",
			"contents": "C_Map.GetMapInfoAtPosition(${1:uiMapID}, ${2:x}, ${3:y})$0",
		},
		{
			"trigger": "C_Map.GetMapLevels\t(uiMapID)",
			"contents": "C_Map.GetMapLevels(${1:uiMapID})$0",
		},
		{
			"trigger": "C_Map.GetMapLinksForMap\t(uiMapID)",
			"contents": "C_Map.GetMapLinksForMap(${1:uiMapID})$0",
		},
		{
			"trigger": "C_Map.GetMapPosFromWorldPos\t(continentID, worldPosition, [overrideUiMapID])",
			"contents": "C_Map.GetMapPosFromWorldPos(${1:continentID}, ${2:worldPosition}, [${3:overrideUiMapID}])$0",
		},
		{
			"trigger": "C_Map.GetMapRectOnMap\t(uiMapID, topUiMapID)",
			"contents": "C_Map.GetMapRectOnMap(${1:uiMapID}, ${2:topUiMapID})$0",
		},
		{
			"trigger": "C_Map.GetPlayerMapPosition\t(uiMapID, \"unitToken\")",
			"contents": "C_Map.GetPlayerMapPosition(${1:uiMapID}, \"${2:unitToken}\")$0",
		},
		{
			"trigger": "C_Map.GetWorldPosFromMapPos\t(uiMapID, mapPosition)",
			"contents": "C_Map.GetWorldPosFromMapPos(${1:uiMapID}, ${2:mapPosition})$0",
		},
		{
			"trigger": "C_Map.MapHasArt\t(uiMapID)",
			"contents": "C_Map.MapHasArt(${1:uiMapID})$0",
		},
		{
			"trigger": "C_Map.RequestPreloadMap\t(uiMapID)",
			"contents": "C_Map.RequestPreloadMap(${1:uiMapID})$0",
		},
		{
			"trigger": "C_MapExplorationInfo.GetExploredAreaIDsAtPosition\t(uiMapID, normalizedPosition)",
			"contents": "C_MapExplorationInfo.GetExploredAreaIDsAtPosition(${1:uiMapID}, ${2:normalizedPosition})$0",
		},
		{
			"trigger": "C_MapExplorationInfo.GetExploredMapTextures\t(uiMapID)",
			"contents": "C_MapExplorationInfo.GetExploredMapTextures(${1:uiMapID})$0",
		},
		{
			"trigger": "C_MerchantFrame.GetBuybackItemID\t(buybackSlotIndex)",
			"contents": "C_MerchantFrame.GetBuybackItemID(${1:buybackSlotIndex})$0",
		},
		{
			"trigger": "C_MerchantFrame.IsMerchantItemRefundable\t(index)",
			"contents": "C_MerchantFrame.IsMerchantItemRefundable(${1:index})$0",
		},
		{
			"trigger": "C_ModelInfo.AddActiveModelScene\t(modelSceneFrame, modelSceneID)",
			"contents": "C_ModelInfo.AddActiveModelScene(${1:modelSceneFrame}, ${2:modelSceneID})$0",
		},
		{
			"trigger": "C_ModelInfo.AddActiveModelSceneActor\t(modelSceneFrameActor, modelSceneActorID)",
			"contents": "C_ModelInfo.AddActiveModelSceneActor(${1:modelSceneFrameActor}, ${2:modelSceneActorID})$0",
		},
		{
			"trigger": "C_ModelInfo.ClearActiveModelScene\t(modelSceneFrame)",
			"contents": "C_ModelInfo.ClearActiveModelScene(${1:modelSceneFrame})$0",
		},
		{
			"trigger": "C_ModelInfo.ClearActiveModelSceneActor\t(modelSceneFrameActor)",
			"contents": "C_ModelInfo.ClearActiveModelSceneActor(${1:modelSceneFrameActor})$0",
		},
		{
			"trigger": "C_ModelInfo.GetModelSceneActorDisplayInfoByID\t(modelActorDisplayID)",
			"contents": "C_ModelInfo.GetModelSceneActorDisplayInfoByID(${1:modelActorDisplayID})$0",
		},
		{
			"trigger": "C_ModelInfo.GetModelSceneActorInfoByID\t(modelActorID)",
			"contents": "C_ModelInfo.GetModelSceneActorInfoByID(${1:modelActorID})$0",
		},
		{
			"trigger": "C_ModelInfo.GetModelSceneCameraInfoByID\t(modelSceneCameraID)",
			"contents": "C_ModelInfo.GetModelSceneCameraInfoByID(${1:modelSceneCameraID})$0",
		},
		{
			"trigger": "C_ModelInfo.GetModelSceneInfoByID\t(modelSceneID)",
			"contents": "C_ModelInfo.GetModelSceneInfoByID(${1:modelSceneID})$0",
		},
		{
			"trigger": "C_MountJournal.ClearFanfare\t(mountID)",
			"contents": "C_MountJournal.ClearFanfare(${1:mountID})$0",
		},
		{
			"trigger": "C_MountJournal.ClearRecentFanfares\t()",
			"contents": "C_MountJournal.ClearRecentFanfares()$0",
		},
		{
			"trigger": "C_MountJournal.Dismiss\t()",
			"contents": "C_MountJournal.Dismiss()$0",
		},
		{
			"trigger": "C_MountJournal.GetCollectedFilterSetting\t(filterIndex)",
			"contents": "C_MountJournal.GetCollectedFilterSetting(${1:filterIndex})$0",
		},
		{
			"trigger": "C_MountJournal.GetDisplayedMountAllCreatureDisplayInfo\t(mountIndex)",
			"contents": "C_MountJournal.GetDisplayedMountAllCreatureDisplayInfo(${1:mountIndex})$0",
		},
		{
			"trigger": "C_MountJournal.GetDisplayedMountInfo\t(displayIndex)",
			"contents": "C_MountJournal.GetDisplayedMountInfo(${1:displayIndex})$0",
		},
		{
			"trigger": "C_MountJournal.GetDisplayedMountInfoExtra\t(mountIndex)",
			"contents": "C_MountJournal.GetDisplayedMountInfoExtra(${1:mountIndex})$0",
		},
		{
			"trigger": "C_MountJournal.GetIsFavorite\t(mountIndex)",
			"contents": "C_MountJournal.GetIsFavorite(${1:mountIndex})$0",
		},
		{
			"trigger": "C_MountJournal.GetMountAllCreatureDisplayInfoByID\t(mountID)",
			"contents": "C_MountJournal.GetMountAllCreatureDisplayInfoByID(${1:mountID})$0",
		},
		{
			"trigger": "C_MountJournal.GetMountFromItem\t(itemID)",
			"contents": "C_MountJournal.GetMountFromItem(${1:itemID})$0",
		},
		{
			"trigger": "C_MountJournal.GetMountFromSpell\t(spellID)",
			"contents": "C_MountJournal.GetMountFromSpell(${1:spellID})$0",
		},
		{
			"trigger": "C_MountJournal.GetMountIDs\t()",
			"contents": "C_MountJournal.GetMountIDs()$0",
		},
		{
			"trigger": "C_MountJournal.GetMountInfoByID\t(mountID)",
			"contents": "C_MountJournal.GetMountInfoByID(${1:mountID})$0",
		},
		{
			"trigger": "C_MountJournal.GetMountInfoExtraByID\t(mountID)",
			"contents": "C_MountJournal.GetMountInfoExtraByID(${1:mountID})$0",
		},
		{
			"trigger": "C_MountJournal.GetMountUsabilityByID\t(mountID, checkIndoors)",
			"contents": "C_MountJournal.GetMountUsabilityByID(${1:mountID}, ${2:checkIndoors})$0",
		},
		{
			"trigger": "C_MountJournal.GetNumDisplayedMounts\t()",
			"contents": "C_MountJournal.GetNumDisplayedMounts()$0",
		},
		{
			"trigger": "C_MountJournal.GetNumMounts\t()",
			"contents": "C_MountJournal.GetNumMounts()$0",
		},
		{
			"trigger": "C_MountJournal.GetNumMountsNeedingFanfare\t()",
			"contents": "C_MountJournal.GetNumMountsNeedingFanfare()$0",
		},
		{
			"trigger": "C_MountJournal.IsSourceChecked\t(filterIndex)",
			"contents": "C_MountJournal.IsSourceChecked(${1:filterIndex})$0",
		},
		{
			"trigger": "C_MountJournal.IsValidSourceFilter\t(filterIndex)",
			"contents": "C_MountJournal.IsValidSourceFilter(${1:filterIndex})$0",
		},
		{
			"trigger": "C_MountJournal.NeedsFanfare\t(mountID)",
			"contents": "C_MountJournal.NeedsFanfare(${1:mountID})$0",
		},
		{
			"trigger": "C_MountJournal.Pickup\t(displayIndex)",
			"contents": "C_MountJournal.Pickup(${1:displayIndex})$0",
		},
		{
			"trigger": "C_MountJournal.SetAllSourceFilters\t(isChecked)",
			"contents": "C_MountJournal.SetAllSourceFilters(${1:isChecked})$0",
		},
		{
			"trigger": "C_MountJournal.SetCollectedFilterSetting\t(filterIndex, isChecked)",
			"contents": "C_MountJournal.SetCollectedFilterSetting(${1:filterIndex}, ${2:isChecked})$0",
		},
		{
			"trigger": "C_MountJournal.SetIsFavorite\t(mountIndex, isFavorite)",
			"contents": "C_MountJournal.SetIsFavorite(${1:mountIndex}, ${2:isFavorite})$0",
		},
		{
			"trigger": "C_MountJournal.SetSearch\t(\"searchValue\")",
			"contents": "C_MountJournal.SetSearch(\"${1:searchValue}\")$0",
		},
		{
			"trigger": "C_MountJournal.SetSourceFilter\t(filterIndex, isChecked)",
			"contents": "C_MountJournal.SetSourceFilter(${1:filterIndex}, ${2:isChecked})$0",
		},
		{
			"trigger": "C_MountJournal.SummonByID\t(mountID)",
			"contents": "C_MountJournal.SummonByID(${1:mountID})$0",
		},
		{
			"trigger": "C_MythicPlus.GetCurrentAffixes\t()",
			"contents": "C_MythicPlus.GetCurrentAffixes()$0",
		},
		{
			"trigger": "C_MythicPlus.GetCurrentSeason\t()",
			"contents": "C_MythicPlus.GetCurrentSeason()$0",
		},
		{
			"trigger": "C_MythicPlus.GetLastWeeklyBestInformation\t()",
			"contents": "C_MythicPlus.GetLastWeeklyBestInformation()$0",
		},
		{
			"trigger": "C_MythicPlus.GetOwnedKeystoneChallengeMapID\t()",
			"contents": "C_MythicPlus.GetOwnedKeystoneChallengeMapID()$0",
		},
		{
			"trigger": "C_MythicPlus.GetOwnedKeystoneLevel\t()",
			"contents": "C_MythicPlus.GetOwnedKeystoneLevel()$0",
		},
		{
			"trigger": "C_MythicPlus.GetRewardLevelForDifficultyLevel\t(difficultyLevel)",
			"contents": "C_MythicPlus.GetRewardLevelForDifficultyLevel(${1:difficultyLevel})$0",
		},
		{
			"trigger": "C_MythicPlus.GetRewardLevelFromKeystoneLevel\t(keystoneLevel)",
			"contents": "C_MythicPlus.GetRewardLevelFromKeystoneLevel(${1:keystoneLevel})$0",
		},
		{
			"trigger": "C_MythicPlus.GetSeasonBestForMap\t(mapChallengeModeID)",
			"contents": "C_MythicPlus.GetSeasonBestForMap(${1:mapChallengeModeID})$0",
		},
		{
			"trigger": "C_MythicPlus.GetWeeklyBestForMap\t(mapChallengeModeID)",
			"contents": "C_MythicPlus.GetWeeklyBestForMap(${1:mapChallengeModeID})$0",
		},
		{
			"trigger": "C_MythicPlus.GetWeeklyChestRewardLevel\t()",
			"contents": "C_MythicPlus.GetWeeklyChestRewardLevel()$0",
		},
		{
			"trigger": "C_MythicPlus.IsMythicPlusActive\t()",
			"contents": "C_MythicPlus.IsMythicPlusActive()$0",
		},
		{
			"trigger": "C_MythicPlus.IsWeeklyRewardAvailable\t()",
			"contents": "C_MythicPlus.IsWeeklyRewardAvailable()$0",
		},
		{
			"trigger": "C_MythicPlus.RequestCurrentAffixes\t()",
			"contents": "C_MythicPlus.RequestCurrentAffixes()$0",
		},
		{
			"trigger": "C_MythicPlus.RequestMapInfo\t()",
			"contents": "C_MythicPlus.RequestMapInfo()$0",
		},
		{
			"trigger": "C_MythicPlus.RequestRewards\t()",
			"contents": "C_MythicPlus.RequestRewards()$0",
		},
		{
			"trigger": "C_PaperDollInfo.GetArmorEffectiveness\t(armor, attackerLevel)",
			"contents": "C_PaperDollInfo.GetArmorEffectiveness(${1:armor}, ${2:attackerLevel})$0",
		},
		{
			"trigger": "C_PaperDollInfo.GetArmorEffectivenessAgainstTarget\t(armor)",
			"contents": "C_PaperDollInfo.GetArmorEffectivenessAgainstTarget(${1:armor})$0",
		},
		{
			"trigger": "C_PaperDollInfo.GetInspectAzeriteItemEmpoweredChoices\t(\"unit\", equipmentSlotIndex)",
			"contents": "C_PaperDollInfo.GetInspectAzeriteItemEmpoweredChoices(\"${1:unit}\", ${2:equipmentSlotIndex})$0",
		},
		{
			"trigger": "C_PaperDollInfo.GetMinItemLevel\t()",
			"contents": "C_PaperDollInfo.GetMinItemLevel()$0",
		},
		{
			"trigger": "C_PaperDollInfo.GetStaggerPercentage\t(\"unit\")",
			"contents": "C_PaperDollInfo.GetStaggerPercentage(\"${1:unit}\")$0",
		},
		{
			"trigger": "C_PaperDollInfo.OffhandHasShield\t()",
			"contents": "C_PaperDollInfo.OffhandHasShield()$0",
		},
		{
			"trigger": "C_PaperDollInfo.OffhandHasWeapon\t()",
			"contents": "C_PaperDollInfo.OffhandHasWeapon()$0",
		},
		{
			"trigger": "C_PartyInfo.GetActiveCategories\t()",
			"contents": "C_PartyInfo.GetActiveCategories()$0",
		},
		{
			"trigger": "C_PartyInfo.GetInviteConfirmationInvalidQueues\t(\"inviteGUID\")",
			"contents": "C_PartyInfo.GetInviteConfirmationInvalidQueues(\"${1:inviteGUID}\")$0",
		},
		{
			"trigger": "C_PartyInfo.GetInviteReferralInfo\t(\"inviteGUID\")",
			"contents": "C_PartyInfo.GetInviteReferralInfo(\"${1:inviteGUID}\")$0",
		},
		{
			"trigger": "C_PartyPose.GetPartyPoseInfoByMapID\t(mapID)",
			"contents": "C_PartyPose.GetPartyPoseInfoByMapID(${1:mapID})$0",
		},
		{
			"trigger": "C_PetInfo.GetPetTamersForMap\t(uiMapID)",
			"contents": "C_PetInfo.GetPetTamersForMap(${1:uiMapID})$0",
		},
		{
			"trigger": "C_PetJournal.GetDisplayIDByIndex\t(speciesID, index)",
			"contents": "C_PetJournal.GetDisplayIDByIndex(${1:speciesID}, ${2:index})$0",
		},
		{
			"trigger": "C_PetJournal.GetDisplayProbabilityByIndex\t(speciesID, index)",
			"contents": "C_PetJournal.GetDisplayProbabilityByIndex(${1:speciesID}, ${2:index})$0",
		},
		{
			"trigger": "C_PetJournal.GetNumDisplays\t(speciesID)",
			"contents": "C_PetJournal.GetNumDisplays(${1:speciesID})$0",
		},
		{
			"trigger": "C_PetJournal.PetUsesRandomDisplay\t(speciesID)",
			"contents": "C_PetJournal.PetUsesRandomDisplay(${1:speciesID})$0",
		},
		{
			"trigger": "C_PlayerInfo.GetClass\t(playerLocation)",
			"contents": "C_PlayerInfo.GetClass(${1:playerLocation})$0",
		},
		{
			"trigger": "C_PlayerInfo.GetName\t(playerLocation)",
			"contents": "C_PlayerInfo.GetName(${1:playerLocation})$0",
		},
		{
			"trigger": "C_PlayerInfo.GetRace\t(playerLocation)",
			"contents": "C_PlayerInfo.GetRace(${1:playerLocation})$0",
		},
		{
			"trigger": "C_PlayerInfo.GetSex\t(playerLocation)",
			"contents": "C_PlayerInfo.GetSex(${1:playerLocation})$0",
		},
		{
			"trigger": "C_PlayerInfo.GUIDIsPlayer\t(\"guid\")",
			"contents": "C_PlayerInfo.GUIDIsPlayer(\"${1:guid}\")$0",
		},
		{
			"trigger": "C_PlayerInfo.IsConnected\t([playerLocation])",
			"contents": "C_PlayerInfo.IsConnected([${1:playerLocation}])$0",
		},
		{
			"trigger": "C_PlayerInfo.UnitIsSameServer\t(playerLocation)",
			"contents": "C_PlayerInfo.UnitIsSameServer(${1:playerLocation})$0",
		},
		{
			"trigger": "C_PvP.CanToggleWarMode\t(toggle)",
			"contents": "C_PvP.CanToggleWarMode(${1:toggle})$0",
		},
		{
			"trigger": "C_PvP.CanToggleWarModeInArea\t()",
			"contents": "C_PvP.CanToggleWarModeInArea()$0",
		},
		{
			"trigger": "C_PvP.GetActiveBrawlInfo\t()",
			"contents": "C_PvP.GetActiveBrawlInfo()$0",
		},
		{
			"trigger": "C_PvP.GetArenaCrowdControlInfo\t(\"playerToken\")",
			"contents": "C_PvP.GetArenaCrowdControlInfo(\"${1:playerToken}\")$0",
		},
		{
			"trigger": "C_PvP.GetArenaRewards\t(teamSize)",
			"contents": "C_PvP.GetArenaRewards(${1:teamSize})$0",
		},
		{
			"trigger": "C_PvP.GetArenaSkirmishRewards\t()",
			"contents": "C_PvP.GetArenaSkirmishRewards()$0",
		},
		{
			"trigger": "C_PvP.GetAvailableBrawlInfo\t()",
			"contents": "C_PvP.GetAvailableBrawlInfo()$0",
		},
		{
			"trigger": "C_PvP.GetBrawlRewards\t(brawlType)",
			"contents": "C_PvP.GetBrawlRewards(${1:brawlType})$0",
		},
		{
			"trigger": "C_PvP.GetGlobalPvpScalingInfoForSpecID\t(specializationID)",
			"contents": "C_PvP.GetGlobalPvpScalingInfoForSpecID(${1:specializationID})$0",
		},
		{
			"trigger": "C_PvP.GetHonorRewardInfo\t(honorLevel)",
			"contents": "C_PvP.GetHonorRewardInfo(${1:honorLevel})$0",
		},
		{
			"trigger": "C_PvP.GetNextHonorLevelForReward\t(honorLevel)",
			"contents": "C_PvP.GetNextHonorLevelForReward(${1:honorLevel})$0",
		},
		{
			"trigger": "C_PvP.GetOutdoorPvPWaitTime\t(uiMapID)",
			"contents": "C_PvP.GetOutdoorPvPWaitTime(${1:uiMapID})$0",
		},
		{
			"trigger": "C_PvP.GetPvpTierInfo\t(tierID)",
			"contents": "C_PvP.GetPvpTierInfo(${1:tierID})$0",
		},
		{
			"trigger": "C_PvP.GetRandomBGInfo\t()",
			"contents": "C_PvP.GetRandomBGInfo()$0",
		},
		{
			"trigger": "C_PvP.GetRandomBGRewards\t()",
			"contents": "C_PvP.GetRandomBGRewards()$0",
		},
		{
			"trigger": "C_PvP.GetRandomEpicBGInfo\t()",
			"contents": "C_PvP.GetRandomEpicBGInfo()$0",
		},
		{
			"trigger": "C_PvP.GetRandomEpicBGRewards\t()",
			"contents": "C_PvP.GetRandomEpicBGRewards()$0",
		},
		{
			"trigger": "C_PvP.GetRatedBGRewards\t()",
			"contents": "C_PvP.GetRatedBGRewards()$0",
		},
		{
			"trigger": "C_PvP.GetRewardItemLevelsByTierEnum\t(pvpTierEnum)",
			"contents": "C_PvP.GetRewardItemLevelsByTierEnum(${1:pvpTierEnum})$0",
		},
		{
			"trigger": "C_PvP.GetSeasonBestInfo\t()",
			"contents": "C_PvP.GetSeasonBestInfo()$0",
		},
		{
			"trigger": "C_PvP.GetSkirmishInfo\t(pvpBracket)",
			"contents": "C_PvP.GetSkirmishInfo(${1:pvpBracket})$0",
		},
		{
			"trigger": "C_PvP.GetWarModeRewardBonus\t()",
			"contents": "C_PvP.GetWarModeRewardBonus()$0",
		},
		{
			"trigger": "C_PvP.GetWarModeRewardBonusDefault\t()",
			"contents": "C_PvP.GetWarModeRewardBonusDefault()$0",
		},
		{
			"trigger": "C_PvP.GetWeeklyChestInfo\t()",
			"contents": "C_PvP.GetWeeklyChestInfo()$0",
		},
		{
			"trigger": "C_PvP.HasArenaSkirmishWinToday\t()",
			"contents": "C_PvP.HasArenaSkirmishWinToday()$0",
		},
		{
			"trigger": "C_PvP.IsActiveBattlefield\t()",
			"contents": "C_PvP.IsActiveBattlefield()$0",
		},
		{
			"trigger": "C_PvP.IsBattlegroundEnlistmentBonusActive\t()",
			"contents": "C_PvP.IsBattlegroundEnlistmentBonusActive()$0",
		},
		{
			"trigger": "C_PvP.IsInBrawl\t()",
			"contents": "C_PvP.IsInBrawl()$0",
		},
		{
			"trigger": "C_PvP.IsPVPMap\t()",
			"contents": "C_PvP.IsPVPMap()$0",
		},
		{
			"trigger": "C_PvP.IsWarModeActive\t()",
			"contents": "C_PvP.IsWarModeActive()$0",
		},
		{
			"trigger": "C_PvP.IsWarModeDesired\t()",
			"contents": "C_PvP.IsWarModeDesired()$0",
		},
		{
			"trigger": "C_PvP.IsWarModeFeatureEnabled\t()",
			"contents": "C_PvP.IsWarModeFeatureEnabled()$0",
		},
		{
			"trigger": "C_PvP.JoinBrawl\t()",
			"contents": "C_PvP.JoinBrawl()$0",
		},
		{
			"trigger": "C_PvP.RequestCrowdControlSpell\t(\"playerToken\")",
			"contents": "C_PvP.RequestCrowdControlSpell(\"${1:playerToken}\")$0",
		},
		{
			"trigger": "C_PvP.SetWarModeDesired\t(warModeDesired)",
			"contents": "C_PvP.SetWarModeDesired(${1:warModeDesired})$0",
		},
		{
			"trigger": "C_PvP.ToggleWarMode\t()",
			"contents": "C_PvP.ToggleWarMode()$0",
		},
		{
			"trigger": "C_QuestChoice.GetQuestChoiceInfo\t()",
			"contents": "C_QuestChoice.GetQuestChoiceInfo()$0",
		},
		{
			"trigger": "C_QuestChoice.GetQuestChoiceOptionInfo\t(optionIndex)",
			"contents": "C_QuestChoice.GetQuestChoiceOptionInfo(${1:optionIndex})$0",
		},
		{
			"trigger": "C_QuestLine.GetAvailableQuestLines\t(uiMapID)",
			"contents": "C_QuestLine.GetAvailableQuestLines(${1:uiMapID})$0",
		},
		{
			"trigger": "C_QuestLine.GetQuestLineInfo\t(questID, uiMapID)",
			"contents": "C_QuestLine.GetQuestLineInfo(${1:questID}, ${2:uiMapID})$0",
		},
		{
			"trigger": "C_QuestLine.GetQuestLineQuests\t(questLineID)",
			"contents": "C_QuestLine.GetQuestLineQuests(${1:questLineID})$0",
		},
		{
			"trigger": "C_QuestLine.RequestQuestLinesForMap\t(uiMapID)",
			"contents": "C_QuestLine.RequestQuestLinesForMap(${1:uiMapID})$0",
		},
		{
			"trigger": "C_QuestLog.GetMapForQuestPOIs\t()",
			"contents": "C_QuestLog.GetMapForQuestPOIs()$0",
		},
		{
			"trigger": "C_QuestLog.GetMaxNumQuests\t()",
			"contents": "C_QuestLog.GetMaxNumQuests()$0",
		},
		{
			"trigger": "C_QuestLog.GetMaxNumQuestsCanAccept\t()",
			"contents": "C_QuestLog.GetMaxNumQuestsCanAccept()$0",
		},
		{
			"trigger": "C_QuestLog.GetNumQuestObjectives\t(questID)",
			"contents": "C_QuestLog.GetNumQuestObjectives(${1:questID})$0",
		},
		{
			"trigger": "C_QuestLog.GetQuestInfo\t(questID)",
			"contents": "C_QuestLog.GetQuestInfo(${1:questID})$0",
		},
		{
			"trigger": "C_QuestLog.GetQuestObjectives\t(questID)",
			"contents": "C_QuestLog.GetQuestObjectives(${1:questID})$0",
		},
		{
			"trigger": "C_QuestLog.GetQuestsOnMap\t(uiMapID)",
			"contents": "C_QuestLog.GetQuestsOnMap(${1:uiMapID})$0",
		},
		{
			"trigger": "C_QuestLog.GetZoneStoryInfo\t(uiMapID)",
			"contents": "C_QuestLog.GetZoneStoryInfo(${1:uiMapID})$0",
		},
		{
			"trigger": "C_QuestLog.IsLegendaryQuest\t(questID)",
			"contents": "C_QuestLog.IsLegendaryQuest(${1:questID})$0",
		},
		{
			"trigger": "C_QuestLog.IsOnQuest\t(questID)",
			"contents": "C_QuestLog.IsOnQuest(${1:questID})$0",
		},
		{
			"trigger": "C_QuestLog.QuestHasWarModeBonus\t(questID)",
			"contents": "C_QuestLog.QuestHasWarModeBonus(${1:questID})$0",
		},
		{
			"trigger": "C_QuestLog.SetMapForQuestPOIs\t(uiMapID)",
			"contents": "C_QuestLog.SetMapForQuestPOIs(${1:uiMapID})$0",
		},
		{
			"trigger": "C_QuestLog.ShouldShowQuestRewards\t(questID)",
			"contents": "C_QuestLog.ShouldShowQuestRewards(${1:questID})$0",
		},
		{
			"trigger": "C_ReportPlayer.CanReportPlayer\t(playerLocation)",
			"contents": "C_ReportPlayer.CanReportPlayer(${1:playerLocation})$0",
		},
		{
			"trigger": "C_ReportPlayer.ReportPlayer\t(\"complaintType\", [playerLocation, [\"comment\"]])",
			"contents": "C_ReportPlayer.ReportPlayer(\"${1:complaintType}\", [${2:playerLocation}, [\"${3:comment}\"]])$0",
		},
		{
			"trigger": "C_ReportSystem.CanReportPlayer\t(playerLocation)",
			"contents": "C_ReportSystem.CanReportPlayer(${1:playerLocation})$0",
		},
		{
			"trigger": "C_ReportSystem.InitiateReportPlayer\t(\"complaintType\", [playerLocation])",
			"contents": "C_ReportSystem.InitiateReportPlayer(\"${1:complaintType}\", [${2:playerLocation}])$0",
		},
		{
			"trigger": "C_ReportSystem.ReportServerLag\t()",
			"contents": "C_ReportSystem.ReportServerLag()$0",
		},
		{
			"trigger": "C_ReportSystem.SendReportPlayer\t(token, [\"comment\"])",
			"contents": "C_ReportSystem.SendReportPlayer(${1:token}, [\"${2:comment}\"])$0",
		},
		{
			"trigger": "C_ReportSystem.SetPendingReportPetTarget\t([\"target\"])",
			"contents": "C_ReportSystem.SetPendingReportPetTarget([\"${1:target}\"])$0",
		},
		{
			"trigger": "C_ReportSystem.SetPendingReportTarget\t([\"target\"])",
			"contents": "C_ReportSystem.SetPendingReportTarget([\"${1:target}\"])$0",
		},
		{
			"trigger": "C_ReportSystem.SetPendingReportTargetByGuid\t([\"guid\"])",
			"contents": "C_ReportSystem.SetPendingReportTargetByGuid([\"${1:guid}\"])$0",
		},
		{
			"trigger": "C_Reputation.GetFactionParagonInfo\t(factionID)",
			"contents": "C_Reputation.GetFactionParagonInfo(${1:factionID})$0",
		},
		{
			"trigger": "C_Reputation.IsFactionParagon\t(factionID)",
			"contents": "C_Reputation.IsFactionParagon(${1:factionID})$0",
		},
		{
			"trigger": "C_Reputation.RequestFactionParagonPreloadRewardData\t(factionID)",
			"contents": "C_Reputation.RequestFactionParagonPreloadRewardData(${1:factionID})$0",
		},
		{
			"trigger": "C_ResearchInfo.GetDigSitesForMap\t(uiMapID)",
			"contents": "C_ResearchInfo.GetDigSitesForMap(${1:uiMapID})$0",
		},
		{
			"trigger": "C_ScrappingMachineUI.CloseScrappingMachine\t()",
			"contents": "C_ScrappingMachineUI.CloseScrappingMachine()$0",
		},
		{
			"trigger": "C_ScrappingMachineUI.DropPendingScrapItemFromCursor\t(index)",
			"contents": "C_ScrappingMachineUI.DropPendingScrapItemFromCursor(${1:index})$0",
		},
		{
			"trigger": "C_ScrappingMachineUI.GetCurrentPendingScrapItemLocationByIndex\t(index)",
			"contents": "C_ScrappingMachineUI.GetCurrentPendingScrapItemLocationByIndex(${1:index})$0",
		},
		{
			"trigger": "C_ScrappingMachineUI.GetScrappingMachineName\t()",
			"contents": "C_ScrappingMachineUI.GetScrappingMachineName()$0",
		},
		{
			"trigger": "C_ScrappingMachineUI.GetScrapSpellID\t()",
			"contents": "C_ScrappingMachineUI.GetScrapSpellID()$0",
		},
		{
			"trigger": "C_ScrappingMachineUI.HasScrappableItems\t()",
			"contents": "C_ScrappingMachineUI.HasScrappableItems()$0",
		},
		{
			"trigger": "C_ScrappingMachineUI.RemoveAllScrapItems\t()",
			"contents": "C_ScrappingMachineUI.RemoveAllScrapItems()$0",
		},
		{
			"trigger": "C_ScrappingMachineUI.RemoveCurrentScrappingItem\t()",
			"contents": "C_ScrappingMachineUI.RemoveCurrentScrappingItem()$0",
		},
		{
			"trigger": "C_ScrappingMachineUI.RemoveItemToScrap\t(index)",
			"contents": "C_ScrappingMachineUI.RemoveItemToScrap(${1:index})$0",
		},
		{
			"trigger": "C_ScrappingMachineUI.ScrapItems\t()",
			"contents": "C_ScrappingMachineUI.ScrapItems()$0",
		},
		{
			"trigger": "C_ScrappingMachineUI.SetScrappingMachine\t(\"gameObject\")",
			"contents": "C_ScrappingMachineUI.SetScrappingMachine(\"${1:gameObject}\")$0",
		},
		{
			"trigger": "C_ScrappingMachineUI.ValidateScrappingList\t()",
			"contents": "C_ScrappingMachineUI.ValidateScrappingList()$0",
		},
		{
			"trigger": "C_Social.GetLastAchievement\t()",
			"contents": "C_Social.GetLastAchievement()$0",
		},
		{
			"trigger": "C_Social.GetLastItem\t()",
			"contents": "C_Social.GetLastItem()$0",
		},
		{
			"trigger": "C_Social.GetLastScreenshotIndex\t()",
			"contents": "C_Social.GetLastScreenshotIndex()$0",
		},
		{
			"trigger": "C_Social.GetMaxTweetLength\t()",
			"contents": "C_Social.GetMaxTweetLength()$0",
		},
		{
			"trigger": "C_Social.GetScreenshotInfoByIndex\t(index)",
			"contents": "C_Social.GetScreenshotInfoByIndex(${1:index})$0",
		},
		{
			"trigger": "C_Social.GetTweetLength\t(\"tweetText\")",
			"contents": "C_Social.GetTweetLength(\"${1:tweetText}\")$0",
		},
		{
			"trigger": "C_Social.IsSocialEnabled\t()",
			"contents": "C_Social.IsSocialEnabled()$0",
		},
		{
			"trigger": "C_Social.TwitterCheckStatus\t()",
			"contents": "C_Social.TwitterCheckStatus()$0",
		},
		{
			"trigger": "C_Social.TwitterConnect\t()",
			"contents": "C_Social.TwitterConnect()$0",
		},
		{
			"trigger": "C_Social.TwitterDisconnect\t()",
			"contents": "C_Social.TwitterDisconnect()$0",
		},
		{
			"trigger": "C_Social.TwitterGetMSTillCanPost\t()",
			"contents": "C_Social.TwitterGetMSTillCanPost()$0",
		},
		{
			"trigger": "C_Social.TwitterPostMessage\t(\"message\")",
			"contents": "C_Social.TwitterPostMessage(\"${1:message}\")$0",
		},
		{
			"trigger": "C_SocialQueue.GetAllGroups\t(allowNonJoinable, allowNonQueuedGroups)",
			"contents": "C_SocialQueue.GetAllGroups(${1:allowNonJoinable}, ${2:allowNonQueuedGroups})$0",
		},
		{
			"trigger": "C_SocialQueue.GetConfig\t()",
			"contents": "C_SocialQueue.GetConfig()$0",
		},
		{
			"trigger": "C_SocialQueue.GetGroupForPlayer\t(\"playerGUID\")",
			"contents": "C_SocialQueue.GetGroupForPlayer(\"${1:playerGUID}\")$0",
		},
		{
			"trigger": "C_SocialQueue.GetGroupInfo\t(\"groupGUID\")",
			"contents": "C_SocialQueue.GetGroupInfo(\"${1:groupGUID}\")$0",
		},
		{
			"trigger": "C_SocialQueue.GetGroupMembers\t(\"groupGUID\")",
			"contents": "C_SocialQueue.GetGroupMembers(\"${1:groupGUID}\")$0",
		},
		{
			"trigger": "C_SocialQueue.GetGroupQueues\t(\"groupGUID\")",
			"contents": "C_SocialQueue.GetGroupQueues(\"${1:groupGUID}\")$0",
		},
		{
			"trigger": "C_SocialQueue.RequestToJoin\t(\"groupGUID\", applyAsTank, applyAsHealer, applyAsDamage)",
			"contents": "C_SocialQueue.RequestToJoin(\"${1:groupGUID}\", ${2:applyAsTank}, ${3:applyAsHealer}, ${4:applyAsDamage})$0",
		},
		{
			"trigger": "C_SocialQueue.SignalToastDisplayed\t(\"groupGUID\", priority)",
			"contents": "C_SocialQueue.SignalToastDisplayed(\"${1:groupGUID}\", ${2:priority})$0",
		},
		{
			"trigger": "C_SpecializationInfo.GetAllSelectedPvpTalentIDs\t()",
			"contents": "C_SpecializationInfo.GetAllSelectedPvpTalentIDs()$0",
		},
		{
			"trigger": "C_SpecializationInfo.GetInspectSelectedPvpTalent\t(\"inspectedUnit\", talentIndex)",
			"contents": "C_SpecializationInfo.GetInspectSelectedPvpTalent(\"${1:inspectedUnit}\", ${2:talentIndex})$0",
		},
		{
			"trigger": "C_SpecializationInfo.GetPvpTalentAlertStatus\t()",
			"contents": "C_SpecializationInfo.GetPvpTalentAlertStatus()$0",
		},
		{
			"trigger": "C_SpecializationInfo.GetPvpTalentSlotInfo\t(talentIndex)",
			"contents": "C_SpecializationInfo.GetPvpTalentSlotInfo(${1:talentIndex})$0",
		},
		{
			"trigger": "C_SpecializationInfo.GetPvpTalentSlotUnlockLevel\t(talentIndex)",
			"contents": "C_SpecializationInfo.GetPvpTalentSlotUnlockLevel(${1:talentIndex})$0",
		},
		{
			"trigger": "C_SpecializationInfo.GetPvpTalentUnlockLevel\t(talentID)",
			"contents": "C_SpecializationInfo.GetPvpTalentUnlockLevel(${1:talentID})$0",
		},
		{
			"trigger": "C_SpecializationInfo.GetSpellsDisplay\t(specializationID)",
			"contents": "C_SpecializationInfo.GetSpellsDisplay(${1:specializationID})$0",
		},
		{
			"trigger": "C_SpecializationInfo.IsInitialized\t()",
			"contents": "C_SpecializationInfo.IsInitialized()$0",
		},
		{
			"trigger": "C_SpecializationInfo.IsPvpTalentLocked\t(talentID)",
			"contents": "C_SpecializationInfo.IsPvpTalentLocked(${1:talentID})$0",
		},
		{
			"trigger": "C_SpecializationInfo.SetPvpTalentLocked\t(talentID, locked)",
			"contents": "C_SpecializationInfo.SetPvpTalentLocked(${1:talentID}, ${2:locked})$0",
		},
		{
			"trigger": "C_Spell.DoesSpellExist\t(spellID)",
			"contents": "C_Spell.DoesSpellExist(${1:spellID})$0",
		},
		{
			"trigger": "C_Spell.IsSpellDataCached\t(spellID)",
			"contents": "C_Spell.IsSpellDataCached(${1:spellID})$0",
		},
		{
			"trigger": "C_Spell.RequestLoadSpellData\t(spellID)",
			"contents": "C_Spell.RequestLoadSpellData(${1:spellID})$0",
		},
		{
			"trigger": "C_StorePublic.DoesGroupHavePurchaseableProducts\t(groupID)",
			"contents": "C_StorePublic.DoesGroupHavePurchaseableProducts(${1:groupID})$0",
		},
		{
			"trigger": "C_StorePublic.IsDisabledByParentalControls\t()",
			"contents": "C_StorePublic.IsDisabledByParentalControls()$0",
		},
		{
			"trigger": "C_StorePublic.IsEnabled\t()",
			"contents": "C_StorePublic.IsEnabled()$0",
		},
		{
			"trigger": "C_SummonInfo.CancelSummon\t()",
			"contents": "C_SummonInfo.CancelSummon()$0",
		},
		{
			"trigger": "C_SummonInfo.ConfirmSummon\t()",
			"contents": "C_SummonInfo.ConfirmSummon()$0",
		},
		{
			"trigger": "C_SummonInfo.GetSummonConfirmAreaName\t()",
			"contents": "C_SummonInfo.GetSummonConfirmAreaName()$0",
		},
		{
			"trigger": "C_SummonInfo.GetSummonConfirmSummoner\t()",
			"contents": "C_SummonInfo.GetSummonConfirmSummoner()$0",
		},
		{
			"trigger": "C_SummonInfo.GetSummonConfirmTimeLeft\t()",
			"contents": "C_SummonInfo.GetSummonConfirmTimeLeft()$0",
		},
		{
			"trigger": "C_SummonInfo.GetSummonReason\t()",
			"contents": "C_SummonInfo.GetSummonReason()$0",
		},
		{
			"trigger": "C_SummonInfo.IsSummonSkippingStartExperience\t()",
			"contents": "C_SummonInfo.IsSummonSkippingStartExperience()$0",
		},
		{
			"trigger": "C_TaskQuest.DoesMapShowTaskQuestObjectives\t(uiMapID)",
			"contents": "C_TaskQuest.DoesMapShowTaskQuestObjectives(${1:uiMapID})$0",
		},
		{
			"trigger": "C_TaskQuest.GetDistanceSqToQuest\t(questID)",
			"contents": "C_TaskQuest.GetDistanceSqToQuest(${1:questID})$0",
		},
		{
			"trigger": "C_TaskQuest.GetQuestInfoByQuestID\t(questID)",
			"contents": "C_TaskQuest.GetQuestInfoByQuestID(${1:questID})$0",
		},
		{
			"trigger": "C_TaskQuest.GetQuestLocation\t(questID, uiMapID)",
			"contents": "C_TaskQuest.GetQuestLocation(${1:questID}, ${2:uiMapID})$0",
		},
		{
			"trigger": "C_TaskQuest.GetQuestProgressBarInfo\t(questID)",
			"contents": "C_TaskQuest.GetQuestProgressBarInfo(${1:questID})$0",
		},
		{
			"trigger": "C_TaskQuest.GetQuestsForPlayerByMapID\t(uiMapID)",
			"contents": "C_TaskQuest.GetQuestsForPlayerByMapID(${1:uiMapID})$0",
		},
		{
			"trigger": "C_TaskQuest.GetQuestTimeLeftMinutes\t(questID)",
			"contents": "C_TaskQuest.GetQuestTimeLeftMinutes(${1:questID})$0",
		},
		{
			"trigger": "C_TaskQuest.GetQuestTimeLeftSeconds\t(questID)",
			"contents": "C_TaskQuest.GetQuestTimeLeftSeconds(${1:questID})$0",
		},
		{
			"trigger": "C_TaskQuest.GetQuestZoneID\t(questID)",
			"contents": "C_TaskQuest.GetQuestZoneID(${1:questID})$0",
		},
		{
			"trigger": "C_TaskQuest.IsActive\t(questID)",
			"contents": "C_TaskQuest.IsActive(${1:questID})$0",
		},
		{
			"trigger": "C_TaskQuest.RequestPreloadRewardData\t(questID)",
			"contents": "C_TaskQuest.RequestPreloadRewardData(${1:questID})$0",
		},
		{
			"trigger": "C_TaxiMap.GetAllTaxiNodes\t(uiMapID)",
			"contents": "C_TaxiMap.GetAllTaxiNodes(${1:uiMapID})$0",
		},
		{
			"trigger": "C_TaxiMap.GetTaxiNodesForMap\t(uiMapID)",
			"contents": "C_TaxiMap.GetTaxiNodesForMap(${1:uiMapID})$0",
		},
		{
			"trigger": "C_TaxiMap.ShouldMapShowTaxiNodes\t(uiMapID)",
			"contents": "C_TaxiMap.ShouldMapShowTaxiNodes(${1:uiMapID})$0",
		},
		{
			"trigger": "C_Texture.GetAtlasInfo\t(\"atlas\")",
			"contents": "C_Texture.GetAtlasInfo(\"${1:atlas}\")$0",
		},
		{
			"trigger": "C_ToyBoxInfo.ClearFanfare\t(itemID)",
			"contents": "C_ToyBoxInfo.ClearFanfare(${1:itemID})$0",
		},
		{
			"trigger": "C_ToyBoxInfo.NeedsFanfare\t(itemID)",
			"contents": "C_ToyBoxInfo.NeedsFanfare(${1:itemID})$0",
		},
		{
			"trigger": "C_TradeSkillUI.GetAllProfessionTradeSkillLines\t()",
			"contents": "C_TradeSkillUI.GetAllProfessionTradeSkillLines()$0",
		},
		{
			"trigger": "C_TradeSkillUI.GetTradeSkillDisplayName\t(skillLineID)",
			"contents": "C_TradeSkillUI.GetTradeSkillDisplayName(${1:skillLineID})$0",
		},
		{
			"trigger": "C_TradeSkillUI.GetTradeSkillLine\t()",
			"contents": "C_TradeSkillUI.GetTradeSkillLine()$0",
		},
		{
			"trigger": "C_TradeSkillUI.GetTradeSkillLineInfoByID\t(skillLineID)",
			"contents": "C_TradeSkillUI.GetTradeSkillLineInfoByID(${1:skillLineID})$0",
		},
		{
			"trigger": "C_TradeSkillUI.IsEmptySkillLineCategory\t(categoryID)",
			"contents": "C_TradeSkillUI.IsEmptySkillLineCategory(${1:categoryID})$0",
		},
		{
			"trigger": "C_Transmog.GetCreatureDisplayIDForSource\t(itemModifiedAppearanceID)",
			"contents": "C_Transmog.GetCreatureDisplayIDForSource(${1:itemModifiedAppearanceID})$0",
		},
		{
			"trigger": "C_Transmog.GetSlotForInventoryType\t(inventoryType)",
			"contents": "C_Transmog.GetSlotForInventoryType(${1:inventoryType})$0",
		},
		{
			"trigger": "C_TransmogCollection.GetAppearanceSources\t(appearanceID)",
			"contents": "C_TransmogCollection.GetAppearanceSources(${1:appearanceID})$0",
		},
		{
			"trigger": "C_TransmogCollection.GetSourceIcon\t(itemModifiedAppearanceID)",
			"contents": "C_TransmogCollection.GetSourceIcon(${1:itemModifiedAppearanceID})$0",
		},
		{
			"trigger": "C_TransmogCollection.GetSourceInfo\t(sourceID)",
			"contents": "C_TransmogCollection.GetSourceInfo(${1:sourceID})$0",
		},
		{
			"trigger": "C_TransmogSets.ClearLatestSource\t()",
			"contents": "C_TransmogSets.ClearLatestSource()$0",
		},
		{
			"trigger": "C_TransmogSets.ClearNewSource\t(sourceID)",
			"contents": "C_TransmogSets.ClearNewSource(${1:sourceID})$0",
		},
		{
			"trigger": "C_TransmogSets.ClearSetNewSourcesForSlot\t(transmogSetID, slot)",
			"contents": "C_TransmogSets.ClearSetNewSourcesForSlot(${1:transmogSetID}, ${2:slot})$0",
		},
		{
			"trigger": "C_TransmogSets.GetAllSourceIDs\t(transmogSetID)",
			"contents": "C_TransmogSets.GetAllSourceIDs(${1:transmogSetID})$0",
		},
		{
			"trigger": "C_TransmogSets.GetBaseSetsCounts\t()",
			"contents": "C_TransmogSets.GetBaseSetsCounts()$0",
		},
		{
			"trigger": "C_TransmogSets.GetBaseSetsFilter\t(index)",
			"contents": "C_TransmogSets.GetBaseSetsFilter(${1:index})$0",
		},
		{
			"trigger": "C_TransmogSets.GetCameraIDs\t()",
			"contents": "C_TransmogSets.GetCameraIDs()$0",
		},
		{
			"trigger": "C_TransmogSets.GetIsFavorite\t(transmogSetID)",
			"contents": "C_TransmogSets.GetIsFavorite(${1:transmogSetID})$0",
		},
		{
			"trigger": "C_TransmogSets.GetLatestSource\t()",
			"contents": "C_TransmogSets.GetLatestSource()$0",
		},
		{
			"trigger": "C_TransmogSets.GetSetNewSources\t(transmogSetID)",
			"contents": "C_TransmogSets.GetSetNewSources(${1:transmogSetID})$0",
		},
		{
			"trigger": "C_TransmogSets.GetSetsContainingSourceID\t(sourceID)",
			"contents": "C_TransmogSets.GetSetsContainingSourceID(${1:sourceID})$0",
		},
		{
			"trigger": "C_TransmogSets.GetSourceIDsForSlot\t(transmogSetID, slot)",
			"contents": "C_TransmogSets.GetSourceIDsForSlot(${1:transmogSetID}, ${2:slot})$0",
		},
		{
			"trigger": "C_TransmogSets.GetSourcesForSlot\t(transmogSetID, slot)",
			"contents": "C_TransmogSets.GetSourcesForSlot(${1:transmogSetID}, ${2:slot})$0",
		},
		{
			"trigger": "C_TransmogSets.HasUsableSets\t()",
			"contents": "C_TransmogSets.HasUsableSets()$0",
		},
		{
			"trigger": "C_TransmogSets.IsBaseSetCollected\t(transmogSetID)",
			"contents": "C_TransmogSets.IsBaseSetCollected(${1:transmogSetID})$0",
		},
		{
			"trigger": "C_TransmogSets.IsNewSource\t(sourceID)",
			"contents": "C_TransmogSets.IsNewSource(${1:sourceID})$0",
		},
		{
			"trigger": "C_TransmogSets.SetBaseSetsFilter\t(index, isChecked)",
			"contents": "C_TransmogSets.SetBaseSetsFilter(${1:index}, ${2:isChecked})$0",
		},
		{
			"trigger": "C_TransmogSets.SetHasNewSources\t(transmogSetID)",
			"contents": "C_TransmogSets.SetHasNewSources(${1:transmogSetID})$0",
		},
		{
			"trigger": "C_TransmogSets.SetHasNewSourcesForSlot\t(transmogSetID, slot)",
			"contents": "C_TransmogSets.SetHasNewSourcesForSlot(${1:transmogSetID}, ${2:slot})$0",
		},
		{
			"trigger": "C_TransmogSets.SetIsFavorite\t(transmogSetID, isFavorite)",
			"contents": "C_TransmogSets.SetIsFavorite(${1:transmogSetID}, ${2:isFavorite})$0",
		},
		{
			"trigger": "C_UI.Reload\t()",
			"contents": "C_UI.Reload()$0",
		},
		{
			"trigger": "C_UIWidgetManager.GetAllWidgetsBySetID\t(setID)",
			"contents": "C_UIWidgetManager.GetAllWidgetsBySetID(${1:setID})$0",
		},
		{
			"trigger": "C_UIWidgetManager.GetBelowMinimapWidgetSetID\t()",
			"contents": "C_UIWidgetManager.GetBelowMinimapWidgetSetID()$0",
		},
		{
			"trigger": "C_UIWidgetManager.GetBulletTextListWidgetVisualizationInfo\t(widgetID)",
			"contents": "C_UIWidgetManager.GetBulletTextListWidgetVisualizationInfo(${1:widgetID})$0",
		},
		{
			"trigger": "C_UIWidgetManager.GetCaptureBarWidgetVisualizationInfo\t(widgetID)",
			"contents": "C_UIWidgetManager.GetCaptureBarWidgetVisualizationInfo(${1:widgetID})$0",
		},
		{
			"trigger": "C_UIWidgetManager.GetDoubleIconAndTextWidgetVisualizationInfo\t(widgetID)",
			"contents": "C_UIWidgetManager.GetDoubleIconAndTextWidgetVisualizationInfo(${1:widgetID})$0",
		},
		{
			"trigger": "C_UIWidgetManager.GetDoubleStateIconRowVisualizationInfo\t(widgetID)",
			"contents": "C_UIWidgetManager.GetDoubleStateIconRowVisualizationInfo(${1:widgetID})$0",
		},
		{
			"trigger": "C_UIWidgetManager.GetDoubleStatusBarWidgetVisualizationInfo\t(widgetID)",
			"contents": "C_UIWidgetManager.GetDoubleStatusBarWidgetVisualizationInfo(${1:widgetID})$0",
		},
		{
			"trigger": "C_UIWidgetManager.GetHorizontalCurrenciesWidgetVisualizationInfo\t(widgetID)",
			"contents": "C_UIWidgetManager.GetHorizontalCurrenciesWidgetVisualizationInfo(${1:widgetID})$0",
		},
		{
			"trigger": "C_UIWidgetManager.GetIconAndTextWidgetVisualizationInfo\t(widgetID)",
			"contents": "C_UIWidgetManager.GetIconAndTextWidgetVisualizationInfo(${1:widgetID})$0",
		},
		{
			"trigger": "C_UIWidgetManager.GetIconTextAndBackgroundWidgetVisualizationInfo\t(widgetID)",
			"contents": "C_UIWidgetManager.GetIconTextAndBackgroundWidgetVisualizationInfo(${1:widgetID})$0",
		},
		{
			"trigger": "C_UIWidgetManager.GetIconTextAndCurrenciesWidgetVisualizationInfo\t(widgetID)",
			"contents": "C_UIWidgetManager.GetIconTextAndCurrenciesWidgetVisualizationInfo(${1:widgetID})$0",
		},
		{
			"trigger": "C_UIWidgetManager.GetScenarioHeaderCurrenciesAndBackgroundWidgetVisualizationInfo\t(widgetID)",
			"contents": "C_UIWidgetManager.GetScenarioHeaderCurrenciesAndBackgroundWidgetVisualizationInfo(${1:widgetID})$0",
		},
		{
			"trigger": "C_UIWidgetManager.GetSpellDisplayVisualizationInfo\t(widgetID)",
			"contents": "C_UIWidgetManager.GetSpellDisplayVisualizationInfo(${1:widgetID})$0",
		},
		{
			"trigger": "C_UIWidgetManager.GetStackedResourceTrackerWidgetVisualizationInfo\t(widgetID)",
			"contents": "C_UIWidgetManager.GetStackedResourceTrackerWidgetVisualizationInfo(${1:widgetID})$0",
		},
		{
			"trigger": "C_UIWidgetManager.GetStatusBarWidgetVisualizationInfo\t(widgetID)",
			"contents": "C_UIWidgetManager.GetStatusBarWidgetVisualizationInfo(${1:widgetID})$0",
		},
		{
			"trigger": "C_UIWidgetManager.GetTextureWithStateVisualizationInfo\t(widgetID)",
			"contents": "C_UIWidgetManager.GetTextureWithStateVisualizationInfo(${1:widgetID})$0",
		},
		{
			"trigger": "C_UIWidgetManager.GetTextWithStateWidgetVisualizationInfo\t(widgetID)",
			"contents": "C_UIWidgetManager.GetTextWithStateWidgetVisualizationInfo(${1:widgetID})$0",
		},
		{
			"trigger": "C_UIWidgetManager.GetTopCenterWidgetSetID\t()",
			"contents": "C_UIWidgetManager.GetTopCenterWidgetSetID()$0",
		},
		{
			"trigger": "C_VideoOptions.GetGxAdapterInfo\t()",
			"contents": "C_VideoOptions.GetGxAdapterInfo()$0",
		},
		{
			"trigger": "C_VignetteInfo.FindBestUniqueVignette\t(vignetteGUIDs)",
			"contents": "C_VignetteInfo.FindBestUniqueVignette(${1:vignetteGUIDs})$0",
		},
		{
			"trigger": "C_VignetteInfo.GetVignetteInfo\t(\"vignetteGUID\")",
			"contents": "C_VignetteInfo.GetVignetteInfo(\"${1:vignetteGUID}\")$0",
		},
		{
			"trigger": "C_VignetteInfo.GetVignettePosition\t(\"vignetteGUID\", uiMapID)",
			"contents": "C_VignetteInfo.GetVignettePosition(\"${1:vignetteGUID}\", ${2:uiMapID})$0",
		},
		{
			"trigger": "C_VignetteInfo.GetVignettes\t()",
			"contents": "C_VignetteInfo.GetVignettes()$0",
		},
		{
			"trigger": "C_VoiceChat.ActivateChannel\t(channelID)",
			"contents": "C_VoiceChat.ActivateChannel(${1:channelID})$0",
		},
		{
			"trigger": "C_VoiceChat.BeginLocalCapture\t(listenToLocalUser)",
			"contents": "C_VoiceChat.BeginLocalCapture(${1:listenToLocalUser})$0",
		},
		{
			"trigger": "C_VoiceChat.CanPlayerUseVoiceChat\t()",
			"contents": "C_VoiceChat.CanPlayerUseVoiceChat()$0",
		},
		{
			"trigger": "C_VoiceChat.CreateChannel\t(\"channelDisplayName\")",
			"contents": "C_VoiceChat.CreateChannel(\"${1:channelDisplayName}\")$0",
		},
		{
			"trigger": "C_VoiceChat.DeactivateChannel\t(channelID)",
			"contents": "C_VoiceChat.DeactivateChannel(${1:channelID})$0",
		},
		{
			"trigger": "C_VoiceChat.EndLocalCapture\t()",
			"contents": "C_VoiceChat.EndLocalCapture()$0",
		},
		{
			"trigger": "C_VoiceChat.GetActiveChannelID\t()",
			"contents": "C_VoiceChat.GetActiveChannelID()$0",
		},
		{
			"trigger": "C_VoiceChat.GetActiveChannelType\t()",
			"contents": "C_VoiceChat.GetActiveChannelType()$0",
		},
		{
			"trigger": "C_VoiceChat.GetAvailableInputDevices\t()",
			"contents": "C_VoiceChat.GetAvailableInputDevices()$0",
		},
		{
			"trigger": "C_VoiceChat.GetAvailableOutputDevices\t()",
			"contents": "C_VoiceChat.GetAvailableOutputDevices()$0",
		},
		{
			"trigger": "C_VoiceChat.GetChannel\t(channelID)",
			"contents": "C_VoiceChat.GetChannel(${1:channelID})$0",
		},
		{
			"trigger": "C_VoiceChat.GetChannelForChannelType\t(channelType)",
			"contents": "C_VoiceChat.GetChannelForChannelType(${1:channelType})$0",
		},
		{
			"trigger": "C_VoiceChat.GetChannelForCommunityStream\t(\"clubId\", \"streamId\")",
			"contents": "C_VoiceChat.GetChannelForCommunityStream(\"${1:clubId}\", \"${2:streamId}\")$0",
		},
		{
			"trigger": "C_VoiceChat.GetCommunicationMode\t()",
			"contents": "C_VoiceChat.GetCommunicationMode()$0",
		},
		{
			"trigger": "C_VoiceChat.GetCurrentVoiceChatConnectionStatusCode\t()",
			"contents": "C_VoiceChat.GetCurrentVoiceChatConnectionStatusCode()$0",
		},
		{
			"trigger": "C_VoiceChat.GetInputVolume\t()",
			"contents": "C_VoiceChat.GetInputVolume()$0",
		},
		{
			"trigger": "C_VoiceChat.GetLocalPlayerActiveChannelMemberInfo\t()",
			"contents": "C_VoiceChat.GetLocalPlayerActiveChannelMemberInfo()$0",
		},
		{
			"trigger": "C_VoiceChat.GetLocalPlayerMemberID\t(channelID)",
			"contents": "C_VoiceChat.GetLocalPlayerMemberID(${1:channelID})$0",
		},
		{
			"trigger": "C_VoiceChat.GetMemberGUID\t(memberID, channelID)",
			"contents": "C_VoiceChat.GetMemberGUID(${1:memberID}, ${2:channelID})$0",
		},
		{
			"trigger": "C_VoiceChat.GetMemberID\t(channelID, \"memberGUID\")",
			"contents": "C_VoiceChat.GetMemberID(${1:channelID}, \"${2:memberGUID}\")$0",
		},
		{
			"trigger": "C_VoiceChat.GetMemberInfo\t(memberID, channelID)",
			"contents": "C_VoiceChat.GetMemberInfo(${1:memberID}, ${2:channelID})$0",
		},
		{
			"trigger": "C_VoiceChat.GetMemberName\t(memberID, channelID)",
			"contents": "C_VoiceChat.GetMemberName(${1:memberID}, ${2:channelID})$0",
		},
		{
			"trigger": "C_VoiceChat.GetMemberVolume\t(playerLocation)",
			"contents": "C_VoiceChat.GetMemberVolume(${1:playerLocation})$0",
		},
		{
			"trigger": "C_VoiceChat.GetOutputVolume\t()",
			"contents": "C_VoiceChat.GetOutputVolume()$0",
		},
		{
			"trigger": "C_VoiceChat.GetProcesses\t()",
			"contents": "C_VoiceChat.GetProcesses()$0",
		},
		{
			"trigger": "C_VoiceChat.GetPTTButtonPressedState\t()",
			"contents": "C_VoiceChat.GetPTTButtonPressedState()$0",
		},
		{
			"trigger": "C_VoiceChat.GetPushToTalkBinding\t()",
			"contents": "C_VoiceChat.GetPushToTalkBinding()$0",
		},
		{
			"trigger": "C_VoiceChat.GetVADSensitivity\t()",
			"contents": "C_VoiceChat.GetVADSensitivity()$0",
		},
		{
			"trigger": "C_VoiceChat.IsDeafened\t()",
			"contents": "C_VoiceChat.IsDeafened()$0",
		},
		{
			"trigger": "C_VoiceChat.IsEnabled\t()",
			"contents": "C_VoiceChat.IsEnabled()$0",
		},
		{
			"trigger": "C_VoiceChat.IsLoggedIn\t()",
			"contents": "C_VoiceChat.IsLoggedIn()$0",
		},
		{
			"trigger": "C_VoiceChat.IsMemberLocalPlayer\t(memberID, channelID)",
			"contents": "C_VoiceChat.IsMemberLocalPlayer(${1:memberID}, ${2:channelID})$0",
		},
		{
			"trigger": "C_VoiceChat.IsMemberMuted\t(playerLocation)",
			"contents": "C_VoiceChat.IsMemberMuted(${1:playerLocation})$0",
		},
		{
			"trigger": "C_VoiceChat.IsMemberMutedForAll\t(memberID, channelID)",
			"contents": "C_VoiceChat.IsMemberMutedForAll(${1:memberID}, ${2:channelID})$0",
		},
		{
			"trigger": "C_VoiceChat.IsMemberSilenced\t(memberID, channelID)",
			"contents": "C_VoiceChat.IsMemberSilenced(${1:memberID}, ${2:channelID})$0",
		},
		{
			"trigger": "C_VoiceChat.IsMuted\t()",
			"contents": "C_VoiceChat.IsMuted()$0",
		},
		{
			"trigger": "C_VoiceChat.IsParentalDisabled\t()",
			"contents": "C_VoiceChat.IsParentalDisabled()$0",
		},
		{
			"trigger": "C_VoiceChat.IsParentalMuted\t()",
			"contents": "C_VoiceChat.IsParentalMuted()$0",
		},
		{
			"trigger": "C_VoiceChat.IsPlayerUsingVoice\t(playerLocation)",
			"contents": "C_VoiceChat.IsPlayerUsingVoice(${1:playerLocation})$0",
		},
		{
			"trigger": "C_VoiceChat.IsSilenced\t()",
			"contents": "C_VoiceChat.IsSilenced()$0",
		},
		{
			"trigger": "C_VoiceChat.LeaveChannel\t(channelID)",
			"contents": "C_VoiceChat.LeaveChannel(${1:channelID})$0",
		},
		{
			"trigger": "C_VoiceChat.Login\t()",
			"contents": "C_VoiceChat.Login()$0",
		},
		{
			"trigger": "C_VoiceChat.Logout\t()",
			"contents": "C_VoiceChat.Logout()$0",
		},
		{
			"trigger": "C_VoiceChat.MarkChannelsDiscovered\t()",
			"contents": "C_VoiceChat.MarkChannelsDiscovered()$0",
		},
		{
			"trigger": "C_VoiceChat.RequestJoinAndActivateCommunityStreamChannel\t(\"clubId\", \"streamId\")",
			"contents": "C_VoiceChat.RequestJoinAndActivateCommunityStreamChannel(\"${1:clubId}\", \"${2:streamId}\")$0",
		},
		{
			"trigger": "C_VoiceChat.RequestJoinChannelByChannelType\t(channelType)",
			"contents": "C_VoiceChat.RequestJoinChannelByChannelType(${1:channelType})$0",
		},
		{
			"trigger": "C_VoiceChat.SetCommunicationMode\t(communicationMode)",
			"contents": "C_VoiceChat.SetCommunicationMode(${1:communicationMode})$0",
		},
		{
			"trigger": "C_VoiceChat.SetDeafened\t(isDeafened)",
			"contents": "C_VoiceChat.SetDeafened(${1:isDeafened})$0",
		},
		{
			"trigger": "C_VoiceChat.SetInputDevice\t(\"deviceID\")",
			"contents": "C_VoiceChat.SetInputDevice(\"${1:deviceID}\")$0",
		},
		{
			"trigger": "C_VoiceChat.SetInputVolume\t(volume)",
			"contents": "C_VoiceChat.SetInputVolume(${1:volume})$0",
		},
		{
			"trigger": "C_VoiceChat.SetMemberMuted\t(playerLocation, muted)",
			"contents": "C_VoiceChat.SetMemberMuted(${1:playerLocation}, ${2:muted})$0",
		},
		{
			"trigger": "C_VoiceChat.SetMemberVolume\t(playerLocation, volume)",
			"contents": "C_VoiceChat.SetMemberVolume(${1:playerLocation}, ${2:volume})$0",
		},
		{
			"trigger": "C_VoiceChat.SetMuted\t(isMuted)",
			"contents": "C_VoiceChat.SetMuted(${1:isMuted})$0",
		},
		{
			"trigger": "C_VoiceChat.SetOutputDevice\t(\"deviceID\")",
			"contents": "C_VoiceChat.SetOutputDevice(\"${1:deviceID}\")$0",
		},
		{
			"trigger": "C_VoiceChat.SetOutputVolume\t(volume)",
			"contents": "C_VoiceChat.SetOutputVolume(${1:volume})$0",
		},
		{
			"trigger": "C_VoiceChat.SetPortraitTexture\t(textureObject, memberID, channelID)",
			"contents": "C_VoiceChat.SetPortraitTexture(${1:textureObject}, ${2:memberID}, ${3:channelID})$0",
		},
		{
			"trigger": "C_VoiceChat.SetPushToTalkBinding\t(keys)",
			"contents": "C_VoiceChat.SetPushToTalkBinding(${1:keys})$0",
		},
		{
			"trigger": "C_VoiceChat.SetVADSensitivity\t(sensitivity)",
			"contents": "C_VoiceChat.SetVADSensitivity(${1:sensitivity})$0",
		},
		{
			"trigger": "C_VoiceChat.ShouldDiscoverChannels\t()",
			"contents": "C_VoiceChat.ShouldDiscoverChannels()$0",
		},
		{
			"trigger": "C_VoiceChat.ToggleDeafened\t()",
			"contents": "C_VoiceChat.ToggleDeafened()$0",
		},
		{
			"trigger": "C_VoiceChat.ToggleMemberMuted\t(playerLocation)",
			"contents": "C_VoiceChat.ToggleMemberMuted(${1:playerLocation})$0",
		},
		{
			"trigger": "C_VoiceChat.ToggleMuted\t()",
			"contents": "C_VoiceChat.ToggleMuted()$0",
		},





		{
			"trigger": "_C_AccountInfo.GetIDFromBattleNetAccountGUID\t(\"guid\")",
			"contents": "${1:battleNetAccountID} = C_AccountInfo.GetIDFromBattleNetAccountGUID(\"${2:guid}\")$0",
		},
		{
			"trigger": "_C_AccountInfo.IsGUIDBattleNetAccountType\t(\"guid\")",
			"contents": "${1:isBNet} = C_AccountInfo.IsGUIDBattleNetAccountType(\"${2:guid}\")$0",
		},
		{
			"trigger": "_C_AccountInfo.IsGUIDRelatedToLocalAccount\t(\"guid\")",
			"contents": "${1:isLocalUser} = C_AccountInfo.IsGUIDRelatedToLocalAccount(\"${2:guid}\")$0",
		},
		{
			"trigger": "_C_AchievementInfo.GetRewardItemID\t(achievementID)",
			"contents": "${1:rewardItemID} = C_AchievementInfo.GetRewardItemID(${2:achievementID})$0",
		},
		{
			"trigger": "_C_AchievementInfo.GetSupercedingAchievements\t(achievementID)",
			"contents": "${1:supercedingAchievements} = C_AchievementInfo.GetSupercedingAchievements(${2:achievementID})$0",
		},
		{
			"trigger": "_C_ActionBar.FindFlyoutActionButtons\t(flyoutID)",
			"contents": "${1:slots} = C_ActionBar.FindFlyoutActionButtons(${2:flyoutID})$0",
		},
		{
			"trigger": "_C_ActionBar.FindPetActionButtons\t(petActionID)",
			"contents": "${1:slots} = C_ActionBar.FindPetActionButtons(${2:petActionID})$0",
		},
		{
			"trigger": "_C_ActionBar.FindSpellActionButtons\t(spellID)",
			"contents": "${1:slots} = C_ActionBar.FindSpellActionButtons(${2:spellID})$0",
		},
		{
			"trigger": "_C_ActionBar.GetPetActionPetBarIndices\t(petActionID)",
			"contents": "${1:slots} = C_ActionBar.GetPetActionPetBarIndices(${2:petActionID})$0",
		},
		{
			"trigger": "_C_ActionBar.HasFlyoutActionButtons\t(flyoutID)",
			"contents": "${1:hasFlyoutActionButtons} = C_ActionBar.HasFlyoutActionButtons(${2:flyoutID})$0",
		},
		{
			"trigger": "_C_ActionBar.HasPetActionButtons\t(petActionID)",
			"contents": "${1:hasPetActionButtons} = C_ActionBar.HasPetActionButtons(${2:petActionID})$0",
		},
		{
			"trigger": "_C_ActionBar.HasPetActionPetBarIndices\t(petActionID)",
			"contents": "${1:hasPetActionPetBarIndices} = C_ActionBar.HasPetActionPetBarIndices(${2:petActionID})$0",
		},
		{
			"trigger": "_C_ActionBar.HasSpellActionButtons\t(spellID)",
			"contents": "${1:hasSpellActionButtons} = C_ActionBar.HasSpellActionButtons(${2:spellID})$0",
		},
		{
			"trigger": "_C_ActionBar.IsAutoCastPetAction\t(slotID)",
			"contents": "${1:isAutoCastPetAction} = C_ActionBar.IsAutoCastPetAction(${2:slotID})$0",
		},
		{
			"trigger": "_C_ActionBar.IsEnabledAutoCastPetAction\t(slotID)",
			"contents": "${1:isEnabledAutoCastPetAction} = C_ActionBar.IsEnabledAutoCastPetAction(${2:slotID})$0",
		},
		{
			"trigger": "_C_ActionBar.IsOnBarOrSpecialBar\t(spellID)",
			"contents": "${1:isOnBarOrSpecialBar} = C_ActionBar.IsOnBarOrSpecialBar(${2:spellID})$0",
		},
		{
			"trigger": "_C_ActionBar.ShouldOverrideBarShowHealthBar\t()",
			"contents": "${1:showHealthBar} = C_ActionBar.ShouldOverrideBarShowHealthBar()$0",
		},
		{
			"trigger": "_C_ActionBar.ShouldOverrideBarShowManaBar\t()",
			"contents": "${1:showManaBar} = C_ActionBar.ShouldOverrideBarShowManaBar()$0",
		},
		{
			"trigger": "_C_AlliedRaces.GetAllRacialAbilitiesFromID\t(raceID)",
			"contents": "${1:allDisplayInfo} = C_AlliedRaces.GetAllRacialAbilitiesFromID(${2:raceID})$0",
		},
		{
			"trigger": "_C_AlliedRaces.GetRaceInfoByID\t(raceID)",
			"contents": "${1:info} = C_AlliedRaces.GetRaceInfoByID(${2:raceID})$0",
		},
		{
			"trigger": "_C_AreaPoiInfo.GetAreaPOIForMap\t(uiMapID)",
			"contents": "${1:areaPoiIDs} = C_AreaPoiInfo.GetAreaPOIForMap(${2:uiMapID})$0",
		},
		{
			"trigger": "_C_AreaPoiInfo.GetAreaPOIInfo\t(uiMapID, areaPoiID)",
			"contents": "${1:poiInfo} = C_AreaPoiInfo.GetAreaPOIInfo(${2:uiMapID}, ${3:areaPoiID})$0",
		},
		{
			"trigger": "_C_AreaPoiInfo.GetAreaPOISecondsLeft\t(areaPoiID)",
			"contents": "${1:secondsLeft} = C_AreaPoiInfo.GetAreaPOISecondsLeft(${2:areaPoiID})$0",
		},
		{
			"trigger": "_C_AreaPoiInfo.IsAreaPOITimed\t(areaPoiID)",
			"contents": "${1:isTimed} = C_AreaPoiInfo.IsAreaPOITimed(${2:areaPoiID})$0",
		},
		{
			"trigger": "_C_ArtifactUI.AddPower\t(powerID)",
			"contents": "${1:success} = C_ArtifactUI.AddPower(${2:powerID})$0",
		},
		{
			"trigger": "_C_ArtifactUI.CanApplyArtifactRelic\t(relicItemID, onlyUnlocked)",
			"contents": "${1:canApply} = C_ArtifactUI.CanApplyArtifactRelic(${2:relicItemID}, ${3:onlyUnlocked})$0",
		},
		{
			"trigger": "_C_ArtifactUI.CanApplyCursorRelicToSlot\t(relicSlotIndex)",
			"contents": "${1:canApply} = C_ArtifactUI.CanApplyCursorRelicToSlot(${2:relicSlotIndex})$0",
		},
		{
			"trigger": "_C_ArtifactUI.CanApplyRelicItemIDToEquippedArtifactSlot\t(relicItemID, relicSlotIndex)",
			"contents": "${1:canApply} = C_ArtifactUI.CanApplyRelicItemIDToEquippedArtifactSlot(${2:relicItemID}, ${3:relicSlotIndex})$0",
		},
		{
			"trigger": "_C_ArtifactUI.CanApplyRelicItemIDToSlot\t(relicItemID, relicSlotIndex)",
			"contents": "${1:canApply} = C_ArtifactUI.CanApplyRelicItemIDToSlot(${2:relicItemID}, ${3:relicSlotIndex})$0",
		},
		{
			"trigger": "_C_ArtifactUI.CheckRespecNPC\t()",
			"contents": "${1:canRespec} = C_ArtifactUI.CheckRespecNPC()$0",
		},
		{
			"trigger": "_C_ArtifactUI.DoesEquippedArtifactHaveAnyRelicsSlotted\t()",
			"contents": "${1:hasAnyRelicsSlotted} = C_ArtifactUI.DoesEquippedArtifactHaveAnyRelicsSlotted()$0",
		},
		{
			"trigger": "_C_ArtifactUI.GetAppearanceInfo\t(appearanceSetIndex, appearanceIndex)",
			"contents": "${1:artifactAppearanceID}, ${2:appearanceName}, ${3:displayIndex}, ${4:unlocked}, ${5:failureDescription}, ${6:uiCameraID}, ${7:altHandCameraID}, ${8:swatchColorR}, ${9:swatchColorG}, ${10:swatchColorB}, ${11:modelOpacity}, ${12:modelSaturation}, ${13:obtainable} = C_ArtifactUI.GetAppearanceInfo(${14:appearanceSetIndex}, ${15:appearanceIndex})$0",
		},
		{
			"trigger": "_C_ArtifactUI.GetAppearanceInfoByID\t(artifactAppearanceID)",
			"contents": "${1:artifactAppearanceSetID}, ${2:artifactAppearanceID}, ${3:appearanceName}, ${4:displayIndex}, ${5:unlocked}, ${6:failureDescription}, ${7:uiCameraID}, ${8:altHandCameraID}, ${9:swatchColorR}, ${10:swatchColorG}, ${11:swatchColorB}, ${12:modelOpacity}, ${13:modelSaturation}, ${14:obtainable} = C_ArtifactUI.GetAppearanceInfoByID(${15:artifactAppearanceID})$0",
		},
		{
			"trigger": "_C_ArtifactUI.GetAppearanceSetInfo\t(appearanceSetIndex)",
			"contents": "${1:artifactAppearanceSetID}, ${2:appearanceSetName}, ${3:appearanceSetDescription}, ${4:numAppearances} = C_ArtifactUI.GetAppearanceSetInfo(${5:appearanceSetIndex})$0",
		},
		{
			"trigger": "_C_ArtifactUI.GetArtifactArtInfo\t()",
			"contents": "${1:artifactArtInfo} = C_ArtifactUI.GetArtifactArtInfo()$0",
		},
		{
			"trigger": "_C_ArtifactUI.GetArtifactInfo\t()",
			"contents": "${1:itemID}, ${2:altItemID}, ${3:name}, ${4:icon}, ${5:xp}, ${6:pointsSpent}, ${7:quality}, ${8:artifactAppearanceID}, ${9:appearanceModID}, ${10:itemAppearanceID}, ${11:altItemAppearanceID}, ${12:altOnTop}, ${13:tier} = C_ArtifactUI.GetArtifactInfo()$0",
		},
		{
			"trigger": "_C_ArtifactUI.GetArtifactItemID\t()",
			"contents": "${1:itemID} = C_ArtifactUI.GetArtifactItemID()$0",
		},
		{
			"trigger": "_C_ArtifactUI.GetArtifactTier\t()",
			"contents": "${1:tier} = C_ArtifactUI.GetArtifactTier()$0",
		},
		{
			"trigger": "_C_ArtifactUI.GetArtifactXPRewardTargetInfo\t(artifactCategoryID)",
			"contents": "${1:name}, ${2:icon} = C_ArtifactUI.GetArtifactXPRewardTargetInfo(${3:artifactCategoryID})$0",
		},
		{
			"trigger": "_C_ArtifactUI.GetCostForPointAtRank\t(rank, tier)",
			"contents": "${1:cost} = C_ArtifactUI.GetCostForPointAtRank(${2:rank}, ${3:tier})$0",
		},
		{
			"trigger": "_C_ArtifactUI.GetEquippedArtifactArtInfo\t()",
			"contents": "${1:artifactArtInfo} = C_ArtifactUI.GetEquippedArtifactArtInfo()$0",
		},
		{
			"trigger": "_C_ArtifactUI.GetEquippedArtifactInfo\t()",
			"contents": "${1:itemID}, ${2:altItemID}, ${3:name}, ${4:icon}, ${5:xp}, ${6:pointsSpent}, ${7:quality}, ${8:artifactAppearanceID}, ${9:appearanceModID}, ${10:itemAppearanceID}, ${11:altItemAppearanceID}, ${12:altOnTop}, ${13:tier} = C_ArtifactUI.GetEquippedArtifactInfo()$0",
		},
		{
			"trigger": "_C_ArtifactUI.GetEquippedArtifactItemID\t()",
			"contents": "${1:itemID} = C_ArtifactUI.GetEquippedArtifactItemID()$0",
		},
		{
			"trigger": "_C_ArtifactUI.GetEquippedArtifactNumRelicSlots\t(onlyUnlocked)",
			"contents": "${1:numRelicSlots} = C_ArtifactUI.GetEquippedArtifactNumRelicSlots(${2:onlyUnlocked})$0",
		},
		{
			"trigger": "_C_ArtifactUI.GetEquippedArtifactRelicInfo\t(relicSlotIndex)",
			"contents": "${1:name}, ${2:icon}, ${3:slotTypeName}, ${4:link} = C_ArtifactUI.GetEquippedArtifactRelicInfo(${5:relicSlotIndex})$0",
		},
		{
			"trigger": "_C_ArtifactUI.GetEquippedRelicLockedReason\t(relicSlotIndex)",
			"contents": "${1:lockedReason} = C_ArtifactUI.GetEquippedRelicLockedReason(${2:relicSlotIndex})$0",
		},
		{
			"trigger": "_C_ArtifactUI.GetForgeRotation\t()",
			"contents": "${1:forgeRotationX}, ${2:forgeRotationY}, ${3:forgeRotationZ} = C_ArtifactUI.GetForgeRotation()$0",
		},
		{
			"trigger": "_C_ArtifactUI.GetItemLevelIncreaseProvidedByRelic\t(\"itemLinkOrID\")",
			"contents": "${1:itemIevelIncrease} = C_ArtifactUI.GetItemLevelIncreaseProvidedByRelic(\"${2:itemLinkOrID}\")$0",
		},
		{
			"trigger": "_C_ArtifactUI.GetMetaPowerInfo\t()",
			"contents": "${1:spellID}, ${2:powerCost}, ${3:currentRank} = C_ArtifactUI.GetMetaPowerInfo()$0",
		},
		{
			"trigger": "_C_ArtifactUI.GetNumAppearanceSets\t()",
			"contents": "${1:numAppearanceSets} = C_ArtifactUI.GetNumAppearanceSets()$0",
		},
		{
			"trigger": "_C_ArtifactUI.GetNumObtainedArtifacts\t()",
			"contents": "${1:numObtainedArtifacts} = C_ArtifactUI.GetNumObtainedArtifacts()$0",
		},
		{
			"trigger": "_C_ArtifactUI.GetNumRelicSlots\t(onlyUnlocked)",
			"contents": "${1:numRelicSlots} = C_ArtifactUI.GetNumRelicSlots(${2:onlyUnlocked})$0",
		},
		{
			"trigger": "_C_ArtifactUI.GetPointsRemaining\t()",
			"contents": "${1:pointsRemaining} = C_ArtifactUI.GetPointsRemaining()$0",
		},
		{
			"trigger": "_C_ArtifactUI.GetPowerHyperlink\t(powerID)",
			"contents": "${1:link} = C_ArtifactUI.GetPowerHyperlink(${2:powerID})$0",
		},
		{
			"trigger": "_C_ArtifactUI.GetPowerInfo\t(powerID)",
			"contents": "${1:powerInfo} = C_ArtifactUI.GetPowerInfo(${2:powerID})$0",
		},
		{
			"trigger": "_C_ArtifactUI.GetPowerLinks\t(powerID)",
			"contents": "${1:linkingPowerID} = C_ArtifactUI.GetPowerLinks(${2:powerID})$0",
		},
		{
			"trigger": "_C_ArtifactUI.GetPowers\t()",
			"contents": "${1:powerID} = C_ArtifactUI.GetPowers()$0",
		},
		{
			"trigger": "_C_ArtifactUI.GetPowersAffectedByRelic\t(relicSlotIndex)",
			"contents": "${1:powerIDs} = C_ArtifactUI.GetPowersAffectedByRelic(${2:relicSlotIndex})$0",
		},
		{
			"trigger": "_C_ArtifactUI.GetPowersAffectedByRelicItemLink\t(\"relicItemInfo\")",
			"contents": "${1:powerIDs} = C_ArtifactUI.GetPowersAffectedByRelicItemLink(\"${2:relicItemInfo}\")$0",
		},
		{
			"trigger": "_C_ArtifactUI.GetPreviewAppearance\t()",
			"contents": "${1:artifactAppearanceID} = C_ArtifactUI.GetPreviewAppearance()$0",
		},
		{
			"trigger": "_C_ArtifactUI.GetRelicInfo\t(relicSlotIndex)",
			"contents": "${1:name}, ${2:icon}, ${3:slotTypeName}, ${4:link} = C_ArtifactUI.GetRelicInfo(${5:relicSlotIndex})$0",
		},
		{
			"trigger": "_C_ArtifactUI.GetRelicInfoByItemID\t(itemID)",
			"contents": "${1:name}, ${2:icon}, ${3:slotTypeName}, ${4:link} = C_ArtifactUI.GetRelicInfoByItemID(${5:itemID})$0",
		},
		{
			"trigger": "_C_ArtifactUI.GetRelicLockedReason\t(relicSlotIndex)",
			"contents": "${1:lockedReason} = C_ArtifactUI.GetRelicLockedReason(${2:relicSlotIndex})$0",
		},
		{
			"trigger": "_C_ArtifactUI.GetRelicSlotType\t(relicSlotIndex)",
			"contents": "${1:slotTypeName} = C_ArtifactUI.GetRelicSlotType(${2:relicSlotIndex})$0",
		},
		{
			"trigger": "_C_ArtifactUI.GetRespecArtifactArtInfo\t()",
			"contents": "${1:artifactArtInfo} = C_ArtifactUI.GetRespecArtifactArtInfo()$0",
		},
		{
			"trigger": "_C_ArtifactUI.GetRespecArtifactInfo\t()",
			"contents": "${1:itemID}, ${2:altItemID}, ${3:name}, ${4:icon}, ${5:xp}, ${6:pointsSpent}, ${7:quality}, ${8:artifactAppearanceID}, ${9:appearanceModID}, ${10:itemAppearanceID}, ${11:altItemAppearanceID}, ${12:altOnTop}, ${13:tier} = C_ArtifactUI.GetRespecArtifactInfo()$0",
		},
		{
			"trigger": "_C_ArtifactUI.GetRespecCost\t()",
			"contents": "${1:cost} = C_ArtifactUI.GetRespecCost()$0",
		},
		{
			"trigger": "_C_ArtifactUI.GetTotalPowerCost\t(startingTrait, numTraits, artifactTier)",
			"contents": "${1:totalArtifactPowerCost} = C_ArtifactUI.GetTotalPowerCost(${2:startingTrait}, ${3:numTraits}, ${4:artifactTier})$0",
		},
		{
			"trigger": "_C_ArtifactUI.GetTotalPurchasedRanks\t()",
			"contents": "${1:totalPurchasedRanks} = C_ArtifactUI.GetTotalPurchasedRanks()$0",
		},
		{
			"trigger": "_C_ArtifactUI.IsArtifactDisabled\t()",
			"contents": "${1:artifactDisabled} = C_ArtifactUI.IsArtifactDisabled()$0",
		},
		{
			"trigger": "_C_ArtifactUI.IsAtForge\t()",
			"contents": "${1:isAtForge} = C_ArtifactUI.IsAtForge()$0",
		},
		{
			"trigger": "_C_ArtifactUI.IsEquippedArtifactDisabled\t()",
			"contents": "${1:artifactDisabled} = C_ArtifactUI.IsEquippedArtifactDisabled()$0",
		},
		{
			"trigger": "_C_ArtifactUI.IsEquippedArtifactMaxed\t()",
			"contents": "${1:artifactMaxed} = C_ArtifactUI.IsEquippedArtifactMaxed()$0",
		},
		{
			"trigger": "_C_ArtifactUI.IsMaxedByRulesOrEffect\t()",
			"contents": "${1:isEffectivelyMaxed} = C_ArtifactUI.IsMaxedByRulesOrEffect()$0",
		},
		{
			"trigger": "_C_ArtifactUI.IsPowerKnown\t(powerID)",
			"contents": "${1:known} = C_ArtifactUI.IsPowerKnown(${2:powerID})$0",
		},
		{
			"trigger": "_C_ArtifactUI.IsViewedArtifactEquipped\t()",
			"contents": "${1:isViewedArtifactEquipped} = C_ArtifactUI.IsViewedArtifactEquipped()$0",
		},
		{
			"trigger": "_C_ArtifactUI.ShouldSuppressForgeRotation\t()",
			"contents": "${1:shouldSuppressForgeRotation} = C_ArtifactUI.ShouldSuppressForgeRotation()$0",
		},
		{
			"trigger": "_C_AzeriteEmpoweredItem.CanSelectPower\t(azeriteEmpoweredItemLocation, powerID)",
			"contents": "${1:canSelect} = C_AzeriteEmpoweredItem.CanSelectPower(${2:azeriteEmpoweredItemLocation}, ${3:powerID})$0",
		},
		{
			"trigger": "_C_AzeriteEmpoweredItem.GetAllTierInfo\t(azeriteEmpoweredItemLocation)",
			"contents": "${1:tierInfo} = C_AzeriteEmpoweredItem.GetAllTierInfo(${2:azeriteEmpoweredItemLocation})$0",
		},
		{
			"trigger": "_C_AzeriteEmpoweredItem.GetAllTierInfoByItemID\t(\"itemInfo\", [classID])",
			"contents": "${1:tierInfo} = C_AzeriteEmpoweredItem.GetAllTierInfoByItemID(\"${2:itemInfo}\", [${3:classID}])$0",
		},
		{
			"trigger": "_C_AzeriteEmpoweredItem.GetAzeriteEmpoweredItemRespecCost\t()",
			"contents": "${1:cost} = C_AzeriteEmpoweredItem.GetAzeriteEmpoweredItemRespecCost()$0",
		},
		{
			"trigger": "_C_AzeriteEmpoweredItem.GetPowerInfo\t(powerID)",
			"contents": "${1:powerInfo} = C_AzeriteEmpoweredItem.GetPowerInfo(${2:powerID})$0",
		},
		{
			"trigger": "_C_AzeriteEmpoweredItem.GetPowerText\t(azeriteEmpoweredItemLocation, powerID, level)",
			"contents": "${1:powerText} = C_AzeriteEmpoweredItem.GetPowerText(${2:azeriteEmpoweredItemLocation}, ${3:powerID}, ${4:level})$0",
		},
		{
			"trigger": "_C_AzeriteEmpoweredItem.GetSpecsForPower\t(powerID)",
			"contents": "${1:specInfo} = C_AzeriteEmpoweredItem.GetSpecsForPower(${2:powerID})$0",
		},
		{
			"trigger": "_C_AzeriteEmpoweredItem.HasAnyUnselectedPowers\t(azeriteEmpoweredItemLocation)",
			"contents": "${1:hasAnyUnselectedPowers} = C_AzeriteEmpoweredItem.HasAnyUnselectedPowers(${2:azeriteEmpoweredItemLocation})$0",
		},
		{
			"trigger": "_C_AzeriteEmpoweredItem.HasBeenViewed\t(azeriteEmpoweredItemLocation)",
			"contents": "${1:hasBeenViewed} = C_AzeriteEmpoweredItem.HasBeenViewed(${2:azeriteEmpoweredItemLocation})$0",
		},
		{
			"trigger": "_C_AzeriteEmpoweredItem.IsAzeriteEmpoweredItem\t(itemLocation)",
			"contents": "${1:isAzeriteEmpoweredItem} = C_AzeriteEmpoweredItem.IsAzeriteEmpoweredItem(${2:itemLocation})$0",
		},
		{
			"trigger": "_C_AzeriteEmpoweredItem.IsAzeriteEmpoweredItemByID\t(\"itemInfo\")",
			"contents": "${1:isAzeriteEmpoweredItem} = C_AzeriteEmpoweredItem.IsAzeriteEmpoweredItemByID(\"${2:itemInfo}\")$0",
		},
		{
			"trigger": "_C_AzeriteEmpoweredItem.IsAzeritePreviewSourceDisplayable\t(\"itemInfo\", [classID])",
			"contents": "${1:isAzeritePreviewSourceDisplayable} = C_AzeriteEmpoweredItem.IsAzeritePreviewSourceDisplayable(\"${2:itemInfo}\", [${3:classID}])$0",
		},
		{
			"trigger": "_C_AzeriteEmpoweredItem.IsHeartOfAzerothEquipped\t()",
			"contents": "${1:isHeartOfAzerothEquipped} = C_AzeriteEmpoweredItem.IsHeartOfAzerothEquipped()$0",
		},
		{
			"trigger": "_C_AzeriteEmpoweredItem.IsPowerAvailableForSpec\t(powerID, specID)",
			"contents": "${1:isPowerAvailableForSpec} = C_AzeriteEmpoweredItem.IsPowerAvailableForSpec(${2:powerID}, ${3:specID})$0",
		},
		{
			"trigger": "_C_AzeriteEmpoweredItem.IsPowerSelected\t(azeriteEmpoweredItemLocation, powerID)",
			"contents": "${1:isSelected} = C_AzeriteEmpoweredItem.IsPowerSelected(${2:azeriteEmpoweredItemLocation}, ${3:powerID})$0",
		},
		{
			"trigger": "_C_AzeriteEmpoweredItem.SelectPower\t(azeriteEmpoweredItemLocation, powerID)",
			"contents": "${1:success} = C_AzeriteEmpoweredItem.SelectPower(${2:azeriteEmpoweredItemLocation}, ${3:powerID})$0",
		},
		{
			"trigger": "_C_AzeriteItem.FindActiveAzeriteItem\t()",
			"contents": "${1:activeAzeriteItemLocation} = C_AzeriteItem.FindActiveAzeriteItem()$0",
		},
		{
			"trigger": "_C_AzeriteItem.GetAzeriteItemXPInfo\t(azeriteItemLocation)",
			"contents": "${1:xp}, ${2:totalLevelXP} = C_AzeriteItem.GetAzeriteItemXPInfo(${3:azeriteItemLocation})$0",
		},
		{
			"trigger": "_C_AzeriteItem.GetPowerLevel\t(azeriteItemLocation)",
			"contents": "${1:powerLevel} = C_AzeriteItem.GetPowerLevel(${2:azeriteItemLocation})$0",
		},
		{
			"trigger": "_C_AzeriteItem.HasActiveAzeriteItem\t()",
			"contents": "${1:hasActiveAzeriteItem} = C_AzeriteItem.HasActiveAzeriteItem()$0",
		},
		{
			"trigger": "_C_AzeriteItem.IsAzeriteItem\t(itemLocation)",
			"contents": "${1:isAzeriteItem} = C_AzeriteItem.IsAzeriteItem(${2:itemLocation})$0",
		},
		{
			"trigger": "_C_AzeriteItem.IsAzeriteItemByID\t(\"itemInfo\")",
			"contents": "${1:isAzeriteItem} = C_AzeriteItem.IsAzeriteItemByID(\"${2:itemInfo}\")$0",
		},
		{
			"trigger": "_C_Calendar.AreNamesReady\t()",
			"contents": "${1:ready} = C_Calendar.AreNamesReady()$0",
		},
		{
			"trigger": "_C_Calendar.CanAddEvent\t()",
			"contents": "${1:canAddEvent} = C_Calendar.CanAddEvent()$0",
		},
		{
			"trigger": "_C_Calendar.CanSendInvite\t()",
			"contents": "${1:canSendInvite} = C_Calendar.CanSendInvite()$0",
		},
		{
			"trigger": "_C_Calendar.ContextMenuEventCanComplain\t(offsetMonths, monthDay, eventIndex)",
			"contents": "${1:canComplain} = C_Calendar.ContextMenuEventCanComplain(${2:offsetMonths}, ${3:monthDay}, ${4:eventIndex})$0",
		},
		{
			"trigger": "_C_Calendar.ContextMenuEventCanEdit\t(offsetMonths, monthDay, eventIndex)",
			"contents": "${1:canEdit} = C_Calendar.ContextMenuEventCanEdit(${2:offsetMonths}, ${3:monthDay}, ${4:eventIndex})$0",
		},
		{
			"trigger": "_C_Calendar.ContextMenuEventCanRemove\t(offsetMonths, monthDay, eventIndex)",
			"contents": "${1:canRemove} = C_Calendar.ContextMenuEventCanRemove(${2:offsetMonths}, ${3:monthDay}, ${4:eventIndex})$0",
		},
		{
			"trigger": "_C_Calendar.ContextMenuEventClipboard\t()",
			"contents": "${1:exists} = C_Calendar.ContextMenuEventClipboard()$0",
		},
		{
			"trigger": "_C_Calendar.ContextMenuEventGetCalendarType\t()",
			"contents": "${1:calendarType} = C_Calendar.ContextMenuEventGetCalendarType()$0",
		},
		{
			"trigger": "_C_Calendar.ContextMenuGetEventIndex\t()",
			"contents": "${1:info} = C_Calendar.ContextMenuGetEventIndex()$0",
		},
		{
			"trigger": "_C_Calendar.EventCanEdit\t()",
			"contents": "${1:canEdit} = C_Calendar.EventCanEdit()$0",
		},
		{
			"trigger": "_C_Calendar.EventGetCalendarType\t()",
			"contents": "${1:calendarType} = C_Calendar.EventGetCalendarType()$0",
		},
		{
			"trigger": "_C_Calendar.EventGetClubId\t()",
			"contents": "${1:info} = C_Calendar.EventGetClubId()$0",
		},
		{
			"trigger": "_C_Calendar.EventGetInvite\t(eventIndex)",
			"contents": "${1:info} = C_Calendar.EventGetInvite(${2:eventIndex})$0",
		},
		{
			"trigger": "_C_Calendar.EventGetInviteResponseTime\t(eventIndex)",
			"contents": "${1:time} = C_Calendar.EventGetInviteResponseTime(${2:eventIndex})$0",
		},
		{
			"trigger": "_C_Calendar.EventGetInviteSortCriterion\t()",
			"contents": "${1:criterion}, ${2:reverse} = C_Calendar.EventGetInviteSortCriterion()$0",
		},
		{
			"trigger": "_C_Calendar.EventGetSelectedInvite\t()",
			"contents": "${1:inviteIndex} = C_Calendar.EventGetSelectedInvite()$0",
		},
		{
			"trigger": "_C_Calendar.EventGetStatusOptions\t(eventIndex)",
			"contents": "${1:options} = C_Calendar.EventGetStatusOptions(${2:eventIndex})$0",
		},
		{
			"trigger": "_C_Calendar.EventGetTextures\t(eventType)",
			"contents": "${1:textures} = C_Calendar.EventGetTextures(${2:eventType})$0",
		},
		{
			"trigger": "_C_Calendar.EventGetTypes\t()",
			"contents": "${1:types} = C_Calendar.EventGetTypes()$0",
		},
		{
			"trigger": "_C_Calendar.EventGetTypesDisplayOrdered\t()",
			"contents": "${1:infos} = C_Calendar.EventGetTypesDisplayOrdered()$0",
		},
		{
			"trigger": "_C_Calendar.EventHasPendingInvite\t()",
			"contents": "${1:hasPendingInvite} = C_Calendar.EventHasPendingInvite()$0",
		},
		{
			"trigger": "_C_Calendar.EventHaveSettingsChanged\t()",
			"contents": "${1:haveSettingsChanged} = C_Calendar.EventHaveSettingsChanged()$0",
		},
		{
			"trigger": "_C_Calendar.GetClubCalendarEvents\t(\"clubId\", startTime, endTime)",
			"contents": "${1:events} = C_Calendar.GetClubCalendarEvents(\"${2:clubId}\", ${3:startTime}, ${4:endTime})$0",
		},
		{
			"trigger": "_C_Calendar.GetDayEvent\t(monthOffset, monthDay, index)",
			"contents": "${1:event} = C_Calendar.GetDayEvent(${2:monthOffset}, ${3:monthDay}, ${4:index})$0",
		},
		{
			"trigger": "_C_Calendar.GetDefaultGuildFilter\t()",
			"contents": "${1:info} = C_Calendar.GetDefaultGuildFilter()$0",
		},
		{
			"trigger": "_C_Calendar.GetEventIndex\t()",
			"contents": "${1:info} = C_Calendar.GetEventIndex()$0",
		},
		{
			"trigger": "_C_Calendar.GetEventIndexInfo\t(\"eventID\", [monthOffset, [monthDay]])",
			"contents": "${1:eventIndexInfo} = C_Calendar.GetEventIndexInfo(\"${2:eventID}\", [${3:monthOffset}, [${4:monthDay}]])$0",
		},
		{
			"trigger": "_C_Calendar.GetEventInfo\t()",
			"contents": "${1:info} = C_Calendar.GetEventInfo()$0",
		},
		{
			"trigger": "_C_Calendar.GetFirstPendingInvite\t(offsetMonths, monthDay)",
			"contents": "${1:firstPendingInvite} = C_Calendar.GetFirstPendingInvite(${2:offsetMonths}, ${3:monthDay})$0",
		},
		{
			"trigger": "_C_Calendar.GetGuildEventInfo\t(index)",
			"contents": "${1:info} = C_Calendar.GetGuildEventInfo(${2:index})$0",
		},
		{
			"trigger": "_C_Calendar.GetGuildEventSelectionInfo\t(index)",
			"contents": "${1:info} = C_Calendar.GetGuildEventSelectionInfo(${2:index})$0",
		},
		{
			"trigger": "_C_Calendar.GetHolidayInfo\t(monthOffset, monthDay, index)",
			"contents": "${1:event} = C_Calendar.GetHolidayInfo(${2:monthOffset}, ${3:monthDay}, ${4:index})$0",
		},
		{
			"trigger": "_C_Calendar.GetMaxCreateDate\t()",
			"contents": "${1:maxCreateDate} = C_Calendar.GetMaxCreateDate()$0",
		},
		{
			"trigger": "_C_Calendar.GetMinDate\t()",
			"contents": "${1:minDate} = C_Calendar.GetMinDate()$0",
		},
		{
			"trigger": "_C_Calendar.GetMonthInfo\t(offsetMonths)",
			"contents": "${1:monthInfo} = C_Calendar.GetMonthInfo(${2:offsetMonths})$0",
		},
		{
			"trigger": "_C_Calendar.GetNextClubId\t()",
			"contents": "${1:clubId} = C_Calendar.GetNextClubId()$0",
		},
		{
			"trigger": "_C_Calendar.GetNumDayEvents\t(offsetMonths, monthDay)",
			"contents": "${1:numDayEvents} = C_Calendar.GetNumDayEvents(${2:offsetMonths}, ${3:monthDay})$0",
		},
		{
			"trigger": "_C_Calendar.GetNumGuildEvents\t()",
			"contents": "${1:numGuildEvents} = C_Calendar.GetNumGuildEvents()$0",
		},
		{
			"trigger": "_C_Calendar.GetNumInvites\t()",
			"contents": "${1:num} = C_Calendar.GetNumInvites()$0",
		},
		{
			"trigger": "_C_Calendar.GetNumPendingInvites\t()",
			"contents": "${1:num} = C_Calendar.GetNumPendingInvites()$0",
		},
		{
			"trigger": "_C_Calendar.GetRaidInfo\t(offsetMonths, monthDay, eventIndex)",
			"contents": "${1:info} = C_Calendar.GetRaidInfo(${2:offsetMonths}, ${3:monthDay}, ${4:eventIndex})$0",
		},
		{
			"trigger": "_C_Calendar.IsActionPending\t()",
			"contents": "${1:actionPending} = C_Calendar.IsActionPending()$0",
		},
		{
			"trigger": "_C_Calendar.OpenEvent\t(offsetMonths, monthDay, index)",
			"contents": "${1:success} = C_Calendar.OpenEvent(${2:offsetMonths}, ${3:monthDay}, ${4:index})$0",
		},
		{
			"trigger": "_C_CampaignInfo.GetCampaignChapterInfo\t(campaignChapterID)",
			"contents": "${1:campaignChapterInfo} = C_CampaignInfo.GetCampaignChapterInfo(${2:campaignChapterID})$0",
		},
		{
			"trigger": "_C_CampaignInfo.GetCampaignInfo\t(campaignID)",
			"contents": "${1:campaignInfo} = C_CampaignInfo.GetCampaignInfo(${2:campaignID})$0",
		},
		{
			"trigger": "_C_CampaignInfo.GetCurrentCampaignChapterID\t()",
			"contents": "${1:campaignChapterID} = C_CampaignInfo.GetCurrentCampaignChapterID()$0",
		},
		{
			"trigger": "_C_CampaignInfo.GetCurrentCampaignID\t()",
			"contents": "${1:campaignID} = C_CampaignInfo.GetCurrentCampaignID()$0",
		},
		{
			"trigger": "_C_CampaignInfo.IsCampaignQuest\t(questID)",
			"contents": "${1:isCampaignQuest} = C_CampaignInfo.IsCampaignQuest(${2:questID})$0",
		},
		{
			"trigger": "_C_ChallengeMode.GetActiveChallengeMapID\t()",
			"contents": "${1:mapChallengeModeID} = C_ChallengeMode.GetActiveChallengeMapID()$0",
		},
		{
			"trigger": "_C_ChallengeMode.GetActiveKeystoneInfo\t()",
			"contents": "${1:activeKeystoneLevel}, ${2:activeAffixIDs}, ${3:wasActiveKeystoneCharged} = C_ChallengeMode.GetActiveKeystoneInfo()$0",
		},
		{
			"trigger": "_C_ChallengeMode.GetAffixInfo\t(affixID)",
			"contents": "${1:name}, ${2:description}, ${3:filedataid} = C_ChallengeMode.GetAffixInfo(${4:affixID})$0",
		},
		{
			"trigger": "_C_ChallengeMode.GetCompletionInfo\t()",
			"contents": "${1:mapChallengeModeID}, ${2:level}, ${3:time}, ${4:onTime}, ${5:keystoneUpgradeLevels} = C_ChallengeMode.GetCompletionInfo()$0",
		},
		{
			"trigger": "_C_ChallengeMode.GetDeathCount\t()",
			"contents": "${1:numDeaths}, ${2:timeLost} = C_ChallengeMode.GetDeathCount()$0",
		},
		{
			"trigger": "_C_ChallengeMode.GetGuildLeaders\t()",
			"contents": "${1:topAttempt} = C_ChallengeMode.GetGuildLeaders()$0",
		},
		{
			"trigger": "_C_ChallengeMode.GetMapTable\t()",
			"contents": "${1:mapChallengeModeIDs} = C_ChallengeMode.GetMapTable()$0",
		},
		{
			"trigger": "_C_ChallengeMode.GetMapUIInfo\t(mapChallengeModeID)",
			"contents": "${1:name}, ${2:id}, ${3:timeLimit}, ${4:texture}, ${5:backgroundTexture} = C_ChallengeMode.GetMapUIInfo(${6:mapChallengeModeID})$0",
		},
		{
			"trigger": "_C_ChallengeMode.GetPowerLevelDamageHealthMod\t(powerLevel)",
			"contents": "${1:damageMod}, ${2:healthMod} = C_ChallengeMode.GetPowerLevelDamageHealthMod(${3:powerLevel})$0",
		},
		{
			"trigger": "_C_ChallengeMode.GetSlottedKeystoneInfo\t()",
			"contents": "${1:mapChallengeModeID}, ${2:affixIDs}, ${3:keystoneLevel} = C_ChallengeMode.GetSlottedKeystoneInfo()$0",
		},
		{
			"trigger": "_C_ChallengeMode.HasSlottedKeystone\t()",
			"contents": "${1:hasSlottedKeystone} = C_ChallengeMode.HasSlottedKeystone()$0",
		},
		{
			"trigger": "_C_ChallengeMode.IsChallengeModeActive\t()",
			"contents": "${1:challengeModeActive} = C_ChallengeMode.IsChallengeModeActive()$0",
		},
		{
			"trigger": "_C_ChallengeMode.RemoveKeystone\t()",
			"contents": "${1:removalSuccessful} = C_ChallengeMode.RemoveKeystone()$0",
		},
		{
			"trigger": "_C_ChallengeMode.StartChallengeMode\t()",
			"contents": "${1:success} = C_ChallengeMode.StartChallengeMode()$0",
		},
		{
			"trigger": "_C_ChatBubbles.GetAllChatBubbles\t(includeForbidden)",
			"contents": "${1:chatBubbles} = C_ChatBubbles.GetAllChatBubbles(${2:includeForbidden})$0",
		},
		{
			"trigger": "_C_ChatInfo.GetChannelRosterInfo\t(channelIndex, rosterIndex)",
			"contents": "${1:name}, ${2:owner}, ${3:moderator}, ${4:guid} = C_ChatInfo.GetChannelRosterInfo(${5:channelIndex}, ${6:rosterIndex})$0",
		},
		{
			"trigger": "_C_ChatInfo.GetNumActiveChannels\t()",
			"contents": "${1:numChannels} = C_ChatInfo.GetNumActiveChannels()$0",
		},
		{
			"trigger": "_C_ChatInfo.GetRegisteredAddonMessagePrefixes\t()",
			"contents": "${1:registeredPrefixes} = C_ChatInfo.GetRegisteredAddonMessagePrefixes()$0",
		},
		{
			"trigger": "_C_ChatInfo.IsAddonMessagePrefixRegistered\t(\"prefix\")",
			"contents": "${1:isRegistered} = C_ChatInfo.IsAddonMessagePrefixRegistered(\"${2:prefix}\")$0",
		},
		{
			"trigger": "_C_ChatInfo.IsPartyChannelType\t(channelType)",
			"contents": "${1:isPartyChannelType} = C_ChatInfo.IsPartyChannelType(${2:channelType})$0",
		},
		{
			"trigger": "_C_ChatInfo.IsValidChatLine\t([chatLine])",
			"contents": "${1:isValid} = C_ChatInfo.IsValidChatLine([${2:chatLine}])$0",
		},
		{
			"trigger": "_C_ChatInfo.RegisterAddonMessagePrefix\t(\"prefix\")",
			"contents": "${1:successfulRequest} = C_ChatInfo.RegisterAddonMessagePrefix(\"${2:prefix}\")$0",
		},
		{
			"trigger": "_C_ChatInfo.ReplaceIconAndGroupExpressions\t(\"input\", [noIconReplacement, [noGroupReplacement]])",
			"contents": "${1:output} = C_ChatInfo.ReplaceIconAndGroupExpressions(\"${2:input}\", [${3:noIconReplacement}, [${4:noGroupReplacement}]])$0",
		},
		{
			"trigger": "_C_ChatInfo.SendAddonMessage\t(\"prefix\", \"message\", [\"chatType\", [\"target\"]])",
			"contents": "${1:success} = C_ChatInfo.SendAddonMessage(\"${2:prefix}\", \"${3:message}\", [\"${4:chatType}\", [\"${5:target}\"]])$0",
		},
		{
			"trigger": "_C_ChatInfo.SendAddonMessageLogged\t(\"prefix\", \"message\", [\"chatType\", [\"target\"]])",
			"contents": "${1:success} = C_ChatInfo.SendAddonMessageLogged(\"${2:prefix}\", \"${3:message}\", [\"${4:chatType}\", [\"${5:target}\"]])$0",
		},
		{
			"trigger": "_C_Club.CanResolvePlayerLocationFromClubMessageData\t(\"clubId\", \"streamId\", epoch, position)",
			"contents": "${1:canResolve} = C_Club.CanResolvePlayerLocationFromClubMessageData(\"${2:clubId}\", \"${3:streamId}\", ${4:epoch}, ${5:position})$0",
		},
		{
			"trigger": "_C_Club.CompareBattleNetDisplayName\t(\"clubId\", lhsMemberId, rhsMemberId)",
			"contents": "${1:comparison} = C_Club.CompareBattleNetDisplayName(\"${2:clubId}\", ${3:lhsMemberId}, ${4:rhsMemberId})$0",
		},
		{
			"trigger": "_C_Club.FocusStream\t(\"clubId\", \"streamId\")",
			"contents": "${1:focused} = C_Club.FocusStream(\"${2:clubId}\", \"${3:streamId}\")$0",
		},
		{
			"trigger": "_C_Club.GetAssignableRoles\t(\"clubId\", memberId)",
			"contents": "${1:assignableRoles} = C_Club.GetAssignableRoles(\"${2:clubId}\", ${3:memberId})$0",
		},
		{
			"trigger": "_C_Club.GetAvatarIdList\t(clubType)",
			"contents": "${1:avatarIds} = C_Club.GetAvatarIdList(${2:clubType})$0",
		},
		{
			"trigger": "_C_Club.GetClubInfo\t(\"clubId\")",
			"contents": "${1:info} = C_Club.GetClubInfo(\"${2:clubId}\")$0",
		},
		{
			"trigger": "_C_Club.GetClubLimits\t(clubType)",
			"contents": "${1:clubLimits} = C_Club.GetClubLimits(${2:clubType})$0",
		},
		{
			"trigger": "_C_Club.GetClubMembers\t(\"clubId\", [\"streamId\"])",
			"contents": "${1:members} = C_Club.GetClubMembers(\"${2:clubId}\", [\"${3:streamId}\"])$0",
		},
		{
			"trigger": "_C_Club.GetClubPrivileges\t(\"clubId\")",
			"contents": "${1:privilegeInfo} = C_Club.GetClubPrivileges(\"${2:clubId}\")$0",
		},
		{
			"trigger": "_C_Club.GetClubStreamNotificationSettings\t(\"clubId\")",
			"contents": "${1:settings} = C_Club.GetClubStreamNotificationSettings(\"${2:clubId}\")$0",
		},
		{
			"trigger": "_C_Club.GetCommunityNameResultText\t(result)",
			"contents": "${1:errorCode} = C_Club.GetCommunityNameResultText(${2:result})$0",
		},
		{
			"trigger": "_C_Club.GetGuildClubId\t()",
			"contents": "${1:guildClubId} = C_Club.GetGuildClubId()$0",
		},
		{
			"trigger": "_C_Club.GetInfoFromLastCommunityChatLine\t()",
			"contents": "${1:messageInfo}, ${2:clubId}, ${3:streamId}, ${4:clubType} = C_Club.GetInfoFromLastCommunityChatLine()$0",
		},
		{
			"trigger": "_C_Club.GetInvitationCandidates\t([\"filter\", [maxResults, [cursorPosition, [allowFullMatch, \"clubId\"]]]])",
			"contents": "${1:candidates} = C_Club.GetInvitationCandidates([\"${2:filter}\", [${3:maxResults}, [${4:cursorPosition}, [${5:allowFullMatch}, \"${6:clubId}\"]]]])$0",
		},
		{
			"trigger": "_C_Club.GetInvitationInfo\t(\"clubId\")",
			"contents": "${1:invitation} = C_Club.GetInvitationInfo(\"${2:clubId}\")$0",
		},
		{
			"trigger": "_C_Club.GetInvitationsForClub\t(\"clubId\")",
			"contents": "${1:invitations} = C_Club.GetInvitationsForClub(\"${2:clubId}\")$0",
		},
		{
			"trigger": "_C_Club.GetInvitationsForSelf\t()",
			"contents": "${1:invitations} = C_Club.GetInvitationsForSelf()$0",
		},
		{
			"trigger": "_C_Club.GetLastTicketResponse\t(\"ticket\")",
			"contents": "${1:error}, ${2:info}, ${3:showError} = C_Club.GetLastTicketResponse(\"${4:ticket}\")$0",
		},
		{
			"trigger": "_C_Club.GetMemberInfo\t(\"clubId\", memberId)",
			"contents": "${1:info} = C_Club.GetMemberInfo(\"${2:clubId}\", ${3:memberId})$0",
		},
		{
			"trigger": "_C_Club.GetMemberInfoForSelf\t(\"clubId\")",
			"contents": "${1:info} = C_Club.GetMemberInfoForSelf(\"${2:clubId}\")$0",
		},
		{
			"trigger": "_C_Club.GetMessageInfo\t(\"clubId\", \"streamId\", messageId)",
			"contents": "${1:message} = C_Club.GetMessageInfo(\"${2:clubId}\", \"${3:streamId}\", ${4:messageId})$0",
		},
		{
			"trigger": "_C_Club.GetMessageRanges\t(\"clubId\", \"streamId\")",
			"contents": "${1:ranges} = C_Club.GetMessageRanges(\"${2:clubId}\", \"${3:streamId}\")$0",
		},
		{
			"trigger": "_C_Club.GetMessagesBefore\t(\"clubId\", \"streamId\", newest, count)",
			"contents": "${1:messages} = C_Club.GetMessagesBefore(\"${2:clubId}\", \"${3:streamId}\", ${4:newest}, ${5:count})$0",
		},
		{
			"trigger": "_C_Club.GetMessagesInRange\t(\"clubId\", \"streamId\", oldest, newest)",
			"contents": "${1:messages} = C_Club.GetMessagesInRange(\"${2:clubId}\", \"${3:streamId}\", ${4:oldest}, ${5:newest})$0",
		},
		{
			"trigger": "_C_Club.GetStreamInfo\t(\"clubId\", \"streamId\")",
			"contents": "${1:streamInfo} = C_Club.GetStreamInfo(\"${2:clubId}\", \"${3:streamId}\")$0",
		},
		{
			"trigger": "_C_Club.GetStreams\t(\"clubId\")",
			"contents": "${1:streams} = C_Club.GetStreams(\"${2:clubId}\")$0",
		},
		{
			"trigger": "_C_Club.GetStreamViewMarker\t(\"clubId\", \"streamId\")",
			"contents": "${1:lastReadTime} = C_Club.GetStreamViewMarker(\"${2:clubId}\", \"${3:streamId}\")$0",
		},
		{
			"trigger": "_C_Club.GetSubscribedClubs\t()",
			"contents": "${1:clubs} = C_Club.GetSubscribedClubs()$0",
		},
		{
			"trigger": "_C_Club.GetTickets\t(\"clubId\")",
			"contents": "${1:tickets} = C_Club.GetTickets(\"${2:clubId}\")$0",
		},
		{
			"trigger": "_C_Club.IsAccountMuted\t(\"clubId\")",
			"contents": "${1:accountMuted} = C_Club.IsAccountMuted(\"${2:clubId}\")$0",
		},
		{
			"trigger": "_C_Club.IsBeginningOfStream\t(\"clubId\", \"streamId\", messageId)",
			"contents": "${1:isBeginningOfStream} = C_Club.IsBeginningOfStream(\"${2:clubId}\", \"${3:streamId}\", ${4:messageId})$0",
		},
		{
			"trigger": "_C_Club.IsEnabled\t()",
			"contents": "${1:clubsEnabled} = C_Club.IsEnabled()$0",
		},
		{
			"trigger": "_C_Club.IsRestricted\t()",
			"contents": "${1:restrictionReason} = C_Club.IsRestricted()$0",
		},
		{
			"trigger": "_C_Club.IsSubscribedToStream\t(\"clubId\", \"streamId\")",
			"contents": "${1:subscribed} = C_Club.IsSubscribedToStream(\"${2:clubId}\", \"${3:streamId}\")$0",
		},
		{
			"trigger": "_C_Club.RequestMoreMessagesBefore\t(\"clubId\", \"streamId\", [messageId, [count]])",
			"contents": "${1:alreadyHasMessages} = C_Club.RequestMoreMessagesBefore(\"${2:clubId}\", \"${3:streamId}\", [${4:messageId}, [${5:count}]])$0",
		},
		{
			"trigger": "_C_Club.ShouldAllowClubType\t(clubType)",
			"contents": "${1:clubTypeIsAllowed} = C_Club.ShouldAllowClubType(${2:clubType})$0",
		},
		{
			"trigger": "_C_Club.ValidateText\t(clubType, \"text\", clubFieldType)",
			"contents": "${1:result} = C_Club.ValidateText(${2:clubType}, \"${3:text}\", ${4:clubFieldType})$0",
		},
		{
			"trigger": "_C_Commentator.AreTeamsSwapped\t()",
			"contents": "${1:teamsAreSwapped} = C_Commentator.AreTeamsSwapped()$0",
		},
		{
			"trigger": "_C_Commentator.CanUseCommentatorCheats\t()",
			"contents": "${1:canUseCommentatorCheats} = C_Commentator.CanUseCommentatorCheats()$0",
		},
		{
			"trigger": "_C_Commentator.GetAdditionalCameraWeight\t()",
			"contents": "${1:teamIndex}, ${2:playerIndex} = C_Commentator.GetAdditionalCameraWeight()$0",
		},
		{
			"trigger": "_C_Commentator.GetAdditionalCameraWeightByToken\t(\"token\")",
			"contents": "${1:weight} = C_Commentator.GetAdditionalCameraWeightByToken(\"${2:token}\")$0",
		},
		{
			"trigger": "_C_Commentator.GetAllPlayerOverrideNames\t()",
			"contents": "${1:nameEntries} = C_Commentator.GetAllPlayerOverrideNames()$0",
		},
		{
			"trigger": "_C_Commentator.GetCamera\t()",
			"contents": "${1:xPos}, ${2:yPos}, ${3:zPos}, ${4:yaw}, ${5:pitch}, ${6:fov} = C_Commentator.GetCamera()$0",
		},
		{
			"trigger": "_C_Commentator.GetCameraCollision\t()",
			"contents": "${1:isColliding} = C_Commentator.GetCameraCollision()$0",
		},
		{
			"trigger": "_C_Commentator.GetCameraPosition\t()",
			"contents": "${1:xPos}, ${2:yPos}, ${3:zPos} = C_Commentator.GetCameraPosition()$0",
		},
		{
			"trigger": "_C_Commentator.GetCurrentMapID\t()",
			"contents": "${1:mapID} = C_Commentator.GetCurrentMapID()$0",
		},
		{
			"trigger": "_C_Commentator.GetDampeningPercent\t()",
			"contents": "${1:percentage} = C_Commentator.GetDampeningPercent()$0",
		},
		{
			"trigger": "_C_Commentator.GetDistanceBeforeForcedHorizontalConvergence\t()",
			"contents": "${1:distance} = C_Commentator.GetDistanceBeforeForcedHorizontalConvergence()$0",
		},
		{
			"trigger": "_C_Commentator.GetDurationToForceHorizontalConvergence\t()",
			"contents": "${1:ms} = C_Commentator.GetDurationToForceHorizontalConvergence()$0",
		},
		{
			"trigger": "_C_Commentator.GetExcludeDistance\t()",
			"contents": "${1:excludeDistance} = C_Commentator.GetExcludeDistance()$0",
		},
		{
			"trigger": "_C_Commentator.GetHardlockWeight\t()",
			"contents": "${1:weight} = C_Commentator.GetHardlockWeight()$0",
		},
		{
			"trigger": "_C_Commentator.GetHorizontalAngleThresholdToSmooth\t()",
			"contents": "${1:angle} = C_Commentator.GetHorizontalAngleThresholdToSmooth()$0",
		},
		{
			"trigger": "_C_Commentator.GetInstanceInfo\t(mapIndex, instanceIndex)",
			"contents": "${1:mapID}, ${2:mapName}, ${3:status}, ${4:instanceIDLow}, ${5:instanceIDHigh} = C_Commentator.GetInstanceInfo(${6:mapIndex}, ${7:instanceIndex})$0",
		},
		{
			"trigger": "_C_Commentator.GetLookAtLerpAmount\t()",
			"contents": "${1:amount} = C_Commentator.GetLookAtLerpAmount()$0",
		},
		{
			"trigger": "_C_Commentator.GetMapInfo\t(mapIndex)",
			"contents": "${1:teamSize}, ${2:minLevel}, ${3:maxLevel}, ${4:numInstances} = C_Commentator.GetMapInfo(${5:mapIndex})$0",
		},
		{
			"trigger": "_C_Commentator.GetMaxNumPlayersPerTeam\t()",
			"contents": "${1:maxNumPlayersPerTeam} = C_Commentator.GetMaxNumPlayersPerTeam()$0",
		},
		{
			"trigger": "_C_Commentator.GetMaxNumTeams\t()",
			"contents": "${1:maxNumTeams} = C_Commentator.GetMaxNumTeams()$0",
		},
		{
			"trigger": "_C_Commentator.GetMode\t()",
			"contents": "${1:commentatorMode} = C_Commentator.GetMode()$0",
		},
		{
			"trigger": "_C_Commentator.GetMsToHoldForHorizontalMovement\t()",
			"contents": "${1:ms} = C_Commentator.GetMsToHoldForHorizontalMovement()$0",
		},
		{
			"trigger": "_C_Commentator.GetMsToHoldForVerticalMovement\t()",
			"contents": "${1:ms} = C_Commentator.GetMsToHoldForVerticalMovement()$0",
		},
		{
			"trigger": "_C_Commentator.GetMsToSmoothHorizontalChange\t()",
			"contents": "${1:ms} = C_Commentator.GetMsToSmoothHorizontalChange()$0",
		},
		{
			"trigger": "_C_Commentator.GetMsToSmoothVerticalChange\t()",
			"contents": "${1:ms} = C_Commentator.GetMsToSmoothVerticalChange()$0",
		},
		{
			"trigger": "_C_Commentator.GetNumMaps\t()",
			"contents": "${1:numMaps} = C_Commentator.GetNumMaps()$0",
		},
		{
			"trigger": "_C_Commentator.GetNumPlayers\t(factionIndex)",
			"contents": "${1:numPlayers} = C_Commentator.GetNumPlayers(${2:factionIndex})$0",
		},
		{
			"trigger": "_C_Commentator.GetPlayerCooldownInfo\t(teamIndex, playerIndex, spellID)",
			"contents": "${1:startTime}, ${2:duration}, ${3:enable} = C_Commentator.GetPlayerCooldownInfo(${4:teamIndex}, ${5:playerIndex}, ${6:spellID})$0",
		},
		{
			"trigger": "_C_Commentator.GetPlayerCrowdControlInfo\t(teamIndex, playerIndex)",
			"contents": "${1:spellID}, ${2:expiration}, ${3:duration} = C_Commentator.GetPlayerCrowdControlInfo(${4:teamIndex}, ${5:playerIndex})$0",
		},
		{
			"trigger": "_C_Commentator.GetPlayerCrowdControlInfoByUnit\t(\"token\")",
			"contents": "${1:spellID}, ${2:expiration}, ${3:duration} = C_Commentator.GetPlayerCrowdControlInfoByUnit(\"${4:token}\")$0",
		},
		{
			"trigger": "_C_Commentator.GetPlayerFlagInfo\t(teamIndex, playerIndex)",
			"contents": "${1:hasFlag} = C_Commentator.GetPlayerFlagInfo(${2:teamIndex}, ${3:playerIndex})$0",
		},
		{
			"trigger": "_C_Commentator.GetPlayerInfo\t(teamIndex, playerIndex)",
			"contents": "${1:unitToken}, ${2:name}, ${3:faction}, ${4:specialization}, ${5:damageDone}, ${6:damageTaken}, ${7:healingDone}, ${8:healingTaken}, ${9:kills}, ${10:deaths} = C_Commentator.GetPlayerInfo(${11:teamIndex}, ${12:playerIndex})$0",
		},
		{
			"trigger": "_C_Commentator.GetPlayerOverrideName\t(\"originalName\")",
			"contents": "${1:overrideName} = C_Commentator.GetPlayerOverrideName(\"${2:originalName}\")$0",
		},
		{
			"trigger": "_C_Commentator.GetPlayerSpellCharges\t(teamIndex, playerIndex, spellID)",
			"contents": "${1:charges}, ${2:maxCharges}, ${3:startTime}, ${4:duration} = C_Commentator.GetPlayerSpellCharges(${5:teamIndex}, ${6:playerIndex}, ${7:spellID})$0",
		},
		{
			"trigger": "_C_Commentator.GetPositionLerpAmount\t()",
			"contents": "${1:amount} = C_Commentator.GetPositionLerpAmount()$0",
		},
		{
			"trigger": "_C_Commentator.GetSmoothFollowTransitioning\t()",
			"contents": "${1:enabled} = C_Commentator.GetSmoothFollowTransitioning()$0",
		},
		{
			"trigger": "_C_Commentator.GetSoftlockWeight\t()",
			"contents": "${1:weight} = C_Commentator.GetSoftlockWeight()$0",
		},
		{
			"trigger": "_C_Commentator.GetSpeedFactor\t()",
			"contents": "${1:factor} = C_Commentator.GetSpeedFactor()$0",
		},
		{
			"trigger": "_C_Commentator.GetStartLocation\t(mapID)",
			"contents": "${1:pos} = C_Commentator.GetStartLocation(${2:mapID})$0",
		},
		{
			"trigger": "_C_Commentator.GetTeamHighlightColor\t(teamIndex)",
			"contents": "${1:highlightColorR}, ${2:highlightColorG}, ${3:highlightColorB}, ${4:highlightColorA} = C_Commentator.GetTeamHighlightColor(${5:teamIndex})$0",
		},
		{
			"trigger": "_C_Commentator.GetTimeLeftInMatch\t()",
			"contents": "${1:timeLeft} = C_Commentator.GetTimeLeftInMatch()$0",
		},
		{
			"trigger": "_C_Commentator.GetTrackedDefensiveCooldowns\t(teamIndex, playerIndex)",
			"contents": "${1:trackedDefensiveCooldowns} = C_Commentator.GetTrackedDefensiveCooldowns(${2:teamIndex}, ${3:playerIndex})$0",
		},
		{
			"trigger": "_C_Commentator.GetTrackedOffensiveCooldowns\t(teamIndex, playerIndex)",
			"contents": "${1:trackedCooldowns} = C_Commentator.GetTrackedOffensiveCooldowns(${2:teamIndex}, ${3:playerIndex})$0",
		},
		{
			"trigger": "_C_Commentator.GetWargameInfo\t(listID)",
			"contents": "${1:name}, ${2:minPlayers}, ${3:maxPlayers}, ${4:isArena} = C_Commentator.GetWargameInfo(${5:listID})$0",
		},
		{
			"trigger": "_C_Commentator.HasTrackedAuras\t(\"token\")",
			"contents": "${1:hasOffensiveAura}, ${2:hasDefensiveAura} = C_Commentator.HasTrackedAuras(\"${3:token}\")$0",
		},
		{
			"trigger": "_C_Commentator.IsSmartCameraLocked\t()",
			"contents": "${1:isSmartCameraLocked} = C_Commentator.IsSmartCameraLocked()$0",
		},
		{
			"trigger": "_C_Commentator.IsSpectating\t()",
			"contents": "${1:isSpectating} = C_Commentator.IsSpectating()$0",
		},
		{
			"trigger": "_C_Commentator.IsTrackedDefensiveAura\t(spellID)",
			"contents": "${1:isDefensiveTrigger} = C_Commentator.IsTrackedDefensiveAura(${2:spellID})$0",
		},
		{
			"trigger": "_C_Commentator.IsTrackedDefensiveCooldown\t(teamIndex, playerIndex, spellID)",
			"contents": "${1:isTrackedCooldown} = C_Commentator.IsTrackedDefensiveCooldown(${2:teamIndex}, ${3:playerIndex}, ${4:spellID})$0",
		},
		{
			"trigger": "_C_Commentator.IsTrackedOffensiveAura\t(spellID)",
			"contents": "${1:isOffensiveTrigger} = C_Commentator.IsTrackedOffensiveAura(${2:spellID})$0",
		},
		{
			"trigger": "_C_Commentator.IsTrackedOffensiveCooldown\t(teamIndex, playerIndex, spellID)",
			"contents": "${1:isTrackedCooldown} = C_Commentator.IsTrackedOffensiveCooldown(${2:teamIndex}, ${3:playerIndex}, ${4:spellID})$0",
		},
		{
			"trigger": "_C_Commentator.IsUsingSmartCamera\t()",
			"contents": "${1:isUsingSmartCamera} = C_Commentator.IsUsingSmartCamera()$0",
		},
		{
			"trigger": "_C_ConfigurationWarnings.GetConfigurationWarnings\t(includeSeenWarnings)",
			"contents": "${1:configurationWarnings} = C_ConfigurationWarnings.GetConfigurationWarnings(${2:includeSeenWarnings})$0",
		},
		{
			"trigger": "_C_ConfigurationWarnings.GetConfigurationWarningSeen\t(configurationWarning)",
			"contents": "${1:hasSeenConfigurationWarning} = C_ConfigurationWarnings.GetConfigurationWarningSeen(${2:configurationWarning})$0",
		},
		{
			"trigger": "_C_ConfigurationWarnings.GetConfigurationWarningString\t(configurationWarning)",
			"contents": "${1:configurationWarningString} = C_ConfigurationWarnings.GetConfigurationWarningString(${2:configurationWarning})$0",
		},
		{
			"trigger": "_C_Console.GetAllCommands\t()",
			"contents": "${1:commands} = C_Console.GetAllCommands()$0",
		},
		{
			"trigger": "_C_Console.GetColorFromType\t(colorType)",
			"contents": "${1:color} = C_Console.GetColorFromType(${2:colorType})$0",
		},
		{
			"trigger": "_C_Console.GetFontHeight\t()",
			"contents": "${1:fontHeightInPixels} = C_Console.GetFontHeight()$0",
		},
		{
			"trigger": "_C_ContributionCollector.GetActive\t()",
			"contents": "${1:contributionID} = C_ContributionCollector.GetActive()$0",
		},
		{
			"trigger": "_C_ContributionCollector.GetAtlases\t(contributionID)",
			"contents": "${1:atlasName} = C_ContributionCollector.GetAtlases(${2:contributionID})$0",
		},
		{
			"trigger": "_C_ContributionCollector.GetBuffs\t(contributionID)",
			"contents": "${1:spellID} = C_ContributionCollector.GetBuffs(${2:contributionID})$0",
		},
		{
			"trigger": "_C_ContributionCollector.GetContributionAppearance\t(contributionID, contributionState)",
			"contents": "${1:appearance} = C_ContributionCollector.GetContributionAppearance(${2:contributionID}, ${3:contributionState})$0",
		},
		{
			"trigger": "_C_ContributionCollector.GetContributionCollectorsForMap\t(uiMapID)",
			"contents": "${1:contributionCollectors} = C_ContributionCollector.GetContributionCollectorsForMap(${2:uiMapID})$0",
		},
		{
			"trigger": "_C_ContributionCollector.GetContributionResult\t(contributionID)",
			"contents": "${1:result} = C_ContributionCollector.GetContributionResult(${2:contributionID})$0",
		},
		{
			"trigger": "_C_ContributionCollector.GetDescription\t(contributionID)",
			"contents": "${1:description} = C_ContributionCollector.GetDescription(${2:contributionID})$0",
		},
		{
			"trigger": "_C_ContributionCollector.GetManagedContributionsForCreatureID\t(creatureID)",
			"contents": "${1:contributionID} = C_ContributionCollector.GetManagedContributionsForCreatureID(${2:creatureID})$0",
		},
		{
			"trigger": "_C_ContributionCollector.GetName\t(contributionID)",
			"contents": "${1:name} = C_ContributionCollector.GetName(${2:contributionID})$0",
		},
		{
			"trigger": "_C_ContributionCollector.GetOrderIndex\t(contributionID)",
			"contents": "${1:orderIndex} = C_ContributionCollector.GetOrderIndex(${2:contributionID})$0",
		},
		{
			"trigger": "_C_ContributionCollector.GetRequiredContributionCurrency\t(contributionID)",
			"contents": "${1:currencyID}, ${2:currencyAmount} = C_ContributionCollector.GetRequiredContributionCurrency(${3:contributionID})$0",
		},
		{
			"trigger": "_C_ContributionCollector.GetRequiredContributionItem\t(contributionID)",
			"contents": "${1:itemID}, ${2:itemCount} = C_ContributionCollector.GetRequiredContributionItem(${3:contributionID})$0",
		},
		{
			"trigger": "_C_ContributionCollector.GetRewardQuestID\t(contributionID)",
			"contents": "${1:questID} = C_ContributionCollector.GetRewardQuestID(${2:contributionID})$0",
		},
		{
			"trigger": "_C_ContributionCollector.GetState\t(contributionID)",
			"contents": "${1:contributionState}, ${2:contributionPercentageComplete}, ${3:timeOfNextStateChange}, ${4:startTime} = C_ContributionCollector.GetState(${5:contributionID})$0",
		},
		{
			"trigger": "_C_ContributionCollector.HasPendingContribution\t(contributionID)",
			"contents": "${1:hasPending} = C_ContributionCollector.HasPendingContribution(${2:contributionID})$0",
		},
		{
			"trigger": "_C_ContributionCollector.IsAwaitingRewardQuestData\t(contributionID)",
			"contents": "${1:awaitingData} = C_ContributionCollector.IsAwaitingRewardQuestData(${2:contributionID})$0",
		},
		{
			"trigger": "_C_CreatureInfo.GetClassInfo\t(classID)",
			"contents": "${1:classInfo} = C_CreatureInfo.GetClassInfo(${2:classID})$0",
		},
		{
			"trigger": "_C_CreatureInfo.GetFactionInfo\t(raceID)",
			"contents": "${1:factionInfo} = C_CreatureInfo.GetFactionInfo(${2:raceID})$0",
		},
		{
			"trigger": "_C_CreatureInfo.GetRaceInfo\t(raceID)",
			"contents": "${1:raceInfo} = C_CreatureInfo.GetRaceInfo(${2:raceID})$0",
		},
		{
			"trigger": "_C_CurrencyInfo.DoesWarModeBonusApply\t(currencyID)",
			"contents": "${1:warModeApplies} = C_CurrencyInfo.DoesWarModeBonusApply(${2:currencyID})$0",
		},
		{
			"trigger": "_C_CurrencyInfo.GetAzeriteCurrencyID\t()",
			"contents": "${1:azeriteCurrencyID} = C_CurrencyInfo.GetAzeriteCurrencyID()$0",
		},
		{
			"trigger": "_C_CurrencyInfo.GetBasicCurrencyInfo\t(currencyType, [quantity])",
			"contents": "${1:info} = C_CurrencyInfo.GetBasicCurrencyInfo(${2:currencyType}, [${3:quantity}])$0",
		},
		{
			"trigger": "_C_CurrencyInfo.GetCurrencyContainerInfo\t(currencyType, quantity)",
			"contents": "${1:info} = C_CurrencyInfo.GetCurrencyContainerInfo(${2:currencyType}, ${3:quantity})$0",
		},
		{
			"trigger": "_C_CurrencyInfo.GetCurrencyIDFromLink\t(\"currencyLink\")",
			"contents": "${1:currencyID} = C_CurrencyInfo.GetCurrencyIDFromLink(\"${2:currencyLink}\")$0",
		},
		{
			"trigger": "_C_CurrencyInfo.GetFactionGrantedByCurrency\t(currencyID)",
			"contents": "${1:factionID} = C_CurrencyInfo.GetFactionGrantedByCurrency(${2:currencyID})$0",
		},
		{
			"trigger": "_C_CurrencyInfo.GetWarResourcesCurrencyID\t()",
			"contents": "${1:warResourceCurrencyID} = C_CurrencyInfo.GetWarResourcesCurrencyID()$0",
		},
		{
			"trigger": "_C_CurrencyInfo.IsCurrencyContainer\t(currencyID, quantity)",
			"contents": "${1:isCurrencyContainer} = C_CurrencyInfo.IsCurrencyContainer(${2:currencyID}, ${3:quantity})$0",
		},
		{
			"trigger": "_C_Cursor.GetCursorCommunitiesStream\t()",
			"contents": "${1:clubId}, ${2:streamId} = C_Cursor.GetCursorCommunitiesStream()$0",
		},
		{
			"trigger": "_C_Cursor.GetCursorItem\t()",
			"contents": "${1:item} = C_Cursor.GetCursorItem()$0",
		},
		{
			"trigger": "_C_CVar.GetCVar\t(\"name\")",
			"contents": "${1:value} = C_CVar.GetCVar(\"${2:name}\")$0",
		},
		{
			"trigger": "_C_CVar.GetCVarBitfield\t(\"name\", index)",
			"contents": "${1:value} = C_CVar.GetCVarBitfield(\"${2:name}\", ${3:index})$0",
		},
		{
			"trigger": "_C_CVar.GetCVarBool\t(\"name\")",
			"contents": "${1:value} = C_CVar.GetCVarBool(\"${2:name}\")$0",
		},
		{
			"trigger": "_C_CVar.GetCVarDefault\t(\"name\")",
			"contents": "${1:defaultValue} = C_CVar.GetCVarDefault(\"${2:name}\")$0",
		},
		{
			"trigger": "_C_CVar.SetCVar\t(\"name\", [\"value\", [\"scriptCVar\"]])",
			"contents": "${1:success} = C_CVar.SetCVar(\"${2:name}\", [\"${3:value}\", [\"${4:scriptCVar}\"]])$0",
		},
		{
			"trigger": "_C_CVar.SetCVarBitfield\t(\"name\", index, value, [\"scriptCVar\"])",
			"contents": "${1:success} = C_CVar.SetCVarBitfield(\"${2:name}\", ${3:index}, ${4:value}, [\"${5:scriptCVar}\"])$0",
		},
		{
			"trigger": "_C_DateAndTime.AdjustTimeByDays\t(date, days)",
			"contents": "${1:newDate} = C_DateAndTime.AdjustTimeByDays(${2:date}, ${3:days})$0",
		},
		{
			"trigger": "_C_DateAndTime.AdjustTimeByMinutes\t(date, minutes)",
			"contents": "${1:newDate} = C_DateAndTime.AdjustTimeByMinutes(${2:date}, ${3:minutes})$0",
		},
		{
			"trigger": "_C_DateAndTime.CompareCalendarTime\t(lhsCalendarTime, rhsCalendarTime)",
			"contents": "${1:comparison} = C_DateAndTime.CompareCalendarTime(${2:lhsCalendarTime}, ${3:rhsCalendarTime})$0",
		},
		{
			"trigger": "_C_DateAndTime.GetCalendarTimeFromEpoch\t(epoch)",
			"contents": "${1:date} = C_DateAndTime.GetCalendarTimeFromEpoch(${2:epoch})$0",
		},
		{
			"trigger": "_C_DateAndTime.GetCurrentCalendarTime\t()",
			"contents": "${1:date} = C_DateAndTime.GetCurrentCalendarTime()$0",
		},
		{
			"trigger": "_C_DateAndTime.GetServerTimeLocal\t()",
			"contents": "${1:serverTimeLocal} = C_DateAndTime.GetServerTimeLocal()$0",
		},
		{
			"trigger": "_C_DeathInfo.GetCorpseMapPosition\t(uiMapID)",
			"contents": "${1:position} = C_DeathInfo.GetCorpseMapPosition(${2:uiMapID})$0",
		},
		{
			"trigger": "_C_DeathInfo.GetDeathReleasePosition\t(uiMapID)",
			"contents": "${1:position} = C_DeathInfo.GetDeathReleasePosition(${2:uiMapID})$0",
		},
		{
			"trigger": "_C_DeathInfo.GetGraveyardsForMap\t(uiMapID)",
			"contents": "${1:graveyards} = C_DeathInfo.GetGraveyardsForMap(${2:uiMapID})$0",
		},
		{
			"trigger": "_C_DeathInfo.GetSelfResurrectOptions\t()",
			"contents": "${1:options} = C_DeathInfo.GetSelfResurrectOptions()$0",
		},
		{
			"trigger": "_C_EncounterJournal.GetDungeonEntrancesForMap\t(uiMapID)",
			"contents": "${1:dungeonEntrances} = C_EncounterJournal.GetDungeonEntrancesForMap(${2:uiMapID})$0",
		},
		{
			"trigger": "_C_EncounterJournal.GetEncountersOnMap\t(uiMapID)",
			"contents": "${1:encounters} = C_EncounterJournal.GetEncountersOnMap(${2:uiMapID})$0",
		},
		{
			"trigger": "_C_EncounterJournal.GetSectionIconFlags\t(sectionID)",
			"contents": "${1:iconFlags} = C_EncounterJournal.GetSectionIconFlags(${2:sectionID})$0",
		},
		{
			"trigger": "_C_EncounterJournal.GetSectionInfo\t(sectionID)",
			"contents": "${1:info} = C_EncounterJournal.GetSectionInfo(${2:sectionID})$0",
		},
		{
			"trigger": "_C_EncounterJournal.InstanceHasLoot\t([instanceID])",
			"contents": "${1:hasLoot} = C_EncounterJournal.InstanceHasLoot([${2:instanceID}])$0",
		},
		{
			"trigger": "_C_EncounterJournal.IsEncounterComplete\t(journalEncounterID)",
			"contents": "${1:isEncounterComplete} = C_EncounterJournal.IsEncounterComplete(${2:journalEncounterID})$0",
		},
		{
			"trigger": "_C_EquipmentSet.CanUseEquipmentSets\t()",
			"contents": "${1:canUseEquipmentSets} = C_EquipmentSet.CanUseEquipmentSets()$0",
		},
		{
			"trigger": "_C_EquipmentSet.EquipmentSetContainsLockedItems\t(equipmentSetID)",
			"contents": "${1:hasLockedItems} = C_EquipmentSet.EquipmentSetContainsLockedItems(${2:equipmentSetID})$0",
		},
		{
			"trigger": "_C_EquipmentSet.GetEquipmentSetAssignedSpec\t(equipmentSetID)",
			"contents": "${1:specIndex} = C_EquipmentSet.GetEquipmentSetAssignedSpec(${2:equipmentSetID})$0",
		},
		{
			"trigger": "_C_EquipmentSet.GetEquipmentSetForSpec\t(specIndex)",
			"contents": "${1:equipmentSetID} = C_EquipmentSet.GetEquipmentSetForSpec(${2:specIndex})$0",
		},
		{
			"trigger": "_C_EquipmentSet.GetEquipmentSetID\t(\"equipmentSetName\")",
			"contents": "${1:equipmentSetID} = C_EquipmentSet.GetEquipmentSetID(\"${2:equipmentSetName}\")$0",
		},
		{
			"trigger": "_C_EquipmentSet.GetEquipmentSetIDs\t()",
			"contents": "${1:equipmentSetIDs} = C_EquipmentSet.GetEquipmentSetIDs()$0",
		},
		{
			"trigger": "_C_EquipmentSet.GetEquipmentSetInfo\t(equipmentSetID)",
			"contents": "${1:name}, ${2:iconFileID}, ${3:setID}, ${4:isEquipped}, ${5:numItems}, ${6:numEquipped}, ${7:numInInventory}, ${8:numLost}, ${9:numIgnored} = C_EquipmentSet.GetEquipmentSetInfo(${10:equipmentSetID})$0",
		},
		{
			"trigger": "_C_EquipmentSet.GetIgnoredSlots\t(equipmentSetID)",
			"contents": "${1:slotIgnored} = C_EquipmentSet.GetIgnoredSlots(${2:equipmentSetID})$0",
		},
		{
			"trigger": "_C_EquipmentSet.GetItemIDs\t(equipmentSetID)",
			"contents": "${1:itemIDs} = C_EquipmentSet.GetItemIDs(${2:equipmentSetID})$0",
		},
		{
			"trigger": "_C_EquipmentSet.GetItemLocations\t(equipmentSetID)",
			"contents": "${1:locations} = C_EquipmentSet.GetItemLocations(${2:equipmentSetID})$0",
		},
		{
			"trigger": "_C_EquipmentSet.GetNumEquipmentSets\t()",
			"contents": "${1:numEquipmentSets} = C_EquipmentSet.GetNumEquipmentSets()$0",
		},
		{
			"trigger": "_C_EquipmentSet.IsSlotIgnoredForSave\t(slot)",
			"contents": "${1:isSlotIgnored} = C_EquipmentSet.IsSlotIgnoredForSave(${2:slot})$0",
		},
		{
			"trigger": "_C_EquipmentSet.UseEquipmentSet\t(equipmentSetID)",
			"contents": "${1:setWasEquipped} = C_EquipmentSet.UseEquipmentSet(${2:equipmentSetID})$0",
		},
		{
			"trigger": "_C_FogOfWar.GetFogOfWarForMap\t(uiMapID)",
			"contents": "${1:fogOfWarID} = C_FogOfWar.GetFogOfWarForMap(${2:uiMapID})$0",
		},
		{
			"trigger": "_C_FogOfWar.GetFogOfWarInfo\t(fogOfWarID)",
			"contents": "${1:fogOfWarInfo} = C_FogOfWar.GetFogOfWarInfo(${2:fogOfWarID})$0",
		},
		{
			"trigger": "_C_FriendList.AddIgnore\t(\"name\")",
			"contents": "${1:added} = C_FriendList.AddIgnore(\"${2:name}\")$0",
		},
		{
			"trigger": "_C_FriendList.DelIgnore\t(\"name\")",
			"contents": "${1:removed} = C_FriendList.DelIgnore(\"${2:name}\")$0",
		},
		{
			"trigger": "_C_FriendList.GetFriendInfo\t(\"name\")",
			"contents": "${1:info} = C_FriendList.GetFriendInfo(\"${2:name}\")$0",
		},
		{
			"trigger": "_C_FriendList.GetFriendInfoByIndex\t(index)",
			"contents": "${1:info} = C_FriendList.GetFriendInfoByIndex(${2:index})$0",
		},
		{
			"trigger": "_C_FriendList.GetIgnoreName\t(index)",
			"contents": "${1:name} = C_FriendList.GetIgnoreName(${2:index})$0",
		},
		{
			"trigger": "_C_FriendList.GetNumFriends\t()",
			"contents": "${1:numFriends} = C_FriendList.GetNumFriends()$0",
		},
		{
			"trigger": "_C_FriendList.GetNumIgnores\t()",
			"contents": "${1:numIgnores} = C_FriendList.GetNumIgnores()$0",
		},
		{
			"trigger": "_C_FriendList.GetNumOnlineFriends\t()",
			"contents": "${1:numOnline} = C_FriendList.GetNumOnlineFriends()$0",
		},
		{
			"trigger": "_C_FriendList.GetNumWhoResults\t()",
			"contents": "${1:numWhos}, ${2:totalNumWhos} = C_FriendList.GetNumWhoResults()$0",
		},
		{
			"trigger": "_C_FriendList.GetSelectedFriend\t()",
			"contents": "${1:index} = C_FriendList.GetSelectedFriend()$0",
		},
		{
			"trigger": "_C_FriendList.GetSelectedIgnore\t()",
			"contents": "${1:index} = C_FriendList.GetSelectedIgnore()$0",
		},
		{
			"trigger": "_C_FriendList.GetWhoInfo\t(index)",
			"contents": "${1:info} = C_FriendList.GetWhoInfo(${2:index})$0",
		},
		{
			"trigger": "_C_FriendList.IsFriend\t(\"guid\")",
			"contents": "${1:isFriend} = C_FriendList.IsFriend(\"${2:guid}\")$0",
		},
		{
			"trigger": "_C_FriendList.IsIgnored\t(\"token\")",
			"contents": "${1:isIgnored} = C_FriendList.IsIgnored(\"${2:token}\")$0",
		},
		{
			"trigger": "_C_FriendList.IsIgnoredByGuid\t(\"guid\")",
			"contents": "${1:isIgnored} = C_FriendList.IsIgnoredByGuid(\"${2:guid}\")$0",
		},
		{
			"trigger": "_C_FriendList.RemoveFriend\t(\"name\")",
			"contents": "${1:removed} = C_FriendList.RemoveFriend(\"${2:name}\")$0",
		},
		{
			"trigger": "_C_FriendList.SetFriendNotes\t(\"name\", \"notes\")",
			"contents": "${1:found} = C_FriendList.SetFriendNotes(\"${2:name}\", \"${3:notes}\")$0",
		},
		{
			"trigger": "_C_Garrison.GetCurrentGarrTalentTreeFriendshipFactionID\t()",
			"contents": "${1:currentGarrTalentTreeFriendshipFactionID} = C_Garrison.GetCurrentGarrTalentTreeFriendshipFactionID()$0",
		},
		{
			"trigger": "_C_Garrison.GetCurrentGarrTalentTreeID\t()",
			"contents": "${1:currentGarrTalentTreeID} = C_Garrison.GetCurrentGarrTalentTreeID()$0",
		},
		{
			"trigger": "_C_Garrison.GetGarrisonPlotsInstancesForMap\t(uiMapID)",
			"contents": "${1:garrisonPlotInstances} = C_Garrison.GetGarrisonPlotsInstancesForMap(${2:uiMapID})$0",
		},
		{
			"trigger": "_C_Garrison.GetTalentTreeIDsByClassID\t(garrType, classID)",
			"contents": "${1:treeIDs} = C_Garrison.GetTalentTreeIDsByClassID(${2:garrType}, ${3:classID})$0",
		},
		{
			"trigger": "_C_Garrison.IsAtGarrisonMissionNPC\t()",
			"contents": "${1:atGarrisonMissionNPC} = C_Garrison.IsAtGarrisonMissionNPC()$0",
		},
		{
			"trigger": "_C_Garrison.IsEnvironmentCountered\t(missionID)",
			"contents": "${1:environmentCountered} = C_Garrison.IsEnvironmentCountered(${2:missionID})$0",
		},
		{
			"trigger": "_C_GossipInfo.GetGossipPoiForUiMapID\t(uiMapID)",
			"contents": "${1:gossipPoiID} = C_GossipInfo.GetGossipPoiForUiMapID(${2:uiMapID})$0",
		},
		{
			"trigger": "_C_GossipInfo.GetGossipPoiInfo\t(uiMapID, gossipPoiID)",
			"contents": "${1:gossipPoiInfo} = C_GossipInfo.GetGossipPoiInfo(${2:uiMapID}, ${3:gossipPoiID})$0",
		},
		{
			"trigger": "_C_GuildInfo.CanSpeakInGuildChat\t()",
			"contents": "${1:canSpeakInGuildChat} = C_GuildInfo.CanSpeakInGuildChat()$0",
		},
		{
			"trigger": "_C_GuildInfo.GetGuildRankOrder\t(\"guid\")",
			"contents": "${1:rankOrder} = C_GuildInfo.GetGuildRankOrder(\"${2:guid}\")$0",
		},
		{
			"trigger": "_C_GuildInfo.GuildControlGetRankFlags\t(rankOrder)",
			"contents": "${1:permissions} = C_GuildInfo.GuildControlGetRankFlags(${2:rankOrder})$0",
		},
		{
			"trigger": "_C_GuildInfo.IsGuildRankAssignmentAllowed\t(\"guid\", rankOrder)",
			"contents": "${1:isGuildRankAssignmentAllowed} = C_GuildInfo.IsGuildRankAssignmentAllowed(\"${2:guid}\", ${3:rankOrder})$0",
		},
		{
			"trigger": "_C_IncomingSummon.HasIncomingSummon\t(\"unit\")",
			"contents": "${1:summon} = C_IncomingSummon.HasIncomingSummon(\"${2:unit}\")$0",
		},
		{
			"trigger": "_C_IncomingSummon.IncomingSummonStatus\t(\"unit\")",
			"contents": "${1:status} = C_IncomingSummon.IncomingSummonStatus(\"${2:unit}\")$0",
		},
		{
			"trigger": "_C_InvasionInfo.AreInvasionsAvailable\t()",
			"contents": "${1:areInvasionsAvailable} = C_InvasionInfo.AreInvasionsAvailable()$0",
		},
		{
			"trigger": "_C_InvasionInfo.GetInvasionForUiMapID\t(uiMapID)",
			"contents": "${1:invasionID} = C_InvasionInfo.GetInvasionForUiMapID(${2:uiMapID})$0",
		},
		{
			"trigger": "_C_InvasionInfo.GetInvasionInfo\t(invasionID)",
			"contents": "${1:invasionInfo} = C_InvasionInfo.GetInvasionInfo(${2:invasionID})$0",
		},
		{
			"trigger": "_C_InvasionInfo.GetInvasionTimeLeft\t(invasionID)",
			"contents": "${1:timeLeftMinutes} = C_InvasionInfo.GetInvasionTimeLeft(${2:invasionID})$0",
		},
		{
			"trigger": "_C_IslandsQueue.GetIslandDifficultyInfo\t()",
			"contents": "${1:islandDifficultyInfo} = C_IslandsQueue.GetIslandDifficultyInfo()$0",
		},
		{
			"trigger": "_C_IslandsQueue.GetIslandsMaxGroupSize\t()",
			"contents": "${1:maxGroupSize} = C_IslandsQueue.GetIslandsMaxGroupSize()$0",
		},
		{
			"trigger": "_C_IslandsQueue.GetIslandsWeeklyQuestID\t()",
			"contents": "${1:questID} = C_IslandsQueue.GetIslandsWeeklyQuestID()$0",
		},
		{
			"trigger": "_C_Item.CanScrapItem\t(itemLoc)",
			"contents": "${1:canBeScrapped} = C_Item.CanScrapItem(${2:itemLoc})$0",
		},
		{
			"trigger": "_C_Item.CanViewItemPowers\t(itemLoc)",
			"contents": "${1:isItemViewable} = C_Item.CanViewItemPowers(${2:itemLoc})$0",
		},
		{
			"trigger": "_C_Item.DoesItemExist\t(emptiableItemLocation)",
			"contents": "${1:itemExists} = C_Item.DoesItemExist(${2:emptiableItemLocation})$0",
		},
		{
			"trigger": "_C_Item.DoesItemExistByID\t(\"itemInfo\")",
			"contents": "${1:itemExists} = C_Item.DoesItemExistByID(\"${2:itemInfo}\")$0",
		},
		{
			"trigger": "_C_Item.GetCurrentItemLevel\t(itemLocation)",
			"contents": "${1:currentItemLevel} = C_Item.GetCurrentItemLevel(${2:itemLocation})$0",
		},
		{
			"trigger": "_C_Item.GetItemGUID\t(itemLocation)",
			"contents": "${1:itemGuid} = C_Item.GetItemGUID(${2:itemLocation})$0",
		},
		{
			"trigger": "_C_Item.GetItemIcon\t(itemLocation)",
			"contents": "${1:icon} = C_Item.GetItemIcon(${2:itemLocation})$0",
		},
		{
			"trigger": "_C_Item.GetItemIconByID\t(\"itemInfo\")",
			"contents": "${1:icon} = C_Item.GetItemIconByID(\"${2:itemInfo}\")$0",
		},
		{
			"trigger": "_C_Item.GetItemID\t(itemLocation)",
			"contents": "${1:itemID} = C_Item.GetItemID(${2:itemLocation})$0",
		},
		{
			"trigger": "_C_Item.GetItemInventoryType\t(itemLocation)",
			"contents": "${1:inventoryType} = C_Item.GetItemInventoryType(${2:itemLocation})$0",
		},
		{
			"trigger": "_C_Item.GetItemInventoryTypeByID\t(\"itemInfo\")",
			"contents": "${1:inventoryType} = C_Item.GetItemInventoryTypeByID(\"${2:itemInfo}\")$0",
		},
		{
			"trigger": "_C_Item.GetItemLink\t(itemLocation)",
			"contents": "${1:itemLink} = C_Item.GetItemLink(${2:itemLocation})$0",
		},
		{
			"trigger": "_C_Item.GetItemName\t(itemLocation)",
			"contents": "${1:itemName} = C_Item.GetItemName(${2:itemLocation})$0",
		},
		{
			"trigger": "_C_Item.GetItemNameByID\t(\"itemInfo\")",
			"contents": "${1:itemName} = C_Item.GetItemNameByID(\"${2:itemInfo}\")$0",
		},
		{
			"trigger": "_C_Item.GetItemQuality\t(itemLocation)",
			"contents": "${1:itemQuality} = C_Item.GetItemQuality(${2:itemLocation})$0",
		},
		{
			"trigger": "_C_Item.GetItemQualityByID\t(\"itemInfo\")",
			"contents": "${1:itemQuality} = C_Item.GetItemQualityByID(\"${2:itemInfo}\")$0",
		},
		{
			"trigger": "_C_Item.IsBound\t(itemLocation)",
			"contents": "${1:isBound} = C_Item.IsBound(${2:itemLocation})$0",
		},
		{
			"trigger": "_C_Item.IsItemDataCached\t(itemLocation)",
			"contents": "${1:isCached} = C_Item.IsItemDataCached(${2:itemLocation})$0",
		},
		{
			"trigger": "_C_Item.IsItemDataCachedByID\t(\"itemInfo\")",
			"contents": "${1:isCached} = C_Item.IsItemDataCachedByID(\"${2:itemInfo}\")$0",
		},
		{
			"trigger": "_C_Item.IsLocked\t(itemLocation)",
			"contents": "${1:isLocked} = C_Item.IsLocked(${2:itemLocation})$0",
		},
		{
			"trigger": "_C_KeyBindings.GetCustomBindingType\t(bindingIndex)",
			"contents": "${1:customBindingType} = C_KeyBindings.GetCustomBindingType(${2:bindingIndex})$0",
		},
		{
			"trigger": "_C_LFGInfo.GetAllEntriesForCategory\t(category)",
			"contents": "${1:lfgDungeonIDs} = C_LFGInfo.GetAllEntriesForCategory(${2:category})$0",
		},
		{
			"trigger": "_C_LFGInfo.HideNameFromUI\t(dungeonID)",
			"contents": "${1:shouldHide} = C_LFGInfo.HideNameFromUI(${2:dungeonID})$0",
		},
		{
			"trigger": "_C_LFGList.CanActiveEntryUseAutoAccept\t()",
			"contents": "${1:canUseAutoAccept} = C_LFGList.CanActiveEntryUseAutoAccept()$0",
		},
		{
			"trigger": "_C_LFGList.CanCreateQuestGroup\t(questID)",
			"contents": "${1:canCreate} = C_LFGList.CanCreateQuestGroup(${2:questID})$0",
		},
		{
			"trigger": "_C_LFGList.GetActiveEntryInfo\t()",
			"contents": "${1:entryData} = C_LFGList.GetActiveEntryInfo()$0",
		},
		{
			"trigger": "_C_LFGList.GetApplicantInfo\t(applicantID)",
			"contents": "${1:applicantData} = C_LFGList.GetApplicantInfo(${2:applicantID})$0",
		},
		{
			"trigger": "_C_LFGList.GetSearchResultInfo\t(searchResultID)",
			"contents": "${1:searchResultData} = C_LFGList.GetSearchResultInfo(${2:searchResultID})$0",
		},
		{
			"trigger": "_C_LFGList.HasActiveEntryInfo\t()",
			"contents": "${1:hasActiveEntryInfo} = C_LFGList.HasActiveEntryInfo()$0",
		},
		{
			"trigger": "_C_LFGList.HasSearchResultInfo\t(searchResultID)",
			"contents": "${1:hasSearchResultInfo} = C_LFGList.HasSearchResultInfo(${2:searchResultID})$0",
		},
		{
			"trigger": "_C_Loot.IsLegacyLootModeEnabled\t()",
			"contents": "${1:isLegacyLootModeEnabled} = C_Loot.IsLegacyLootModeEnabled()$0",
		},
		{
			"trigger": "_C_Mail.HasInboxMoney\t(inboxIndex)",
			"contents": "${1:inboxItemHasMoneyAttached} = C_Mail.HasInboxMoney(${2:inboxIndex})$0",
		},
		{
			"trigger": "_C_Mail.IsCommandPending\t()",
			"contents": "${1:isCommandPending} = C_Mail.IsCommandPending()$0",
		},
		{
			"trigger": "_C_Map.GetAreaInfo\t(areaID)",
			"contents": "${1:name} = C_Map.GetAreaInfo(${2:areaID})$0",
		},
		{
			"trigger": "_C_Map.GetBestMapForUnit\t(\"unitToken\")",
			"contents": "${1:uiMapID} = C_Map.GetBestMapForUnit(\"${2:unitToken}\")$0",
		},
		{
			"trigger": "_C_Map.GetBountySetMaps\t(bountySetID)",
			"contents": "${1:mapIDs} = C_Map.GetBountySetMaps(${2:bountySetID})$0",
		},
		{
			"trigger": "_C_Map.GetFallbackWorldMapID\t()",
			"contents": "${1:uiMapID} = C_Map.GetFallbackWorldMapID()$0",
		},
		{
			"trigger": "_C_Map.GetMapArtBackgroundAtlas\t(uiMapID)",
			"contents": "${1:atlasName} = C_Map.GetMapArtBackgroundAtlas(${2:uiMapID})$0",
		},
		{
			"trigger": "_C_Map.GetMapArtHelpTextPosition\t(uiMapID)",
			"contents": "${1:position} = C_Map.GetMapArtHelpTextPosition(${2:uiMapID})$0",
		},
		{
			"trigger": "_C_Map.GetMapArtID\t(uiMapID)",
			"contents": "${1:uiMapArtID} = C_Map.GetMapArtID(${2:uiMapID})$0",
		},
		{
			"trigger": "_C_Map.GetMapArtLayers\t(uiMapID)",
			"contents": "${1:layerInfo} = C_Map.GetMapArtLayers(${2:uiMapID})$0",
		},
		{
			"trigger": "_C_Map.GetMapArtLayerTextures\t(uiMapID, layerIndex)",
			"contents": "${1:textures} = C_Map.GetMapArtLayerTextures(${2:uiMapID}, ${3:layerIndex})$0",
		},
		{
			"trigger": "_C_Map.GetMapBannersForMap\t(uiMapID)",
			"contents": "${1:mapBanners} = C_Map.GetMapBannersForMap(${2:uiMapID})$0",
		},
		{
			"trigger": "_C_Map.GetMapChildrenInfo\t(uiMapID, [mapType, [allDescendants]])",
			"contents": "${1:info} = C_Map.GetMapChildrenInfo(${2:uiMapID}, [${3:mapType}, [${4:allDescendants}]])$0",
		},
		{
			"trigger": "_C_Map.GetMapDisplayInfo\t(uiMapID)",
			"contents": "${1:hideIcons} = C_Map.GetMapDisplayInfo(${2:uiMapID})$0",
		},
		{
			"trigger": "_C_Map.GetMapGroupID\t(uiMapID)",
			"contents": "${1:uiMapGroupID} = C_Map.GetMapGroupID(${2:uiMapID})$0",
		},
		{
			"trigger": "_C_Map.GetMapGroupMembersInfo\t(uiMapGroupID)",
			"contents": "${1:info} = C_Map.GetMapGroupMembersInfo(${2:uiMapGroupID})$0",
		},
		{
			"trigger": "_C_Map.GetMapHighlightInfoAtPosition\t(uiMapID, x, y)",
			"contents": "${1:fileDataID}, ${2:atlasID}, ${3:texturePercentageX}, ${4:texturePercentageY}, ${5:textureX}, ${6:textureY}, ${7:scrollChildX}, ${8:scrollChildY} = C_Map.GetMapHighlightInfoAtPosition(${9:uiMapID}, ${10:x}, ${11:y})$0",
		},
		{
			"trigger": "_C_Map.GetMapInfo\t(uiMapID)",
			"contents": "${1:info} = C_Map.GetMapInfo(${2:uiMapID})$0",
		},
		{
			"trigger": "_C_Map.GetMapInfoAtPosition\t(uiMapID, x, y)",
			"contents": "${1:info} = C_Map.GetMapInfoAtPosition(${2:uiMapID}, ${3:x}, ${4:y})$0",
		},
		{
			"trigger": "_C_Map.GetMapLevels\t(uiMapID)",
			"contents": "${1:playerMinLevel}, ${2:playerMaxLevel}, ${3:petMinLevel}, ${4:petMaxLevel} = C_Map.GetMapLevels(${5:uiMapID})$0",
		},
		{
			"trigger": "_C_Map.GetMapLinksForMap\t(uiMapID)",
			"contents": "${1:mapLinks} = C_Map.GetMapLinksForMap(${2:uiMapID})$0",
		},
		{
			"trigger": "_C_Map.GetMapPosFromWorldPos\t(continentID, worldPosition, [overrideUiMapID])",
			"contents": "${1:uiMapID}, ${2:mapPosition} = C_Map.GetMapPosFromWorldPos(${3:continentID}, ${4:worldPosition}, [${5:overrideUiMapID}])$0",
		},
		{
			"trigger": "_C_Map.GetMapRectOnMap\t(uiMapID, topUiMapID)",
			"contents": "${1:minX}, ${2:maxX}, ${3:minY}, ${4:maxY} = C_Map.GetMapRectOnMap(${5:uiMapID}, ${6:topUiMapID})$0",
		},
		{
			"trigger": "_C_Map.GetPlayerMapPosition\t(uiMapID, \"unitToken\")",
			"contents": "${1:position} = C_Map.GetPlayerMapPosition(${2:uiMapID}, \"${3:unitToken}\")$0",
		},
		{
			"trigger": "_C_Map.GetWorldPosFromMapPos\t(uiMapID, mapPosition)",
			"contents": "${1:continentID}, ${2:worldPosition} = C_Map.GetWorldPosFromMapPos(${3:uiMapID}, ${4:mapPosition})$0",
		},
		{
			"trigger": "_C_Map.MapHasArt\t(uiMapID)",
			"contents": "${1:hasArt} = C_Map.MapHasArt(${2:uiMapID})$0",
		},
		{
			"trigger": "_C_MapExplorationInfo.GetExploredAreaIDsAtPosition\t(uiMapID, normalizedPosition)",
			"contents": "${1:areaID} = C_MapExplorationInfo.GetExploredAreaIDsAtPosition(${2:uiMapID}, ${3:normalizedPosition})$0",
		},
		{
			"trigger": "_C_MapExplorationInfo.GetExploredMapTextures\t(uiMapID)",
			"contents": "${1:overlayInfo} = C_MapExplorationInfo.GetExploredMapTextures(${2:uiMapID})$0",
		},
		{
			"trigger": "_C_MerchantFrame.GetBuybackItemID\t(buybackSlotIndex)",
			"contents": "${1:buybackItemID} = C_MerchantFrame.GetBuybackItemID(${2:buybackSlotIndex})$0",
		},
		{
			"trigger": "_C_MerchantFrame.IsMerchantItemRefundable\t(index)",
			"contents": "${1:refundable} = C_MerchantFrame.IsMerchantItemRefundable(${2:index})$0",
		},
		{
			"trigger": "_C_ModelInfo.GetModelSceneActorDisplayInfoByID\t(modelActorDisplayID)",
			"contents": "${1:actorDisplayInfo} = C_ModelInfo.GetModelSceneActorDisplayInfoByID(${2:modelActorDisplayID})$0",
		},
		{
			"trigger": "_C_ModelInfo.GetModelSceneActorInfoByID\t(modelActorID)",
			"contents": "${1:actorInfo} = C_ModelInfo.GetModelSceneActorInfoByID(${2:modelActorID})$0",
		},
		{
			"trigger": "_C_ModelInfo.GetModelSceneCameraInfoByID\t(modelSceneCameraID)",
			"contents": "${1:modelSceneCameraInfo} = C_ModelInfo.GetModelSceneCameraInfoByID(${2:modelSceneCameraID})$0",
		},
		{
			"trigger": "_C_ModelInfo.GetModelSceneInfoByID\t(modelSceneID)",
			"contents": "${1:modelSceneType}, ${2:modelCameraIDs}, ${3:modelActorsIDs} = C_ModelInfo.GetModelSceneInfoByID(${4:modelSceneID})$0",
		},
		{
			"trigger": "_C_MountJournal.GetCollectedFilterSetting\t(filterIndex)",
			"contents": "${1:isChecked} = C_MountJournal.GetCollectedFilterSetting(${2:filterIndex})$0",
		},
		{
			"trigger": "_C_MountJournal.GetDisplayedMountAllCreatureDisplayInfo\t(mountIndex)",
			"contents": "${1:allDisplayInfo} = C_MountJournal.GetDisplayedMountAllCreatureDisplayInfo(${2:mountIndex})$0",
		},
		{
			"trigger": "_C_MountJournal.GetDisplayedMountInfo\t(displayIndex)",
			"contents": "${1:name}, ${2:spellID}, ${3:icon}, ${4:isActive}, ${5:isUsable}, ${6:sourceType}, ${7:isFavorite}, ${8:isFactionSpecific}, ${9:faction}, ${10:shouldHideOnChar}, ${11:isCollected}, ${12:mountID} = C_MountJournal.GetDisplayedMountInfo(${13:displayIndex})$0",
		},
		{
			"trigger": "_C_MountJournal.GetDisplayedMountInfoExtra\t(mountIndex)",
			"contents": "${1:creatureDisplayInfoID}, ${2:description}, ${3:source}, ${4:isSelfMount}, ${5:mountTypeID}, ${6:uiModelSceneID} = C_MountJournal.GetDisplayedMountInfoExtra(${7:mountIndex})$0",
		},
		{
			"trigger": "_C_MountJournal.GetIsFavorite\t(mountIndex)",
			"contents": "${1:isFavorite}, ${2:canSetFavorite} = C_MountJournal.GetIsFavorite(${3:mountIndex})$0",
		},
		{
			"trigger": "_C_MountJournal.GetMountAllCreatureDisplayInfoByID\t(mountID)",
			"contents": "${1:allDisplayInfo} = C_MountJournal.GetMountAllCreatureDisplayInfoByID(${2:mountID})$0",
		},
		{
			"trigger": "_C_MountJournal.GetMountFromItem\t(itemID)",
			"contents": "${1:mountID} = C_MountJournal.GetMountFromItem(${2:itemID})$0",
		},
		{
			"trigger": "_C_MountJournal.GetMountFromSpell\t(spellID)",
			"contents": "${1:mountID} = C_MountJournal.GetMountFromSpell(${2:spellID})$0",
		},
		{
			"trigger": "_C_MountJournal.GetMountIDs\t()",
			"contents": "${1:mountIDs} = C_MountJournal.GetMountIDs()$0",
		},
		{
			"trigger": "_C_MountJournal.GetMountInfoByID\t(mountID)",
			"contents": "${1:name}, ${2:spellID}, ${3:icon}, ${4:isActive}, ${5:isUsable}, ${6:sourceType}, ${7:isFavorite}, ${8:isFactionSpecific}, ${9:faction}, ${10:shouldHideOnChar}, ${11:isCollected}, ${12:mountID} = C_MountJournal.GetMountInfoByID(${13:mountID})$0",
		},
		{
			"trigger": "_C_MountJournal.GetMountInfoExtraByID\t(mountID)",
			"contents": "${1:creatureDisplayInfoID}, ${2:description}, ${3:source}, ${4:isSelfMount}, ${5:mountTypeID}, ${6:uiModelSceneID} = C_MountJournal.GetMountInfoExtraByID(${7:mountID})$0",
		},
		{
			"trigger": "_C_MountJournal.GetMountUsabilityByID\t(mountID, checkIndoors)",
			"contents": "${1:isUsable}, ${2:useError} = C_MountJournal.GetMountUsabilityByID(${3:mountID}, ${4:checkIndoors})$0",
		},
		{
			"trigger": "_C_MountJournal.GetNumDisplayedMounts\t()",
			"contents": "${1:numMounts} = C_MountJournal.GetNumDisplayedMounts()$0",
		},
		{
			"trigger": "_C_MountJournal.GetNumMounts\t()",
			"contents": "${1:numMounts} = C_MountJournal.GetNumMounts()$0",
		},
		{
			"trigger": "_C_MountJournal.GetNumMountsNeedingFanfare\t()",
			"contents": "${1:numMountsNeedingFanfare} = C_MountJournal.GetNumMountsNeedingFanfare()$0",
		},
		{
			"trigger": "_C_MountJournal.IsSourceChecked\t(filterIndex)",
			"contents": "${1:isChecked} = C_MountJournal.IsSourceChecked(${2:filterIndex})$0",
		},
		{
			"trigger": "_C_MountJournal.IsValidSourceFilter\t(filterIndex)",
			"contents": "${1:isValid} = C_MountJournal.IsValidSourceFilter(${2:filterIndex})$0",
		},
		{
			"trigger": "_C_MountJournal.NeedsFanfare\t(mountID)",
			"contents": "${1:needsFanfare} = C_MountJournal.NeedsFanfare(${2:mountID})$0",
		},
		{
			"trigger": "_C_MythicPlus.GetCurrentAffixes\t()",
			"contents": "${1:affixIDs} = C_MythicPlus.GetCurrentAffixes()$0",
		},
		{
			"trigger": "_C_MythicPlus.GetCurrentSeason\t()",
			"contents": "${1:seasonID} = C_MythicPlus.GetCurrentSeason()$0",
		},
		{
			"trigger": "_C_MythicPlus.GetLastWeeklyBestInformation\t()",
			"contents": "${1:challengeMapId}, ${2:level} = C_MythicPlus.GetLastWeeklyBestInformation()$0",
		},
		{
			"trigger": "_C_MythicPlus.GetOwnedKeystoneChallengeMapID\t()",
			"contents": "${1:challengeMapID} = C_MythicPlus.GetOwnedKeystoneChallengeMapID()$0",
		},
		{
			"trigger": "_C_MythicPlus.GetOwnedKeystoneLevel\t()",
			"contents": "${1:keyStoneLevel} = C_MythicPlus.GetOwnedKeystoneLevel()$0",
		},
		{
			"trigger": "_C_MythicPlus.GetRewardLevelForDifficultyLevel\t(difficultyLevel)",
			"contents": "${1:weeklyRewardLevel}, ${2:endOfRunRewardLevel} = C_MythicPlus.GetRewardLevelForDifficultyLevel(${3:difficultyLevel})$0",
		},
		{
			"trigger": "_C_MythicPlus.GetRewardLevelFromKeystoneLevel\t(keystoneLevel)",
			"contents": "${1:rewardLevel} = C_MythicPlus.GetRewardLevelFromKeystoneLevel(${2:keystoneLevel})$0",
		},
		{
			"trigger": "_C_MythicPlus.GetSeasonBestForMap\t(mapChallengeModeID)",
			"contents": "${1:intimeInfo}, ${2:overtimeInfo} = C_MythicPlus.GetSeasonBestForMap(${3:mapChallengeModeID})$0",
		},
		{
			"trigger": "_C_MythicPlus.GetWeeklyBestForMap\t(mapChallengeModeID)",
			"contents": "${1:durationSec}, ${2:level}, ${3:completionDate}, ${4:affixIDs}, ${5:members} = C_MythicPlus.GetWeeklyBestForMap(${6:mapChallengeModeID})$0",
		},
		{
			"trigger": "_C_MythicPlus.GetWeeklyChestRewardLevel\t()",
			"contents": "${1:currentWeekBestLevel}, ${2:weeklyRewardLevel}, ${3:nextDifficultyWeeklyRewardLevel}, ${4:nextBestLevel} = C_MythicPlus.GetWeeklyChestRewardLevel()$0",
		},
		{
			"trigger": "_C_MythicPlus.IsMythicPlusActive\t()",
			"contents": "${1:isMythicPlusActive} = C_MythicPlus.IsMythicPlusActive()$0",
		},
		{
			"trigger": "_C_MythicPlus.IsWeeklyRewardAvailable\t()",
			"contents": "${1:weeklyRewardAvailable} = C_MythicPlus.IsWeeklyRewardAvailable()$0",
		},
		{
			"trigger": "_C_PaperDollInfo.GetArmorEffectiveness\t(armor, attackerLevel)",
			"contents": "${1:effectiveness} = C_PaperDollInfo.GetArmorEffectiveness(${2:armor}, ${3:attackerLevel})$0",
		},
		{
			"trigger": "_C_PaperDollInfo.GetArmorEffectivenessAgainstTarget\t(armor)",
			"contents": "${1:effectiveness} = C_PaperDollInfo.GetArmorEffectivenessAgainstTarget(${2:armor})$0",
		},
		{
			"trigger": "_C_PaperDollInfo.GetInspectAzeriteItemEmpoweredChoices\t(\"unit\", equipmentSlotIndex)",
			"contents": "${1:azeritePowerIDs} = C_PaperDollInfo.GetInspectAzeriteItemEmpoweredChoices(\"${2:unit}\", ${3:equipmentSlotIndex})$0",
		},
		{
			"trigger": "_C_PaperDollInfo.GetMinItemLevel\t()",
			"contents": "${1:minItemLevel} = C_PaperDollInfo.GetMinItemLevel()$0",
		},
		{
			"trigger": "_C_PaperDollInfo.GetStaggerPercentage\t(\"unit\")",
			"contents": "${1:stagger}, ${2:staggerAgainstTarget} = C_PaperDollInfo.GetStaggerPercentage(\"${3:unit}\")$0",
		},
		{
			"trigger": "_C_PaperDollInfo.OffhandHasShield\t()",
			"contents": "${1:offhandHasShield} = C_PaperDollInfo.OffhandHasShield()$0",
		},
		{
			"trigger": "_C_PaperDollInfo.OffhandHasWeapon\t()",
			"contents": "${1:offhandHasWeapon} = C_PaperDollInfo.OffhandHasWeapon()$0",
		},
		{
			"trigger": "_C_PartyInfo.GetActiveCategories\t()",
			"contents": "${1:categories} = C_PartyInfo.GetActiveCategories()$0",
		},
		{
			"trigger": "_C_PartyInfo.GetInviteConfirmationInvalidQueues\t(\"inviteGUID\")",
			"contents": "${1:invalidQueues} = C_PartyInfo.GetInviteConfirmationInvalidQueues(\"${2:inviteGUID}\")$0",
		},
		{
			"trigger": "_C_PartyInfo.GetInviteReferralInfo\t(\"inviteGUID\")",
			"contents": "${1:outReferredByGuid}, ${2:outReferredByName}, ${3:outRelationType}, ${4:outIsQuickJoin}, ${5:outClubId} = C_PartyInfo.GetInviteReferralInfo(\"${6:inviteGUID}\")$0",
		},
		{
			"trigger": "_C_PartyPose.GetPartyPoseInfoByMapID\t(mapID)",
			"contents": "${1:info} = C_PartyPose.GetPartyPoseInfoByMapID(${2:mapID})$0",
		},
		{
			"trigger": "_C_PetInfo.GetPetTamersForMap\t(uiMapID)",
			"contents": "${1:petTamers} = C_PetInfo.GetPetTamersForMap(${2:uiMapID})$0",
		},
		{
			"trigger": "_C_PetJournal.GetDisplayIDByIndex\t(speciesID, index)",
			"contents": "${1:displayID} = C_PetJournal.GetDisplayIDByIndex(${2:speciesID}, ${3:index})$0",
		},
		{
			"trigger": "_C_PetJournal.GetDisplayProbabilityByIndex\t(speciesID, index)",
			"contents": "${1:displayProbability} = C_PetJournal.GetDisplayProbabilityByIndex(${2:speciesID}, ${3:index})$0",
		},
		{
			"trigger": "_C_PetJournal.GetNumDisplays\t(speciesID)",
			"contents": "${1:numDisplays} = C_PetJournal.GetNumDisplays(${2:speciesID})$0",
		},
		{
			"trigger": "_C_PetJournal.PetUsesRandomDisplay\t(speciesID)",
			"contents": "${1:usesRandomDisplay} = C_PetJournal.PetUsesRandomDisplay(${2:speciesID})$0",
		},
		{
			"trigger": "_C_PlayerInfo.GetClass\t(playerLocation)",
			"contents": "${1:className}, ${2:classFilename}, ${3:classID} = C_PlayerInfo.GetClass(${4:playerLocation})$0",
		},
		{
			"trigger": "_C_PlayerInfo.GetName\t(playerLocation)",
			"contents": "${1:name} = C_PlayerInfo.GetName(${2:playerLocation})$0",
		},
		{
			"trigger": "_C_PlayerInfo.GetRace\t(playerLocation)",
			"contents": "${1:raceID} = C_PlayerInfo.GetRace(${2:playerLocation})$0",
		},
		{
			"trigger": "_C_PlayerInfo.GetSex\t(playerLocation)",
			"contents": "${1:sex} = C_PlayerInfo.GetSex(${2:playerLocation})$0",
		},
		{
			"trigger": "_C_PlayerInfo.GUIDIsPlayer\t(\"guid\")",
			"contents": "${1:isPlayer} = C_PlayerInfo.GUIDIsPlayer(\"${2:guid}\")$0",
		},
		{
			"trigger": "_C_PlayerInfo.IsConnected\t([playerLocation])",
			"contents": "${1:isConnected} = C_PlayerInfo.IsConnected([${2:playerLocation}])$0",
		},
		{
			"trigger": "_C_PlayerInfo.UnitIsSameServer\t(playerLocation)",
			"contents": "${1:unitIsSameServer} = C_PlayerInfo.UnitIsSameServer(${2:playerLocation})$0",
		},
		{
			"trigger": "_C_PvP.CanToggleWarMode\t(toggle)",
			"contents": "${1:canTogglePvP} = C_PvP.CanToggleWarMode(${2:toggle})$0",
		},
		{
			"trigger": "_C_PvP.CanToggleWarModeInArea\t()",
			"contents": "${1:canTogglePvPInArea} = C_PvP.CanToggleWarModeInArea()$0",
		},
		{
			"trigger": "_C_PvP.GetActiveBrawlInfo\t()",
			"contents": "${1:brawlInfo} = C_PvP.GetActiveBrawlInfo()$0",
		},
		{
			"trigger": "_C_PvP.GetArenaCrowdControlInfo\t(\"playerToken\")",
			"contents": "${1:spellID}, ${2:startTime}, ${3:duration} = C_PvP.GetArenaCrowdControlInfo(\"${4:playerToken}\")$0",
		},
		{
			"trigger": "_C_PvP.GetArenaRewards\t(teamSize)",
			"contents": "${1:honor}, ${2:experience}, ${3:itemRewards}, ${4:currencyRewards} = C_PvP.GetArenaRewards(${5:teamSize})$0",
		},
		{
			"trigger": "_C_PvP.GetArenaSkirmishRewards\t()",
			"contents": "${1:honor}, ${2:experience}, ${3:itemRewards}, ${4:currencyRewards} = C_PvP.GetArenaSkirmishRewards()$0",
		},
		{
			"trigger": "_C_PvP.GetAvailableBrawlInfo\t()",
			"contents": "${1:brawlInfo} = C_PvP.GetAvailableBrawlInfo()$0",
		},
		{
			"trigger": "_C_PvP.GetBrawlRewards\t(brawlType)",
			"contents": "${1:honor}, ${2:experience}, ${3:itemRewards}, ${4:currencyRewards}, ${5:hasWon} = C_PvP.GetBrawlRewards(${6:brawlType})$0",
		},
		{
			"trigger": "_C_PvP.GetGlobalPvpScalingInfoForSpecID\t(specializationID)",
			"contents": "${1:pvpScalingData} = C_PvP.GetGlobalPvpScalingInfoForSpecID(${2:specializationID})$0",
		},
		{
			"trigger": "_C_PvP.GetHonorRewardInfo\t(honorLevel)",
			"contents": "${1:info} = C_PvP.GetHonorRewardInfo(${2:honorLevel})$0",
		},
		{
			"trigger": "_C_PvP.GetNextHonorLevelForReward\t(honorLevel)",
			"contents": "${1:nextHonorLevelWithReward} = C_PvP.GetNextHonorLevelForReward(${2:honorLevel})$0",
		},
		{
			"trigger": "_C_PvP.GetOutdoorPvPWaitTime\t(uiMapID)",
			"contents": "${1:pvpWaitTime} = C_PvP.GetOutdoorPvPWaitTime(${2:uiMapID})$0",
		},
		{
			"trigger": "_C_PvP.GetPvpTierInfo\t(tierID)",
			"contents": "${1:pvpTierInfo} = C_PvP.GetPvpTierInfo(${2:tierID})$0",
		},
		{
			"trigger": "_C_PvP.GetRandomBGInfo\t()",
			"contents": "${1:info} = C_PvP.GetRandomBGInfo()$0",
		},
		{
			"trigger": "_C_PvP.GetRandomBGRewards\t()",
			"contents": "${1:honor}, ${2:experience}, ${3:itemRewards}, ${4:currencyRewards} = C_PvP.GetRandomBGRewards()$0",
		},
		{
			"trigger": "_C_PvP.GetRandomEpicBGInfo\t()",
			"contents": "${1:info} = C_PvP.GetRandomEpicBGInfo()$0",
		},
		{
			"trigger": "_C_PvP.GetRandomEpicBGRewards\t()",
			"contents": "${1:honor}, ${2:experience}, ${3:itemRewards}, ${4:currencyRewards} = C_PvP.GetRandomEpicBGRewards()$0",
		},
		{
			"trigger": "_C_PvP.GetRatedBGRewards\t()",
			"contents": "${1:honor}, ${2:experience}, ${3:itemRewards}, ${4:currencyRewards} = C_PvP.GetRatedBGRewards()$0",
		},
		{
			"trigger": "_C_PvP.GetRewardItemLevelsByTierEnum\t(pvpTierEnum)",
			"contents": "${1:activityItemLevel}, ${2:weeklyItemLevel} = C_PvP.GetRewardItemLevelsByTierEnum(${3:pvpTierEnum})$0",
		},
		{
			"trigger": "_C_PvP.GetSeasonBestInfo\t()",
			"contents": "${1:tierID}, ${2:nextTierID} = C_PvP.GetSeasonBestInfo()$0",
		},
		{
			"trigger": "_C_PvP.GetSkirmishInfo\t(pvpBracket)",
			"contents": "${1:battlemasterListInfo} = C_PvP.GetSkirmishInfo(${2:pvpBracket})$0",
		},
		{
			"trigger": "_C_PvP.GetWarModeRewardBonus\t()",
			"contents": "${1:rewardBonus} = C_PvP.GetWarModeRewardBonus()$0",
		},
		{
			"trigger": "_C_PvP.GetWarModeRewardBonusDefault\t()",
			"contents": "${1:defaultBonus} = C_PvP.GetWarModeRewardBonusDefault()$0",
		},
		{
			"trigger": "_C_PvP.GetWeeklyChestInfo\t()",
			"contents": "${1:rewardAchieved}, ${2:lastWeekRewardAchieved}, ${3:lastWeekRewardClaimed}, ${4:pvpTierMaxFromWins} = C_PvP.GetWeeklyChestInfo()$0",
		},
		{
			"trigger": "_C_PvP.HasArenaSkirmishWinToday\t()",
			"contents": "${1:hasArenaSkirmishWinToday} = C_PvP.HasArenaSkirmishWinToday()$0",
		},
		{
			"trigger": "_C_PvP.IsActiveBattlefield\t()",
			"contents": "${1:isActiveBattlefield} = C_PvP.IsActiveBattlefield()$0",
		},
		{
			"trigger": "_C_PvP.IsBattlegroundEnlistmentBonusActive\t()",
			"contents": "${1:battlegroundActive}, ${2:brawlActive} = C_PvP.IsBattlegroundEnlistmentBonusActive()$0",
		},
		{
			"trigger": "_C_PvP.IsInBrawl\t()",
			"contents": "${1:isInBrawl} = C_PvP.IsInBrawl()$0",
		},
		{
			"trigger": "_C_PvP.IsPVPMap\t()",
			"contents": "${1:isPVPMap} = C_PvP.IsPVPMap()$0",
		},
		{
			"trigger": "_C_PvP.IsWarModeActive\t()",
			"contents": "${1:warModeActive} = C_PvP.IsWarModeActive()$0",
		},
		{
			"trigger": "_C_PvP.IsWarModeDesired\t()",
			"contents": "${1:warModeDesired} = C_PvP.IsWarModeDesired()$0",
		},
		{
			"trigger": "_C_PvP.IsWarModeFeatureEnabled\t()",
			"contents": "${1:warModeEnabled} = C_PvP.IsWarModeFeatureEnabled()$0",
		},
		{
			"trigger": "_C_QuestChoice.GetQuestChoiceInfo\t()",
			"contents": "${1:choiceInfo} = C_QuestChoice.GetQuestChoiceInfo()$0",
		},
		{
			"trigger": "_C_QuestChoice.GetQuestChoiceOptionInfo\t(optionIndex)",
			"contents": "${1:info} = C_QuestChoice.GetQuestChoiceOptionInfo(${2:optionIndex})$0",
		},
		{
			"trigger": "_C_QuestLine.GetAvailableQuestLines\t(uiMapID)",
			"contents": "${1:questLines} = C_QuestLine.GetAvailableQuestLines(${2:uiMapID})$0",
		},
		{
			"trigger": "_C_QuestLine.GetQuestLineInfo\t(questID, uiMapID)",
			"contents": "${1:questLineInfo} = C_QuestLine.GetQuestLineInfo(${2:questID}, ${3:uiMapID})$0",
		},
		{
			"trigger": "_C_QuestLine.GetQuestLineQuests\t(questLineID)",
			"contents": "${1:questIDs} = C_QuestLine.GetQuestLineQuests(${2:questLineID})$0",
		},
		{
			"trigger": "_C_QuestLog.GetMapForQuestPOIs\t()",
			"contents": "${1:uiMapID} = C_QuestLog.GetMapForQuestPOIs()$0",
		},
		{
			"trigger": "_C_QuestLog.GetMaxNumQuests\t()",
			"contents": "${1:maxNumQuests} = C_QuestLog.GetMaxNumQuests()$0",
		},
		{
			"trigger": "_C_QuestLog.GetMaxNumQuestsCanAccept\t()",
			"contents": "${1:maxNumQuestsCanAccept} = C_QuestLog.GetMaxNumQuestsCanAccept()$0",
		},
		{
			"trigger": "_C_QuestLog.GetNumQuestObjectives\t(questID)",
			"contents": "${1:leaderboardCount} = C_QuestLog.GetNumQuestObjectives(${2:questID})$0",
		},
		{
			"trigger": "_C_QuestLog.GetQuestInfo\t(questID)",
			"contents": "${1:title} = C_QuestLog.GetQuestInfo(${2:questID})$0",
		},
		{
			"trigger": "_C_QuestLog.GetQuestObjectives\t(questID)",
			"contents": "${1:objectives} = C_QuestLog.GetQuestObjectives(${2:questID})$0",
		},
		{
			"trigger": "_C_QuestLog.GetQuestsOnMap\t(uiMapID)",
			"contents": "${1:quests} = C_QuestLog.GetQuestsOnMap(${2:uiMapID})$0",
		},
		{
			"trigger": "_C_QuestLog.GetZoneStoryInfo\t(uiMapID)",
			"contents": "${1:achievementID}, ${2:storyMapID} = C_QuestLog.GetZoneStoryInfo(${3:uiMapID})$0",
		},
		{
			"trigger": "_C_QuestLog.IsLegendaryQuest\t(questID)",
			"contents": "${1:isLegendaryQuest} = C_QuestLog.IsLegendaryQuest(${2:questID})$0",
		},
		{
			"trigger": "_C_QuestLog.IsOnQuest\t(questID)",
			"contents": "${1:isOnQuest} = C_QuestLog.IsOnQuest(${2:questID})$0",
		},
		{
			"trigger": "_C_QuestLog.QuestHasWarModeBonus\t(questID)",
			"contents": "${1:hasBonus} = C_QuestLog.QuestHasWarModeBonus(${2:questID})$0",
		},
		{
			"trigger": "_C_QuestLog.ShouldShowQuestRewards\t(questID)",
			"contents": "${1:shouldShow} = C_QuestLog.ShouldShowQuestRewards(${2:questID})$0",
		},
		{
			"trigger": "_C_ReportPlayer.CanReportPlayer\t(playerLocation)",
			"contents": "${1:canReport} = C_ReportPlayer.CanReportPlayer(${2:playerLocation})$0",
		},
		{
			"trigger": "_C_ReportSystem.CanReportPlayer\t(playerLocation)",
			"contents": "${1:canReport} = C_ReportSystem.CanReportPlayer(${2:playerLocation})$0",
		},
		{
			"trigger": "_C_ReportSystem.InitiateReportPlayer\t(\"complaintType\", [playerLocation])",
			"contents": "${1:token} = C_ReportSystem.InitiateReportPlayer(\"${2:complaintType}\", [${3:playerLocation}])$0",
		},
		{
			"trigger": "_C_ReportSystem.SetPendingReportPetTarget\t([\"target\"])",
			"contents": "${1:set} = C_ReportSystem.SetPendingReportPetTarget([\"${2:target}\"])$0",
		},
		{
			"trigger": "_C_ReportSystem.SetPendingReportTarget\t([\"target\"])",
			"contents": "${1:set} = C_ReportSystem.SetPendingReportTarget([\"${2:target}\"])$0",
		},
		{
			"trigger": "_C_ReportSystem.SetPendingReportTargetByGuid\t([\"guid\"])",
			"contents": "${1:set} = C_ReportSystem.SetPendingReportTargetByGuid([\"${2:guid}\"])$0",
		},
		{
			"trigger": "_C_Reputation.GetFactionParagonInfo\t(factionID)",
			"contents": "${1:currentValue}, ${2:threshold}, ${3:rewardQuestID}, ${4:hasRewardPending}, ${5:tooLowLevelForParagon} = C_Reputation.GetFactionParagonInfo(${6:factionID})$0",
		},
		{
			"trigger": "_C_Reputation.IsFactionParagon\t(factionID)",
			"contents": "${1:hasParagon} = C_Reputation.IsFactionParagon(${2:factionID})$0",
		},
		{
			"trigger": "_C_ResearchInfo.GetDigSitesForMap\t(uiMapID)",
			"contents": "${1:digSites} = C_ResearchInfo.GetDigSitesForMap(${2:uiMapID})$0",
		},
		{
			"trigger": "_C_ScrappingMachineUI.GetCurrentPendingScrapItemLocationByIndex\t(index)",
			"contents": "${1:itemLoc} = C_ScrappingMachineUI.GetCurrentPendingScrapItemLocationByIndex(${2:index})$0",
		},
		{
			"trigger": "_C_ScrappingMachineUI.GetScrappingMachineName\t()",
			"contents": "${1:name} = C_ScrappingMachineUI.GetScrappingMachineName()$0",
		},
		{
			"trigger": "_C_ScrappingMachineUI.GetScrapSpellID\t()",
			"contents": "${1:spellID} = C_ScrappingMachineUI.GetScrapSpellID()$0",
		},
		{
			"trigger": "_C_ScrappingMachineUI.HasScrappableItems\t()",
			"contents": "${1:hasScrappableItems} = C_ScrappingMachineUI.HasScrappableItems()$0",
		},
		{
			"trigger": "_C_Social.GetLastAchievement\t()",
			"contents": "${1:achievementID}, ${2:achievementName}, ${3:achievementDesc}, ${4:iconFileID} = C_Social.GetLastAchievement()$0",
		},
		{
			"trigger": "_C_Social.GetLastItem\t()",
			"contents": "${1:itemID}, ${2:itemName}, ${3:iconFileID}, ${4:itemQuality}, ${5:itemLevel}, ${6:itemLinkString} = C_Social.GetLastItem()$0",
		},
		{
			"trigger": "_C_Social.GetLastScreenshotIndex\t()",
			"contents": "${1:screenShotIndex} = C_Social.GetLastScreenshotIndex()$0",
		},
		{
			"trigger": "_C_Social.GetMaxTweetLength\t()",
			"contents": "${1:maxTweetLength} = C_Social.GetMaxTweetLength()$0",
		},
		{
			"trigger": "_C_Social.GetScreenshotInfoByIndex\t(index)",
			"contents": "${1:screenWidth}, ${2:screenHeight} = C_Social.GetScreenshotInfoByIndex(${3:index})$0",
		},
		{
			"trigger": "_C_Social.GetTweetLength\t(\"tweetText\")",
			"contents": "${1:tweetLength} = C_Social.GetTweetLength(\"${2:tweetText}\")$0",
		},
		{
			"trigger": "_C_Social.IsSocialEnabled\t()",
			"contents": "${1:isEnabled} = C_Social.IsSocialEnabled()$0",
		},
		{
			"trigger": "_C_Social.TwitterGetMSTillCanPost\t()",
			"contents": "${1:msTimeLeft} = C_Social.TwitterGetMSTillCanPost()$0",
		},
		{
			"trigger": "_C_SocialQueue.GetAllGroups\t(allowNonJoinable, allowNonQueuedGroups)",
			"contents": "${1:groupGUIDs} = C_SocialQueue.GetAllGroups(${2:allowNonJoinable}, ${3:allowNonQueuedGroups})$0",
		},
		{
			"trigger": "_C_SocialQueue.GetConfig\t()",
			"contents": "${1:config} = C_SocialQueue.GetConfig()$0",
		},
		{
			"trigger": "_C_SocialQueue.GetGroupForPlayer\t(\"playerGUID\")",
			"contents": "${1:groupGUID}, ${2:isSoloQueueParty} = C_SocialQueue.GetGroupForPlayer(\"${3:playerGUID}\")$0",
		},
		{
			"trigger": "_C_SocialQueue.GetGroupInfo\t(\"groupGUID\")",
			"contents": "${1:canJoin}, ${2:numQueues}, ${3:needTank}, ${4:needHealer}, ${5:needDamage}, ${6:isSoloQueueParty}, ${7:leaderGUID} = C_SocialQueue.GetGroupInfo(\"${8:groupGUID}\")$0",
		},
		{
			"trigger": "_C_SocialQueue.GetGroupMembers\t(\"groupGUID\")",
			"contents": "${1:groupMembers} = C_SocialQueue.GetGroupMembers(\"${2:groupGUID}\")$0",
		},
		{
			"trigger": "_C_SocialQueue.GetGroupQueues\t(\"groupGUID\")",
			"contents": "${1:queues} = C_SocialQueue.GetGroupQueues(\"${2:groupGUID}\")$0",
		},
		{
			"trigger": "_C_SocialQueue.RequestToJoin\t(\"groupGUID\", applyAsTank, applyAsHealer, applyAsDamage)",
			"contents": "${1:requestSuccessful} = C_SocialQueue.RequestToJoin(\"${2:groupGUID}\", ${3:applyAsTank}, ${4:applyAsHealer}, ${5:applyAsDamage})$0",
		},
		{
			"trigger": "_C_SpecializationInfo.GetAllSelectedPvpTalentIDs\t()",
			"contents": "${1:selectedPvpTalentIDs} = C_SpecializationInfo.GetAllSelectedPvpTalentIDs()$0",
		},
		{
			"trigger": "_C_SpecializationInfo.GetInspectSelectedPvpTalent\t(\"inspectedUnit\", talentIndex)",
			"contents": "${1:selectedTalentID} = C_SpecializationInfo.GetInspectSelectedPvpTalent(\"${2:inspectedUnit}\", ${3:talentIndex})$0",
		},
		{
			"trigger": "_C_SpecializationInfo.GetPvpTalentAlertStatus\t()",
			"contents": "${1:hasUnspentSlot}, ${2:hasNewTalent} = C_SpecializationInfo.GetPvpTalentAlertStatus()$0",
		},
		{
			"trigger": "_C_SpecializationInfo.GetPvpTalentSlotInfo\t(talentIndex)",
			"contents": "${1:slotInfo} = C_SpecializationInfo.GetPvpTalentSlotInfo(${2:talentIndex})$0",
		},
		{
			"trigger": "_C_SpecializationInfo.GetPvpTalentSlotUnlockLevel\t(talentIndex)",
			"contents": "${1:requiredLevel} = C_SpecializationInfo.GetPvpTalentSlotUnlockLevel(${2:talentIndex})$0",
		},
		{
			"trigger": "_C_SpecializationInfo.GetPvpTalentUnlockLevel\t(talentID)",
			"contents": "${1:requiredLevel} = C_SpecializationInfo.GetPvpTalentUnlockLevel(${2:talentID})$0",
		},
		{
			"trigger": "_C_SpecializationInfo.GetSpellsDisplay\t(specializationID)",
			"contents": "${1:spellID} = C_SpecializationInfo.GetSpellsDisplay(${2:specializationID})$0",
		},
		{
			"trigger": "_C_SpecializationInfo.IsInitialized\t()",
			"contents": "${1:isSpecializationDataInitialized} = C_SpecializationInfo.IsInitialized()$0",
		},
		{
			"trigger": "_C_SpecializationInfo.IsPvpTalentLocked\t(talentID)",
			"contents": "${1:locked} = C_SpecializationInfo.IsPvpTalentLocked(${2:talentID})$0",
		},
		{
			"trigger": "_C_Spell.DoesSpellExist\t(spellID)",
			"contents": "${1:spellExists} = C_Spell.DoesSpellExist(${2:spellID})$0",
		},
		{
			"trigger": "_C_Spell.IsSpellDataCached\t(spellID)",
			"contents": "${1:isCached} = C_Spell.IsSpellDataCached(${2:spellID})$0",
		},
		{
			"trigger": "_C_StorePublic.DoesGroupHavePurchaseableProducts\t(groupID)",
			"contents": "${1:hasPurchaseableProducts} = C_StorePublic.DoesGroupHavePurchaseableProducts(${2:groupID})$0",
		},
		{
			"trigger": "_C_StorePublic.IsDisabledByParentalControls\t()",
			"contents": "${1:disabled} = C_StorePublic.IsDisabledByParentalControls()$0",
		},
		{
			"trigger": "_C_StorePublic.IsEnabled\t()",
			"contents": "${1:enabled} = C_StorePublic.IsEnabled()$0",
		},
		{
			"trigger": "_C_SummonInfo.GetSummonConfirmAreaName\t()",
			"contents": "${1:areaName} = C_SummonInfo.GetSummonConfirmAreaName()$0",
		},
		{
			"trigger": "_C_SummonInfo.GetSummonConfirmSummoner\t()",
			"contents": "${1:summoner} = C_SummonInfo.GetSummonConfirmSummoner()$0",
		},
		{
			"trigger": "_C_SummonInfo.GetSummonConfirmTimeLeft\t()",
			"contents": "${1:timeLeft} = C_SummonInfo.GetSummonConfirmTimeLeft()$0",
		},
		{
			"trigger": "_C_SummonInfo.GetSummonReason\t()",
			"contents": "${1:summonReason} = C_SummonInfo.GetSummonReason()$0",
		},
		{
			"trigger": "_C_SummonInfo.IsSummonSkippingStartExperience\t()",
			"contents": "${1:isSummonSkippingStartExperience} = C_SummonInfo.IsSummonSkippingStartExperience()$0",
		},
		{
			"trigger": "_C_TaskQuest.DoesMapShowTaskQuestObjectives\t(uiMapID)",
			"contents": "${1:showsTaskQuestObjectives} = C_TaskQuest.DoesMapShowTaskQuestObjectives(${2:uiMapID})$0",
		},
		{
			"trigger": "_C_TaskQuest.GetDistanceSqToQuest\t(questID)",
			"contents": "${1:distanceSquared} = C_TaskQuest.GetDistanceSqToQuest(${2:questID})$0",
		},
		{
			"trigger": "_C_TaskQuest.GetQuestInfoByQuestID\t(questID)",
			"contents": "${1:questTitle}, ${2:factionID}, ${3:capped} = C_TaskQuest.GetQuestInfoByQuestID(${4:questID})$0",
		},
		{
			"trigger": "_C_TaskQuest.GetQuestLocation\t(questID, uiMapID)",
			"contents": "${1:locationX}, ${2:locationY} = C_TaskQuest.GetQuestLocation(${3:questID}, ${4:uiMapID})$0",
		},
		{
			"trigger": "_C_TaskQuest.GetQuestProgressBarInfo\t(questID)",
			"contents": "${1:progress} = C_TaskQuest.GetQuestProgressBarInfo(${2:questID})$0",
		},
		{
			"trigger": "_C_TaskQuest.GetQuestsForPlayerByMapID\t(uiMapID)",
			"contents": "${1:taskPOIs} = C_TaskQuest.GetQuestsForPlayerByMapID(${2:uiMapID})$0",
		},
		{
			"trigger": "_C_TaskQuest.GetQuestTimeLeftMinutes\t(questID)",
			"contents": "${1:minutesLeft} = C_TaskQuest.GetQuestTimeLeftMinutes(${2:questID})$0",
		},
		{
			"trigger": "_C_TaskQuest.GetQuestTimeLeftSeconds\t(questID)",
			"contents": "${1:secondsLeft} = C_TaskQuest.GetQuestTimeLeftSeconds(${2:questID})$0",
		},
		{
			"trigger": "_C_TaskQuest.GetQuestZoneID\t(questID)",
			"contents": "${1:uiMapID} = C_TaskQuest.GetQuestZoneID(${2:questID})$0",
		},
		{
			"trigger": "_C_TaskQuest.IsActive\t(questID)",
			"contents": "${1:active} = C_TaskQuest.IsActive(${2:questID})$0",
		},
		{
			"trigger": "_C_TaxiMap.GetAllTaxiNodes\t(uiMapID)",
			"contents": "${1:taxiNodes} = C_TaxiMap.GetAllTaxiNodes(${2:uiMapID})$0",
		},
		{
			"trigger": "_C_TaxiMap.GetTaxiNodesForMap\t(uiMapID)",
			"contents": "${1:mapTaxiNodes} = C_TaxiMap.GetTaxiNodesForMap(${2:uiMapID})$0",
		},
		{
			"trigger": "_C_TaxiMap.ShouldMapShowTaxiNodes\t(uiMapID)",
			"contents": "${1:shouldShowNodes} = C_TaxiMap.ShouldMapShowTaxiNodes(${2:uiMapID})$0",
		},
		{
			"trigger": "_C_Texture.GetAtlasInfo\t(\"atlas\")",
			"contents": "${1:info} = C_Texture.GetAtlasInfo(\"${2:atlas}\")$0",
		},
		{
			"trigger": "_C_ToyBoxInfo.NeedsFanfare\t(itemID)",
			"contents": "${1:needsFanfare} = C_ToyBoxInfo.NeedsFanfare(${2:itemID})$0",
		},
		{
			"trigger": "_C_TradeSkillUI.GetAllProfessionTradeSkillLines\t()",
			"contents": "${1:skillLineID} = C_TradeSkillUI.GetAllProfessionTradeSkillLines()$0",
		},
		{
			"trigger": "_C_TradeSkillUI.GetTradeSkillDisplayName\t(skillLineID)",
			"contents": "${1:professionDisplayName} = C_TradeSkillUI.GetTradeSkillDisplayName(${2:skillLineID})$0",
		},
		{
			"trigger": "_C_TradeSkillUI.GetTradeSkillLine\t()",
			"contents": "${1:skillLineID}, ${2:skillLineDisplayName}, ${3:skillLineRank}, ${4:skillLineMaxRank}, ${5:skillLineModifier}, ${6:parentSkillLineID}, ${7:parentSkillLineDisplayName} = C_TradeSkillUI.GetTradeSkillLine()$0",
		},
		{
			"trigger": "_C_TradeSkillUI.GetTradeSkillLineInfoByID\t(skillLineID)",
			"contents": "${1:skillLineDisplayName}, ${2:skillLineRank}, ${3:skillLineMaxRank}, ${4:skillLineModifier}, ${5:parentSkillLineID} = C_TradeSkillUI.GetTradeSkillLineInfoByID(${6:skillLineID})$0",
		},
		{
			"trigger": "_C_TradeSkillUI.IsEmptySkillLineCategory\t(categoryID)",
			"contents": "${1:effectivelyKnown} = C_TradeSkillUI.IsEmptySkillLineCategory(${2:categoryID})$0",
		},
		{
			"trigger": "_C_Transmog.GetCreatureDisplayIDForSource\t(itemModifiedAppearanceID)",
			"contents": "${1:creatureDisplayID} = C_Transmog.GetCreatureDisplayIDForSource(${2:itemModifiedAppearanceID})$0",
		},
		{
			"trigger": "_C_Transmog.GetSlotForInventoryType\t(inventoryType)",
			"contents": "${1:slot} = C_Transmog.GetSlotForInventoryType(${2:inventoryType})$0",
		},
		{
			"trigger": "_C_TransmogCollection.GetAppearanceSources\t(appearanceID)",
			"contents": "${1:sources} = C_TransmogCollection.GetAppearanceSources(${2:appearanceID})$0",
		},
		{
			"trigger": "_C_TransmogCollection.GetSourceIcon\t(itemModifiedAppearanceID)",
			"contents": "${1:icon} = C_TransmogCollection.GetSourceIcon(${2:itemModifiedAppearanceID})$0",
		},
		{
			"trigger": "_C_TransmogCollection.GetSourceInfo\t(sourceID)",
			"contents": "${1:sourceInfo} = C_TransmogCollection.GetSourceInfo(${2:sourceID})$0",
		},
		{
			"trigger": "_C_TransmogSets.GetAllSourceIDs\t(transmogSetID)",
			"contents": "${1:sources} = C_TransmogSets.GetAllSourceIDs(${2:transmogSetID})$0",
		},
		{
			"trigger": "_C_TransmogSets.GetBaseSetsCounts\t()",
			"contents": "${1:numCollected}, ${2:numTotal} = C_TransmogSets.GetBaseSetsCounts()$0",
		},
		{
			"trigger": "_C_TransmogSets.GetBaseSetsFilter\t(index)",
			"contents": "${1:isChecked} = C_TransmogSets.GetBaseSetsFilter(${2:index})$0",
		},
		{
			"trigger": "_C_TransmogSets.GetCameraIDs\t()",
			"contents": "${1:detailsCameraID}, ${2:vendorCameraID} = C_TransmogSets.GetCameraIDs()$0",
		},
		{
			"trigger": "_C_TransmogSets.GetIsFavorite\t(transmogSetID)",
			"contents": "${1:isFavorite}, ${2:isGroupFavorite} = C_TransmogSets.GetIsFavorite(${3:transmogSetID})$0",
		},
		{
			"trigger": "_C_TransmogSets.GetLatestSource\t()",
			"contents": "${1:sourceID} = C_TransmogSets.GetLatestSource()$0",
		},
		{
			"trigger": "_C_TransmogSets.GetSetNewSources\t(transmogSetID)",
			"contents": "${1:sourceIDs} = C_TransmogSets.GetSetNewSources(${2:transmogSetID})$0",
		},
		{
			"trigger": "_C_TransmogSets.GetSetsContainingSourceID\t(sourceID)",
			"contents": "${1:setIDs} = C_TransmogSets.GetSetsContainingSourceID(${2:sourceID})$0",
		},
		{
			"trigger": "_C_TransmogSets.GetSourceIDsForSlot\t(transmogSetID, slot)",
			"contents": "${1:sources} = C_TransmogSets.GetSourceIDsForSlot(${2:transmogSetID}, ${3:slot})$0",
		},
		{
			"trigger": "_C_TransmogSets.GetSourcesForSlot\t(transmogSetID, slot)",
			"contents": "${1:sources} = C_TransmogSets.GetSourcesForSlot(${2:transmogSetID}, ${3:slot})$0",
		},
		{
			"trigger": "_C_TransmogSets.HasUsableSets\t()",
			"contents": "${1:hasUsableSets} = C_TransmogSets.HasUsableSets()$0",
		},
		{
			"trigger": "_C_TransmogSets.IsBaseSetCollected\t(transmogSetID)",
			"contents": "${1:isCollected} = C_TransmogSets.IsBaseSetCollected(${2:transmogSetID})$0",
		},
		{
			"trigger": "_C_TransmogSets.IsNewSource\t(sourceID)",
			"contents": "${1:isNew} = C_TransmogSets.IsNewSource(${2:sourceID})$0",
		},
		{
			"trigger": "_C_TransmogSets.SetHasNewSources\t(transmogSetID)",
			"contents": "${1:hasNewSources} = C_TransmogSets.SetHasNewSources(${2:transmogSetID})$0",
		},
		{
			"trigger": "_C_TransmogSets.SetHasNewSourcesForSlot\t(transmogSetID, slot)",
			"contents": "${1:hasNewSources} = C_TransmogSets.SetHasNewSourcesForSlot(${2:transmogSetID}, ${3:slot})$0",
		},
		{
			"trigger": "_C_UIWidgetManager.GetAllWidgetsBySetID\t(setID)",
			"contents": "${1:widgets} = C_UIWidgetManager.GetAllWidgetsBySetID(${2:setID})$0",
		},
		{
			"trigger": "_C_UIWidgetManager.GetBelowMinimapWidgetSetID\t()",
			"contents": "${1:setID} = C_UIWidgetManager.GetBelowMinimapWidgetSetID()$0",
		},
		{
			"trigger": "_C_UIWidgetManager.GetBulletTextListWidgetVisualizationInfo\t(widgetID)",
			"contents": "${1:widgetInfo} = C_UIWidgetManager.GetBulletTextListWidgetVisualizationInfo(${2:widgetID})$0",
		},
		{
			"trigger": "_C_UIWidgetManager.GetCaptureBarWidgetVisualizationInfo\t(widgetID)",
			"contents": "${1:widgetInfo} = C_UIWidgetManager.GetCaptureBarWidgetVisualizationInfo(${2:widgetID})$0",
		},
		{
			"trigger": "_C_UIWidgetManager.GetDoubleIconAndTextWidgetVisualizationInfo\t(widgetID)",
			"contents": "${1:widgetInfo} = C_UIWidgetManager.GetDoubleIconAndTextWidgetVisualizationInfo(${2:widgetID})$0",
		},
		{
			"trigger": "_C_UIWidgetManager.GetDoubleStateIconRowVisualizationInfo\t(widgetID)",
			"contents": "${1:widgetInfo} = C_UIWidgetManager.GetDoubleStateIconRowVisualizationInfo(${2:widgetID})$0",
		},
		{
			"trigger": "_C_UIWidgetManager.GetDoubleStatusBarWidgetVisualizationInfo\t(widgetID)",
			"contents": "${1:widgetInfo} = C_UIWidgetManager.GetDoubleStatusBarWidgetVisualizationInfo(${2:widgetID})$0",
		},
		{
			"trigger": "_C_UIWidgetManager.GetHorizontalCurrenciesWidgetVisualizationInfo\t(widgetID)",
			"contents": "${1:widgetInfo} = C_UIWidgetManager.GetHorizontalCurrenciesWidgetVisualizationInfo(${2:widgetID})$0",
		},
		{
			"trigger": "_C_UIWidgetManager.GetIconAndTextWidgetVisualizationInfo\t(widgetID)",
			"contents": "${1:widgetInfo} = C_UIWidgetManager.GetIconAndTextWidgetVisualizationInfo(${2:widgetID})$0",
		},
		{
			"trigger": "_C_UIWidgetManager.GetIconTextAndBackgroundWidgetVisualizationInfo\t(widgetID)",
			"contents": "${1:widgetInfo} = C_UIWidgetManager.GetIconTextAndBackgroundWidgetVisualizationInfo(${2:widgetID})$0",
		},
		{
			"trigger": "_C_UIWidgetManager.GetIconTextAndCurrenciesWidgetVisualizationInfo\t(widgetID)",
			"contents": "${1:widgetInfo} = C_UIWidgetManager.GetIconTextAndCurrenciesWidgetVisualizationInfo(${2:widgetID})$0",
		},
		{
			"trigger": "_C_UIWidgetManager.GetScenarioHeaderCurrenciesAndBackgroundWidgetVisualizationInfo\t(widgetID)",
			"contents": "${1:widgetInfo} = C_UIWidgetManager.GetScenarioHeaderCurrenciesAndBackgroundWidgetVisualizationInfo(${2:widgetID})$0",
		},
		{
			"trigger": "_C_UIWidgetManager.GetSpellDisplayVisualizationInfo\t(widgetID)",
			"contents": "${1:widgetInfo} = C_UIWidgetManager.GetSpellDisplayVisualizationInfo(${2:widgetID})$0",
		},
		{
			"trigger": "_C_UIWidgetManager.GetStackedResourceTrackerWidgetVisualizationInfo\t(widgetID)",
			"contents": "${1:widgetInfo} = C_UIWidgetManager.GetStackedResourceTrackerWidgetVisualizationInfo(${2:widgetID})$0",
		},
		{
			"trigger": "_C_UIWidgetManager.GetStatusBarWidgetVisualizationInfo\t(widgetID)",
			"contents": "${1:widgetInfo} = C_UIWidgetManager.GetStatusBarWidgetVisualizationInfo(${2:widgetID})$0",
		},
		{
			"trigger": "_C_UIWidgetManager.GetTextureWithStateVisualizationInfo\t(widgetID)",
			"contents": "${1:widgetInfo} = C_UIWidgetManager.GetTextureWithStateVisualizationInfo(${2:widgetID})$0",
		},
		{
			"trigger": "_C_UIWidgetManager.GetTextWithStateWidgetVisualizationInfo\t(widgetID)",
			"contents": "${1:widgetInfo} = C_UIWidgetManager.GetTextWithStateWidgetVisualizationInfo(${2:widgetID})$0",
		},
		{
			"trigger": "_C_UIWidgetManager.GetTopCenterWidgetSetID\t()",
			"contents": "${1:setID} = C_UIWidgetManager.GetTopCenterWidgetSetID()$0",
		},
		{
			"trigger": "_C_VideoOptions.GetGxAdapterInfo\t()",
			"contents": "${1:adapters} = C_VideoOptions.GetGxAdapterInfo()$0",
		},
		{
			"trigger": "_C_VignetteInfo.FindBestUniqueVignette\t(vignetteGUIDs)",
			"contents": "${1:bestUniqueVignetteIndex} = C_VignetteInfo.FindBestUniqueVignette(${2:vignetteGUIDs})$0",
		},
		{
			"trigger": "_C_VignetteInfo.GetVignetteInfo\t(\"vignetteGUID\")",
			"contents": "${1:vignetteInfo} = C_VignetteInfo.GetVignetteInfo(\"${2:vignetteGUID}\")$0",
		},
		{
			"trigger": "_C_VignetteInfo.GetVignettePosition\t(\"vignetteGUID\", uiMapID)",
			"contents": "${1:vignettePosition} = C_VignetteInfo.GetVignettePosition(\"${2:vignetteGUID}\", ${3:uiMapID})$0",
		},
		{
			"trigger": "_C_VignetteInfo.GetVignettes\t()",
			"contents": "${1:vignetteGUIDs} = C_VignetteInfo.GetVignettes()$0",
		},
		{
			"trigger": "_C_VoiceChat.CanPlayerUseVoiceChat\t()",
			"contents": "${1:canUseVoiceChat} = C_VoiceChat.CanPlayerUseVoiceChat()$0",
		},
		{
			"trigger": "_C_VoiceChat.CreateChannel\t(\"channelDisplayName\")",
			"contents": "${1:status} = C_VoiceChat.CreateChannel(\"${2:channelDisplayName}\")$0",
		},
		{
			"trigger": "_C_VoiceChat.GetActiveChannelID\t()",
			"contents": "${1:channelID} = C_VoiceChat.GetActiveChannelID()$0",
		},
		{
			"trigger": "_C_VoiceChat.GetActiveChannelType\t()",
			"contents": "${1:channelType} = C_VoiceChat.GetActiveChannelType()$0",
		},
		{
			"trigger": "_C_VoiceChat.GetAvailableInputDevices\t()",
			"contents": "${1:inputDevices} = C_VoiceChat.GetAvailableInputDevices()$0",
		},
		{
			"trigger": "_C_VoiceChat.GetAvailableOutputDevices\t()",
			"contents": "${1:outputDevices} = C_VoiceChat.GetAvailableOutputDevices()$0",
		},
		{
			"trigger": "_C_VoiceChat.GetChannel\t(channelID)",
			"contents": "${1:channel} = C_VoiceChat.GetChannel(${2:channelID})$0",
		},
		{
			"trigger": "_C_VoiceChat.GetChannelForChannelType\t(channelType)",
			"contents": "${1:channel} = C_VoiceChat.GetChannelForChannelType(${2:channelType})$0",
		},
		{
			"trigger": "_C_VoiceChat.GetChannelForCommunityStream\t(\"clubId\", \"streamId\")",
			"contents": "${1:channel} = C_VoiceChat.GetChannelForCommunityStream(\"${2:clubId}\", \"${3:streamId}\")$0",
		},
		{
			"trigger": "_C_VoiceChat.GetCommunicationMode\t()",
			"contents": "${1:communicationMode} = C_VoiceChat.GetCommunicationMode()$0",
		},
		{
			"trigger": "_C_VoiceChat.GetCurrentVoiceChatConnectionStatusCode\t()",
			"contents": "${1:statusCode} = C_VoiceChat.GetCurrentVoiceChatConnectionStatusCode()$0",
		},
		{
			"trigger": "_C_VoiceChat.GetInputVolume\t()",
			"contents": "${1:volume} = C_VoiceChat.GetInputVolume()$0",
		},
		{
			"trigger": "_C_VoiceChat.GetLocalPlayerActiveChannelMemberInfo\t()",
			"contents": "${1:memberInfo} = C_VoiceChat.GetLocalPlayerActiveChannelMemberInfo()$0",
		},
		{
			"trigger": "_C_VoiceChat.GetLocalPlayerMemberID\t(channelID)",
			"contents": "${1:memberID} = C_VoiceChat.GetLocalPlayerMemberID(${2:channelID})$0",
		},
		{
			"trigger": "_C_VoiceChat.GetMemberGUID\t(memberID, channelID)",
			"contents": "${1:memberGUID} = C_VoiceChat.GetMemberGUID(${2:memberID}, ${3:channelID})$0",
		},
		{
			"trigger": "_C_VoiceChat.GetMemberID\t(channelID, \"memberGUID\")",
			"contents": "${1:memberID} = C_VoiceChat.GetMemberID(${2:channelID}, \"${3:memberGUID}\")$0",
		},
		{
			"trigger": "_C_VoiceChat.GetMemberInfo\t(memberID, channelID)",
			"contents": "${1:memberInfo} = C_VoiceChat.GetMemberInfo(${2:memberID}, ${3:channelID})$0",
		},
		{
			"trigger": "_C_VoiceChat.GetMemberName\t(memberID, channelID)",
			"contents": "${1:memberName} = C_VoiceChat.GetMemberName(${2:memberID}, ${3:channelID})$0",
		},
		{
			"trigger": "_C_VoiceChat.GetMemberVolume\t(playerLocation)",
			"contents": "${1:volume} = C_VoiceChat.GetMemberVolume(${2:playerLocation})$0",
		},
		{
			"trigger": "_C_VoiceChat.GetOutputVolume\t()",
			"contents": "${1:volume} = C_VoiceChat.GetOutputVolume()$0",
		},
		{
			"trigger": "_C_VoiceChat.GetProcesses\t()",
			"contents": "${1:processes} = C_VoiceChat.GetProcesses()$0",
		},
		{
			"trigger": "_C_VoiceChat.GetPTTButtonPressedState\t()",
			"contents": "${1:isPressed} = C_VoiceChat.GetPTTButtonPressedState()$0",
		},
		{
			"trigger": "_C_VoiceChat.GetPushToTalkBinding\t()",
			"contents": "${1:keys} = C_VoiceChat.GetPushToTalkBinding()$0",
		},
		{
			"trigger": "_C_VoiceChat.GetVADSensitivity\t()",
			"contents": "${1:sensitivity} = C_VoiceChat.GetVADSensitivity()$0",
		},
		{
			"trigger": "_C_VoiceChat.IsDeafened\t()",
			"contents": "${1:isDeafened} = C_VoiceChat.IsDeafened()$0",
		},
		{
			"trigger": "_C_VoiceChat.IsEnabled\t()",
			"contents": "${1:isEnabled} = C_VoiceChat.IsEnabled()$0",
		},
		{
			"trigger": "_C_VoiceChat.IsLoggedIn\t()",
			"contents": "${1:isLoggedIn} = C_VoiceChat.IsLoggedIn()$0",
		},
		{
			"trigger": "_C_VoiceChat.IsMemberLocalPlayer\t(memberID, channelID)",
			"contents": "${1:isLocalPlayer} = C_VoiceChat.IsMemberLocalPlayer(${2:memberID}, ${3:channelID})$0",
		},
		{
			"trigger": "_C_VoiceChat.IsMemberMuted\t(playerLocation)",
			"contents": "${1:mutedForMe} = C_VoiceChat.IsMemberMuted(${2:playerLocation})$0",
		},
		{
			"trigger": "_C_VoiceChat.IsMemberMutedForAll\t(memberID, channelID)",
			"contents": "${1:mutedForAll} = C_VoiceChat.IsMemberMutedForAll(${2:memberID}, ${3:channelID})$0",
		},
		{
			"trigger": "_C_VoiceChat.IsMemberSilenced\t(memberID, channelID)",
			"contents": "${1:silenced} = C_VoiceChat.IsMemberSilenced(${2:memberID}, ${3:channelID})$0",
		},
		{
			"trigger": "_C_VoiceChat.IsMuted\t()",
			"contents": "${1:isMuted} = C_VoiceChat.IsMuted()$0",
		},
		{
			"trigger": "_C_VoiceChat.IsParentalDisabled\t()",
			"contents": "${1:isParentalDisabled} = C_VoiceChat.IsParentalDisabled()$0",
		},
		{
			"trigger": "_C_VoiceChat.IsParentalMuted\t()",
			"contents": "${1:isParentalMuted} = C_VoiceChat.IsParentalMuted()$0",
		},
		{
			"trigger": "_C_VoiceChat.IsPlayerUsingVoice\t(playerLocation)",
			"contents": "${1:isUsingVoice} = C_VoiceChat.IsPlayerUsingVoice(${2:playerLocation})$0",
		},
		{
			"trigger": "_C_VoiceChat.IsSilenced\t()",
			"contents": "${1:isSilenced} = C_VoiceChat.IsSilenced()$0",
		},
		{
			"trigger": "_C_VoiceChat.Login\t()",
			"contents": "${1:status} = C_VoiceChat.Login()$0",
		},
		{
			"trigger": "_C_VoiceChat.Logout\t()",
			"contents": "${1:status} = C_VoiceChat.Logout()$0",
		},
		{
			"trigger": "_C_VoiceChat.ShouldDiscoverChannels\t()",
			"contents": "${1:shouldDiscoverChannels} = C_VoiceChat.ShouldDiscoverChannels()$0",
		},
	]
}
